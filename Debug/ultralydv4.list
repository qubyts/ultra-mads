
ultralydv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1a0  0800b1a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1a8  0800b1a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1a8  0800b1a8  0001b1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afa8  20000078  0800b228  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b020  0800b228  0002b020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f714  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004691  00000000  00000000  0003f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00043e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00045560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025982  00000000  00000000  00046a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da9f  00000000  00000000  0006c41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc367  00000000  00000000  00089eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006420  00000000  00000000  00166270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b004 	.word	0x0800b004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b004 	.word	0x0800b004

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2iz>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d215      	bcs.n	80008c2 <__aeabi_d2iz+0x36>
 8000896:	d511      	bpl.n	80008bc <__aeabi_d2iz+0x30>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d912      	bls.n	80008c8 <__aeabi_d2iz+0x3c>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008b2:	fa23 f002 	lsr.w	r0, r3, r2
 80008b6:	bf18      	it	ne
 80008b8:	4240      	negne	r0, r0
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d105      	bne.n	80008d4 <__aeabi_d2iz+0x48>
 80008c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b974 	b.w	8000bdc <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468e      	mov	lr, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d14d      	bne.n	80009b6 <__udivmoddi4+0xaa>
 800091a:	428a      	cmp	r2, r1
 800091c:	4694      	mov	ip, r2
 800091e:	d969      	bls.n	80009f4 <__udivmoddi4+0xe8>
 8000920:	fab2 f282 	clz	r2, r2
 8000924:	b152      	cbz	r2, 800093c <__udivmoddi4+0x30>
 8000926:	fa01 f302 	lsl.w	r3, r1, r2
 800092a:	f1c2 0120 	rsb	r1, r2, #32
 800092e:	fa20 f101 	lsr.w	r1, r0, r1
 8000932:	fa0c fc02 	lsl.w	ip, ip, r2
 8000936:	ea41 0e03 	orr.w	lr, r1, r3
 800093a:	4094      	lsls	r4, r2
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	0c21      	lsrs	r1, r4, #16
 8000942:	fbbe f6f8 	udiv	r6, lr, r8
 8000946:	fa1f f78c 	uxth.w	r7, ip
 800094a:	fb08 e316 	mls	r3, r8, r6, lr
 800094e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000952:	fb06 f107 	mul.w	r1, r6, r7
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000962:	f080 811f 	bcs.w	8000ba4 <__udivmoddi4+0x298>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 811c 	bls.w	8000ba4 <__udivmoddi4+0x298>
 800096c:	3e02      	subs	r6, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb3 f0f8 	udiv	r0, r3, r8
 8000978:	fb08 3310 	mls	r3, r8, r0, r3
 800097c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000980:	fb00 f707 	mul.w	r7, r0, r7
 8000984:	42a7      	cmp	r7, r4
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x92>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000990:	f080 810a 	bcs.w	8000ba8 <__udivmoddi4+0x29c>
 8000994:	42a7      	cmp	r7, r4
 8000996:	f240 8107 	bls.w	8000ba8 <__udivmoddi4+0x29c>
 800099a:	4464      	add	r4, ip
 800099c:	3802      	subs	r0, #2
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	1be4      	subs	r4, r4, r7
 80009a4:	2600      	movs	r6, #0
 80009a6:	b11d      	cbz	r5, 80009b0 <__udivmoddi4+0xa4>
 80009a8:	40d4      	lsrs	r4, r2
 80009aa:	2300      	movs	r3, #0
 80009ac:	e9c5 4300 	strd	r4, r3, [r5]
 80009b0:	4631      	mov	r1, r6
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d909      	bls.n	80009ce <__udivmoddi4+0xc2>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	f000 80ef 	beq.w	8000b9e <__udivmoddi4+0x292>
 80009c0:	2600      	movs	r6, #0
 80009c2:	e9c5 0100 	strd	r0, r1, [r5]
 80009c6:	4630      	mov	r0, r6
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	fab3 f683 	clz	r6, r3
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d14a      	bne.n	8000a6c <__udivmoddi4+0x160>
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d302      	bcc.n	80009e0 <__udivmoddi4+0xd4>
 80009da:	4282      	cmp	r2, r0
 80009dc:	f200 80f9 	bhi.w	8000bd2 <__udivmoddi4+0x2c6>
 80009e0:	1a84      	subs	r4, r0, r2
 80009e2:	eb61 0303 	sbc.w	r3, r1, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	469e      	mov	lr, r3
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d0e0      	beq.n	80009b0 <__udivmoddi4+0xa4>
 80009ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80009f2:	e7dd      	b.n	80009b0 <__udivmoddi4+0xa4>
 80009f4:	b902      	cbnz	r2, 80009f8 <__udivmoddi4+0xec>
 80009f6:	deff      	udf	#255	; 0xff
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	f040 8092 	bne.w	8000b26 <__udivmoddi4+0x21a>
 8000a02:	eba1 010c 	sub.w	r1, r1, ip
 8000a06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a0a:	fa1f fe8c 	uxth.w	lr, ip
 8000a0e:	2601      	movs	r6, #1
 8000a10:	0c20      	lsrs	r0, r4, #16
 8000a12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a16:	fb07 1113 	mls	r1, r7, r3, r1
 8000a1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a1e:	fb0e f003 	mul.w	r0, lr, r3
 8000a22:	4288      	cmp	r0, r1
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x12c>
 8000a26:	eb1c 0101 	adds.w	r1, ip, r1
 8000a2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x12a>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f200 80cb 	bhi.w	8000bcc <__udivmoddi4+0x2c0>
 8000a36:	4643      	mov	r3, r8
 8000a38:	1a09      	subs	r1, r1, r0
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a40:	fb07 1110 	mls	r1, r7, r0, r1
 8000a44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a48:	fb0e fe00 	mul.w	lr, lr, r0
 8000a4c:	45a6      	cmp	lr, r4
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x156>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a58:	d202      	bcs.n	8000a60 <__udivmoddi4+0x154>
 8000a5a:	45a6      	cmp	lr, r4
 8000a5c:	f200 80bb 	bhi.w	8000bd6 <__udivmoddi4+0x2ca>
 8000a60:	4608      	mov	r0, r1
 8000a62:	eba4 040e 	sub.w	r4, r4, lr
 8000a66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a6a:	e79c      	b.n	80009a6 <__udivmoddi4+0x9a>
 8000a6c:	f1c6 0720 	rsb	r7, r6, #32
 8000a70:	40b3      	lsls	r3, r6
 8000a72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a82:	431c      	orrs	r4, r3
 8000a84:	40f9      	lsrs	r1, r7
 8000a86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a92:	0c20      	lsrs	r0, r4, #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fb09 1118 	mls	r1, r9, r8, r1
 8000a9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000aa4:	4288      	cmp	r0, r1
 8000aa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aaa:	d90b      	bls.n	8000ac4 <__udivmoddi4+0x1b8>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ab4:	f080 8088 	bcs.w	8000bc8 <__udivmoddi4+0x2bc>
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	f240 8085 	bls.w	8000bc8 <__udivmoddi4+0x2bc>
 8000abe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1a09      	subs	r1, r1, r0
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000acc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ad0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ad4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ad8:	458e      	cmp	lr, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x1e2>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ae4:	d26c      	bcs.n	8000bc0 <__udivmoddi4+0x2b4>
 8000ae6:	458e      	cmp	lr, r1
 8000ae8:	d96a      	bls.n	8000bc0 <__udivmoddi4+0x2b4>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af2:	fba0 9402 	umull	r9, r4, r0, r2
 8000af6:	eba1 010e 	sub.w	r1, r1, lr
 8000afa:	42a1      	cmp	r1, r4
 8000afc:	46c8      	mov	r8, r9
 8000afe:	46a6      	mov	lr, r4
 8000b00:	d356      	bcc.n	8000bb0 <__udivmoddi4+0x2a4>
 8000b02:	d053      	beq.n	8000bac <__udivmoddi4+0x2a0>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x212>
 8000b06:	ebb3 0208 	subs.w	r2, r3, r8
 8000b0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b12:	fa22 f306 	lsr.w	r3, r2, r6
 8000b16:	40f1      	lsrs	r1, r6
 8000b18:	431f      	orrs	r7, r3
 8000b1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b30:	fa21 f303 	lsr.w	r3, r1, r3
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4301      	orrs	r1, r0
 8000b38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b44:	fb07 3610 	mls	r6, r7, r0, r3
 8000b48:	0c0b      	lsrs	r3, r1, #16
 8000b4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b52:	429e      	cmp	r6, r3
 8000b54:	fa04 f402 	lsl.w	r4, r4, r2
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x260>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b62:	d22f      	bcs.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d92d      	bls.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	b289      	uxth	r1, r1
 8000b70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b74:	fb07 3316 	mls	r3, r7, r6, r3
 8000b78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x28a>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b8c:	d216      	bcs.n	8000bbc <__udivmoddi4+0x2b0>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d914      	bls.n	8000bbc <__udivmoddi4+0x2b0>
 8000b92:	3e02      	subs	r6, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	1ac9      	subs	r1, r1, r3
 8000b98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b9c:	e738      	b.n	8000a10 <__udivmoddi4+0x104>
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e705      	b.n	80009b0 <__udivmoddi4+0xa4>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e3      	b.n	8000970 <__udivmoddi4+0x64>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6f8      	b.n	800099e <__udivmoddi4+0x92>
 8000bac:	454b      	cmp	r3, r9
 8000bae:	d2a9      	bcs.n	8000b04 <__udivmoddi4+0x1f8>
 8000bb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7a3      	b.n	8000b04 <__udivmoddi4+0x1f8>
 8000bbc:	4646      	mov	r6, r8
 8000bbe:	e7ea      	b.n	8000b96 <__udivmoddi4+0x28a>
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	e794      	b.n	8000aee <__udivmoddi4+0x1e2>
 8000bc4:	4640      	mov	r0, r8
 8000bc6:	e7d1      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bc8:	46d0      	mov	r8, sl
 8000bca:	e77b      	b.n	8000ac4 <__udivmoddi4+0x1b8>
 8000bcc:	3b02      	subs	r3, #2
 8000bce:	4461      	add	r1, ip
 8000bd0:	e732      	b.n	8000a38 <__udivmoddi4+0x12c>
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	e709      	b.n	80009ea <__udivmoddi4+0xde>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	e742      	b.n	8000a62 <__udivmoddi4+0x156>

08000bdc <__aeabi_idiv0>:
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2105      	movs	r1, #5
 8000c06:	2011      	movs	r0, #17
 8000c08:	f001 f99e 	bl	8001f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f001 f9b7 	bl	8001f80 <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	//PrintServerPrintfInit();
	//deftask_init();
	//buzzer_init();
	PrintServerPrintfInit();
 8000c24:	f001 f868 	bl	8001cf8 <PrintServerPrintfInit>
	deftask_init();
 8000c28:	f000 ffca 	bl	8001bc0 <deftask_init>
	buzzer_init();
 8000c2c:	f000 ff72 	bl	8001b14 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <MX_FREERTOS_Init+0x24>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_FREERTOS_Init+0x28>)
 8000c36:	f005 fca5 	bl	8006584 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a03      	ldr	r2, [pc, #12]	; (8000c4c <MX_FREERTOS_Init+0x2c>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800b080 	.word	0x0800b080
 8000c48:	08000c51 	.word	0x08000c51
 8000c4c:	20000094 	.word	0x20000094

08000c50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f005 fd26 	bl	80066aa <osDelay>
 8000c5e:	e7fb      	b.n	8000c58 <StartDefaultTask+0x8>

08000c60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_GPIO_Init+0xe0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <MX_GPIO_Init+0xe4>)
 8000cd0:	f001 fefa 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	481b      	ldr	r0, [pc, #108]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000cdc:	f001 fef4 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000cf8:	f001 fd52 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_GPIO_Init+0xe4>)
 8000d14:	f001 fd44 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_GPIO_Init+0xe8>)
 8000d32:	f001 fd35 	bl	80027a0 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020800 	.word	0x40020800

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f001 f800 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f816 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f7ff ff82 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d5c:	f7ff ff40 	bl	8000be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 fd44 	bl	80017ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d64:	f000 fa6c 	bl	8001240 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d68:	f000 fb0a 	bl	8001380 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000d6c:	f000 fb5e 	bl	800142c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d70:	f000 fbcc 	bl	800150c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d74:	f005 fbbc 	bl	80064f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d78:	f7ff ff52 	bl	8000c20 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d7c:	f005 fbdc 	bl	8006538 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <main+0x34>
	...

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2234      	movs	r2, #52	; 0x34
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f009 fc4c 	bl	800a630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <SystemClock_Config+0xdc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <SystemClock_Config+0xdc>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <SystemClock_Config+0xdc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <SystemClock_Config+0xe0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <SystemClock_Config+0xe0>)
 8000dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <SystemClock_Config+0xe0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000df8:	23b4      	movs	r3, #180	; 0xb4
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fa5b 	bl	80032c8 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e18:	f000 f8d4 	bl	8000fc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e1c:	f001 fe88 	bl	8002b30 <HAL_PWREx_EnableOverDrive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e26:	f000 f8cd 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	2105      	movs	r1, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fec1 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e54:	f000 f8b6 	bl	8000fc4 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{//printf("Callback \n \r");
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d135      	bne.n	8000ee6 <HAL_TIM_IC_CaptureCallback+0x7e>
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
		//printf("CCR1 is %i \n", TIM4->CCR1);
		if (TIM4->CCR1 >= 4500){
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	f241 1293 	movw	r2, #4499	; 0x1193
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d92f      	bls.n	8000ee6 <HAL_TIM_IC_CaptureCallback+0x7e>
			captured_value1 = TIM4->CNT;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000e8e:	601a      	str	r2, [r3, #0]
			TIM4->DIER &= ~(1<<1);
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e96:	f023 0302 	bic.w	r3, r3, #2
 8000e9a:	60d3      	str	r3, [r2, #12]
			distance = (captured_value1/11)*0.0342;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	1052      	asrs	r2, r2, #1
 8000ea8:	17db      	asrs	r3, r3, #31
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc83 	bl	80007b8 <__aeabi_i2d>
 8000eb2:	a30f      	add	r3, pc, #60	; (adr r3, 8000ef0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f7ff fa02 	bl	80002c0 <__aeabi_dmul>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fce2 	bl	800088c <__aeabi_d2iz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ecc:	6013      	str	r3, [r2, #0]
			printf("CCR1-2 is %i \n", captured_value1);
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ed6:	f000 fe85 	bl	8001be4 <PrintServerPrintf>
				  printf("distance is: %i cm \n \r", distance);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000ee2:	f000 fe7f 	bl	8001be4 <PrintServerPrintf>
		}

	}
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	930be0df 	.word	0x930be0df
 8000ef4:	3fa182a9 	.word	0x3fa182a9
 8000ef8:	40000800 	.word	0x40000800
 8000efc:	20000098 	.word	0x20000098
 8000f00:	2e8ba2e9 	.word	0x2e8ba2e9
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	0800b028 	.word	0x0800b028
 8000f0c:	0800b038 	.word	0x0800b038

08000f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f20:	d136      	bne.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x80>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
		if(hardwareDelayFlag == 1)
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d11b      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f2e:	f002 fe4b 	bl	8003bc8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	481d      	ldr	r0, [pc, #116]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f36:	f004 f8d3 	bl	80050e0 <HAL_TIMEx_PWMN_Stop>
			TIM1->CNT = 0;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR = 54000;
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f44:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
			__HAL_TIM_ENABLE(&htim2);
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
			//HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);

						hardwareDelayFlag = 0;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e016      	b.n	8000f90 <HAL_TIM_PeriodElapsedCallback+0x80>

		}		else
		{
			__HAL_TIM_ENABLE(&htim4);
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
			TIM4->DIER |= (1<<1);
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	60d3      	str	r3, [r2, #12]
								TIM4->SR &= ~(1<<1);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f84:	f023 0302 	bic.w	r3, r3, #2
 8000f88:	6113      	str	r3, [r2, #16]
								TIM4->CNT = 0;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
		}

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x8e>
    HAL_IncTick();
 8000f9a:	f000 fefd 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000009c 	.word	0x2000009c
 8000fac:	200000f0 	.word	0x200000f0
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	20000138 	.word	0x20000138
 8000fb8:	20000180 	.word	0x20000180
 8000fbc:	40000800 	.word	0x40000800
 8000fc0:	40001400 	.word	0x40001400

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_MspInit+0x54>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_MspInit+0x54>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x54>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_MspInit+0x54>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_MspInit+0x54>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x54>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	f06f 0001 	mvn.w	r0, #1
 8001016:	f000 ff97 	bl	8001f48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <HAL_InitTick+0xe4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a32      	ldr	r2, [pc, #200]	; (800110c <HAL_InitTick+0xe4>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b30      	ldr	r3, [pc, #192]	; (800110c <HAL_InitTick+0xe4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fed0 	bl	8002e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	2b00      	cmp	r3, #0
 800106c:	d103      	bne.n	8001076 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800106e:	f001 fea1 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8001072:	6378      	str	r0, [r7, #52]	; 0x34
 8001074:	e004      	b.n	8001080 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001076:	f001 fe9d 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800107a:	4603      	mov	r3, r0
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_InitTick+0xe8>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3b01      	subs	r3, #1
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_InitTick+0xec>)
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_InitTick+0xf0>)
 8001092:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_InitTick+0xec>)
 8001096:	f240 32e7 	movw	r2, #999	; 0x3e7
 800109a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_InitTick+0xec>)
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_InitTick+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_InitTick+0xec>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_InitTick+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <HAL_InitTick+0xec>)
 80010b6:	f002 fba5 	bl	8003804 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11b      	bne.n	8001100 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <HAL_InitTick+0xec>)
 80010ca:	f002 fbeb 	bl	80038a4 <HAL_TIM_Base_Start_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010dc:	2037      	movs	r0, #55	; 0x37
 80010de:	f000 ff4f 	bl	8001f80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d808      	bhi.n	80010fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	2037      	movs	r0, #55	; 0x37
 80010ee:	f000 ff2b 	bl	8001f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0xf4>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e002      	b.n	8001100 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001100:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001104:	4618      	mov	r0, r3
 8001106:	3738      	adds	r7, #56	; 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	431bde83 	.word	0x431bde83
 8001114:	200000a4 	.word	0x200000a4
 8001118:	40001400 	.word	0x40001400
 800111c:	20000008 	.word	0x20000008

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA1_Stream6_IRQHandler+0x10>)
 8001152:	f001 f8bb 	bl	80022cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000254 	.word	0x20000254

08001160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM2_IRQHandler+0x10>)
 8001166:	f002 ff7b 	bl	8004060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000138 	.word	0x20000138

08001174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM4_IRQHandler+0x10>)
 800117a:	f002 ff71 	bl	8004060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000180 	.word	0x20000180

08001188 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USART2_IRQHandler+0x10>)
 800118e:	f004 f9d7 	bl	8005540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000210 	.word	0x20000210

0800119c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM7_IRQHandler+0x10>)
 80011a2:	f002 ff5d 	bl	8004060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000a4 	.word	0x200000a4

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f009 f9ec 	bl	800a5bc <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20020000 	.word	0x20020000
 8001210:	00000400 	.word	0x00000400
 8001214:	200000ec 	.word	0x200000ec
 8001218:	2000b020 	.word	0x2000b020

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f009 f9d9 	bl	800a630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <MX_TIM1_Init+0x138>)
 8001280:	4a3e      	ldr	r2, [pc, #248]	; (800137c <MX_TIM1_Init+0x13c>)
 8001282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <MX_TIM1_Init+0x138>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_TIM1_Init+0x138>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4500;
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <MX_TIM1_Init+0x138>)
 8001292:	f241 1294 	movw	r2, #4500	; 0x1194
 8001296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <MX_TIM1_Init+0x138>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM1_Init+0x138>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_TIM1_Init+0x138>)
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	4833      	ldr	r0, [pc, #204]	; (8001378 <MX_TIM1_Init+0x138>)
 80012ac:	f002 faaa 	bl	8003804 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012b6:	f7ff fe85 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c4:	4619      	mov	r1, r3
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <MX_TIM1_Init+0x138>)
 80012c8:	f003 f930 	bl	800452c <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012d2:	f7ff fe77 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d6:	4828      	ldr	r0, [pc, #160]	; (8001378 <MX_TIM1_Init+0x138>)
 80012d8:	f002 fb54 	bl	8003984 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012e2:	f7ff fe6f 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f2:	4619      	mov	r1, r3
 80012f4:	4820      	ldr	r0, [pc, #128]	; (8001378 <MX_TIM1_Init+0x138>)
 80012f6:	f003 ff51 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001300:	f7ff fe60 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001304:	2360      	movs	r3, #96	; 0x60
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 40;
 8001308:	2328      	movs	r3, #40	; 0x28
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM1_Init+0x138>)
 800132a:	f003 f83d 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001334:	f7ff fe46 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 8001344:	2396      	movs	r3, #150	; 0x96
 8001346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x138>)
 800135c:	f003 ff9a 	bl	8005294 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001366:	f7ff fe2d 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x138>)
 800136c:	f000 f9de 	bl	800172c <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3758      	adds	r7, #88	; 0x58
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000f0 	.word	0x200000f0
 800137c:	40010000 	.word	0x40010000

08001380 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_TIM2_Init+0xa8>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013b2:	f245 72e4 	movw	r2, #22500	; 0x57e4
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013c6:	f002 fa1d 	bl	8003804 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013d0:	f7ff fdf8 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013e2:	f003 f8a3 	bl	800452c <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ec:	f7ff fdea 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80013f0:	2108      	movs	r1, #8
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_TIM2_Init+0xa8>)
 80013f4:	f002 fdda 	bl	8003fac <HAL_TIM_OnePulse_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013fe:	f7ff fde1 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM2_Init+0xa8>)
 8001410:	f003 fec4 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800141a:	f7ff fdd3 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000138 	.word	0x20000138

0800142c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM4_Init+0xd8>)
 8001458:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <MX_TIM4_Init+0xdc>)
 800145a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_TIM4_Init+0xd8>)
 800145e:	220e      	movs	r2, #14
 8001460:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM4_Init+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM4_Init+0xd8>)
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM4_Init+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <MX_TIM4_Init+0xd8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800147c:	4821      	ldr	r0, [pc, #132]	; (8001504 <MX_TIM4_Init+0xd8>)
 800147e:	f002 f9c1 	bl	8003804 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001488:	f7ff fd9c 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	4619      	mov	r1, r3
 8001498:	481a      	ldr	r0, [pc, #104]	; (8001504 <MX_TIM4_Init+0xd8>)
 800149a:	f003 f847 	bl	800452c <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014a4:	f7ff fd8e 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014a8:	4816      	ldr	r0, [pc, #88]	; (8001504 <MX_TIM4_Init+0xd8>)
 80014aa:	f002 fbfd 	bl	8003ca8 <HAL_TIM_IC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff fd86 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014b8:	2320      	movs	r3, #32
 80014ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	480f      	ldr	r0, [pc, #60]	; (8001504 <MX_TIM4_Init+0xd8>)
 80014c8:	f003 fe68 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80014d2:	f7ff fd77 	bl	8000fc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014da:	2301      	movs	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM4_Init+0xd8>)
 80014ee:	f002 febf 	bl	8004270 <HAL_TIM_IC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80014f8:	f7ff fd64 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000180 	.word	0x20000180
 8001508:	40000800 	.word	0x40000800

0800150c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_TIM5_Init+0xe8>)
 800153e:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <MX_TIM5_Init+0xec>)
 8001540:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001544:	222d      	movs	r2, #45	; 0x2d
 8001546:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_TIM5_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001550:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001554:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_TIM5_Init+0xe8>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001562:	4824      	ldr	r0, [pc, #144]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001564:	f002 f94e 	bl	8003804 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800156e:	f7ff fd29 	bl	8000fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	4619      	mov	r1, r3
 800157e:	481d      	ldr	r0, [pc, #116]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001580:	f002 ffd4 	bl	800452c <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800158a:	f7ff fd1b 	bl	8000fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800158e:	4819      	ldr	r0, [pc, #100]	; (80015f4 <MX_TIM5_Init+0xe8>)
 8001590:	f002 f9f8 	bl	8003984 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800159a:	f7ff fd13 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	4619      	mov	r1, r3
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <MX_TIM5_Init+0xe8>)
 80015ae:	f003 fdf5 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80015b8:	f7ff fd04 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80015c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM5_Init+0xe8>)
 80015d6:	f002 fee7 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80015e0:	f7ff fcf0 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM5_Init+0xe8>)
 80015e6:	f000 f8a1 	bl	800172c <HAL_TIM_MspPostInit>

}
 80015ea:	bf00      	nop
 80015ec:	3738      	adds	r7, #56	; 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001c8 	.word	0x200001c8
 80015f8:	40000c00 	.word	0x40000c00

080015fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_TIM_Base_MspInit+0x11c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10e      	bne.n	800163c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800163a:	e068      	b.n	800170e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001644:	d116      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2105      	movs	r1, #5
 8001666:	201c      	movs	r0, #28
 8001668:	f000 fc6e 	bl	8001f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800166c:	201c      	movs	r0, #28
 800166e:	f000 fc87 	bl	8001f80 <HAL_NVIC_EnableIRQ>
}
 8001672:	e04c      	b.n	800170e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM4)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a29      	ldr	r2, [pc, #164]	; (8001720 <HAL_TIM_Base_MspInit+0x124>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d134      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016c6:	2302      	movs	r3, #2
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <HAL_TIM_Base_MspInit+0x128>)
 80016d2:	f001 f865 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	201e      	movs	r0, #30
 80016dc:	f000 fc34 	bl	8001f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016e0:	201e      	movs	r0, #30
 80016e2:	f000 fc4d 	bl	8001f80 <HAL_NVIC_EnableIRQ>
}
 80016e6:	e012      	b.n	800170e <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM5)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_TIM_Base_MspInit+0x12c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10d      	bne.n	800170e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_TIM_Base_MspInit+0x120>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	40023800 	.word	0x40023800
 8001720:	40000800 	.word	0x40000800
 8001724:	40020400 	.word	0x40020400
 8001728:	40000c00 	.word	0x40000c00

0800172c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a24      	ldr	r2, [pc, #144]	; (80017dc <HAL_TIM_MspPostInit+0xb0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11f      	bne.n	800178e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800176a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800177c:	2301      	movs	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4817      	ldr	r0, [pc, #92]	; (80017e4 <HAL_TIM_MspPostInit+0xb8>)
 8001788:	f001 f80a 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800178c:	e022      	b.n	80017d4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <HAL_TIM_MspPostInit+0xbc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d11d      	bne.n	80017d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_TIM_MspPostInit+0xb4>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017c4:	2302      	movs	r3, #2
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_TIM_MspPostInit+0xb8>)
 80017d0:	f000 ffe6 	bl	80027a0 <HAL_GPIO_Init>
}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40000c00 	.word	0x40000c00

080017ec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f003 fdc1 	bl	80053aa <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f7ff fbc9 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000210 	.word	0x20000210
 800183c:	40004400 	.word	0x40004400

08001840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_UART_MspInit+0xf0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d161      	bne.n	8001926 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_UART_MspInit+0xf4>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_UART_MspInit+0xf4>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_UART_MspInit+0xf4>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <HAL_UART_MspInit+0xf4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_UART_MspInit+0xf4>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_UART_MspInit+0xf4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800189a:	230c      	movs	r3, #12
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018aa:	2307      	movs	r3, #7
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <HAL_UART_MspInit+0xf8>)
 80018b6:	f000 ff73 	bl	80027a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <HAL_UART_MspInit+0x100>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018fa:	4810      	ldr	r0, [pc, #64]	; (800193c <HAL_UART_MspInit+0xfc>)
 80018fc:	f000 fb4e 	bl	8001f9c <HAL_DMA_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001906:	f7ff fb5d 	bl	8000fc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_UART_MspInit+0xfc>)
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_UART_MspInit+0xfc>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	2026      	movs	r0, #38	; 0x26
 800191c:	f000 fb14 	bl	8001f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001920:	2026      	movs	r0, #38	; 0x26
 8001922:	f000 fb2d 	bl	8001f80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	20000254 	.word	0x20000254
 8001940:	400260a0 	.word	0x400260a0

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff fc55 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f008 fe29 	bl	800a5c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff f9e9 	bl	8000d4c <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001988:	0800b1b0 	.word	0x0800b1b0
  ldr r2, =_sbss
 800198c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001990:	2000b020 	.word	0x2000b020

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <Start_BuzzerTask>:



char txbuff1[50];
void Start_BuzzerTask(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80019a0:	2100      	movs	r1, #0
 80019a2:	4859      	ldr	r0, [pc, #356]	; (8001b08 <Start_BuzzerTask+0x170>)
 80019a4:	f002 f848 	bl	8003a38 <HAL_TIM_PWM_Start>
	  TIM5->CCR1 = 1000;
 80019a8:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <Start_BuzzerTask+0x174>)
 80019aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
	  int buzzer_toggle = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
	  int buzzer_toggle_cont = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
	  int buzzer_toggle_delay = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
	  int distance = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  {
	  ////distance = (captured_value1);

	  //distance = (captured_value1/6.25)*0.0342;

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80019c0:	2120      	movs	r1, #32
 80019c2:	4853      	ldr	r0, [pc, #332]	; (8001b10 <Start_BuzzerTask+0x178>)
 80019c4:	f001 f899 	bl	8002afa <HAL_GPIO_TogglePin>
	  if((distance > 0)&&(distance <30))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dd08      	ble.n	80019e0 <Start_BuzzerTask+0x48>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b1d      	cmp	r3, #29
 80019d2:	dc05      	bgt.n	80019e0 <Start_BuzzerTask+0x48>
		  {
			  buzzer_toggle_delay = 1000;
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e05c      	b.n	8001a9a <Start_BuzzerTask+0x102>
		  }
	  else if((distance >= 30)&&(distance <60))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b1d      	cmp	r3, #29
 80019e4:	dd07      	ble.n	80019f6 <Start_BuzzerTask+0x5e>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b3b      	cmp	r3, #59	; 0x3b
 80019ea:	dc04      	bgt.n	80019f6 <Start_BuzzerTask+0x5e>
		  {
			  buzzer_toggle_delay = 125;
 80019ec:	237d      	movs	r3, #125	; 0x7d
 80019ee:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e051      	b.n	8001a9a <Start_BuzzerTask+0x102>
		  }
	  else if((distance >= 60)&&(distance <90))
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b3b      	cmp	r3, #59	; 0x3b
 80019fa:	dd07      	ble.n	8001a0c <Start_BuzzerTask+0x74>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b59      	cmp	r3, #89	; 0x59
 8001a00:	dc04      	bgt.n	8001a0c <Start_BuzzerTask+0x74>
	  	  {
			  buzzer_toggle_delay = 142;
 8001a02:	238e      	movs	r3, #142	; 0x8e
 8001a04:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e046      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }
	  else if((distance >= 90)&&(distance <120))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b59      	cmp	r3, #89	; 0x59
 8001a10:	dd07      	ble.n	8001a22 <Start_BuzzerTask+0x8a>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b77      	cmp	r3, #119	; 0x77
 8001a16:	dc04      	bgt.n	8001a22 <Start_BuzzerTask+0x8a>
	  	  {
			  buzzer_toggle_delay = 167;
 8001a18:	23a7      	movs	r3, #167	; 0xa7
 8001a1a:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	e03b      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }
	  else if((distance >= 120)&&(distance <150))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b77      	cmp	r3, #119	; 0x77
 8001a26:	dd07      	ble.n	8001a38 <Start_BuzzerTask+0xa0>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b95      	cmp	r3, #149	; 0x95
 8001a2c:	dc04      	bgt.n	8001a38 <Start_BuzzerTask+0xa0>
	  	  {
			  buzzer_toggle_delay = 200;
 8001a2e:	23c8      	movs	r3, #200	; 0xc8
 8001a30:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e030      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }
	  else if((distance >= 150)&&(distance <180))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b95      	cmp	r3, #149	; 0x95
 8001a3c:	dd07      	ble.n	8001a4e <Start_BuzzerTask+0xb6>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2bb3      	cmp	r3, #179	; 0xb3
 8001a42:	dc04      	bgt.n	8001a4e <Start_BuzzerTask+0xb6>
	  	  {
			  buzzer_toggle_delay = 250;
 8001a44:	23fa      	movs	r3, #250	; 0xfa
 8001a46:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e025      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }
	  else if((distance >= 180)&&(distance <210))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2bb3      	cmp	r3, #179	; 0xb3
 8001a52:	dd08      	ble.n	8001a66 <Start_BuzzerTask+0xce>
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2bd1      	cmp	r3, #209	; 0xd1
 8001a58:	dc05      	bgt.n	8001a66 <Start_BuzzerTask+0xce>
	  	  {
			  buzzer_toggle_delay = 333;
 8001a5a:	f240 134d 	movw	r3, #333	; 0x14d
 8001a5e:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	e019      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }
	  else if((distance >= 210)&&(distance <270))
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2bd1      	cmp	r3, #209	; 0xd1
 8001a6a:	dd09      	ble.n	8001a80 <Start_BuzzerTask+0xe8>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001a72:	da05      	bge.n	8001a80 <Start_BuzzerTask+0xe8>
	  	  {
			  buzzer_toggle_delay = 500;
 8001a74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a78:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e00c      	b.n	8001a9a <Start_BuzzerTask+0x102>
	  	  }

	  else if((distance >= 270)&&(distance <=300))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001a86:	db08      	blt.n	8001a9a <Start_BuzzerTask+0x102>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a8e:	dc04      	bgt.n	8001a9a <Start_BuzzerTask+0x102>
	  	  {
			  buzzer_toggle_delay = 1000;
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	60fb      	str	r3, [r7, #12]
			  buzzer_toggle_cont = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
	  	  }

	  //sprintf(txbuff1,"distance: %d\n\r",distance);
	  //HAL_UART_Transmit(&huart2, &txbuff1, 20, 100);
	  if(buzzer_toggle == 1)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <Start_BuzzerTask+0x116>
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4819      	ldr	r0, [pc, #100]	; (8001b08 <Start_BuzzerTask+0x170>)
 8001aa4:	f001 ffc8 	bl	8003a38 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e012      	b.n	8001ad4 <Start_BuzzerTask+0x13c>

	  }
	  else if((buzzer_toggle == 0)&&(buzzer_toggle_cont == 0))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <Start_BuzzerTask+0x130>
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <Start_BuzzerTask+0x130>
	  {
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001aba:	2100      	movs	r1, #0
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <Start_BuzzerTask+0x170>)
 8001abe:	f002 f883 	bl	8003bc8 <HAL_TIM_PWM_Stop>
		  buzzer_toggle = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e005      	b.n	8001ad4 <Start_BuzzerTask+0x13c>
	  }
	  else
	  {
		  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480f      	ldr	r0, [pc, #60]	; (8001b08 <Start_BuzzerTask+0x170>)
 8001acc:	f001 ffb4 	bl	8003a38 <HAL_TIM_PWM_Start>
		  buzzer_toggle = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
	  }
	  if(distance < 1)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	dc06      	bgt.n	8001ae8 <Start_BuzzerTask+0x150>
	  {
		  buzzer_toggle_delay = 2000;
 8001ada:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ade:	60fb      	str	r3, [r7, #12]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <Start_BuzzerTask+0x170>)
 8001ae4:	f002 f870 	bl	8003bc8 <HAL_TIM_PWM_Stop>
	  }
	  if(distance >300)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aee:	dd06      	ble.n	8001afe <Start_BuzzerTask+0x166>
	  {
		  buzzer_toggle_delay = 2000;
 8001af0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001af4:	60fb      	str	r3, [r7, #12]
		  HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001af6:	2100      	movs	r1, #0
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <Start_BuzzerTask+0x170>)
 8001afa:	f002 f865 	bl	8003bc8 <HAL_TIM_PWM_Stop>
	  }

    osDelay(buzzer_toggle_delay);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fdd2 	bl	80066aa <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b06:	e75b      	b.n	80019c0 <Start_BuzzerTask+0x28>
 8001b08:	200001c8 	.word	0x200001c8
 8001b0c:	40000c00 	.word	0x40000c00
 8001b10:	40020000 	.word	0x40020000

08001b14 <buzzer_init>:
  }

}
void buzzer_init(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
/* creation of Buzzer_Task */
Buzzer_TaskHandle = osThreadNew(Start_BuzzerTask, &distance, &Buzzer_Task_attributes);
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <buzzer_init+0x18>)
 8001b1a:	4905      	ldr	r1, [pc, #20]	; (8001b30 <buzzer_init+0x1c>)
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <buzzer_init+0x20>)
 8001b1e:	f004 fd31 	bl	8006584 <osThreadNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <buzzer_init+0x24>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	0800b0bc 	.word	0x0800b0bc
 8001b30:	200000a0 	.word	0x200000a0
 8001b34:	08001999 	.word	0x08001999
 8001b38:	200002b4 	.word	0x200002b4

08001b3c <StarttimerTask>:
  .priority = (osPriority_t) osPriorityNormal,
};
void StarttimerTask(void *argument);

void StarttimerTask(void *argument)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	HAL_TIM_Base_Start_IT(&htim2);
 8001b44:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <StarttimerTask+0x6c>)
 8001b46:	f001 fead 	bl	80038a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4817      	ldr	r0, [pc, #92]	; (8001bac <StarttimerTask+0x70>)
 8001b4e:	f002 f905 	bl	8003d5c <HAL_TIM_IC_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  /* Infinite loop */
  for(;;)
  {
if (hardwareDelayFlag == 0){
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <StarttimerTask+0x74>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <StarttimerTask+0x62>
	  		TIM2->ARR = 22500;
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5e:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
	  		__HAL_TIM_ENABLE(&htim2);
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <StarttimerTask+0x6c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <StarttimerTask+0x6c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
	  		TIM1->CCR1 = 2250;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <StarttimerTask+0x78>)
 8001b76:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34

	  		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <StarttimerTask+0x7c>)
 8001b80:	f003 f9f4 	bl	8004f6c <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b84:	2100      	movs	r1, #0
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <StarttimerTask+0x7c>)
 8001b88:	f001 ff56 	bl	8003a38 <HAL_TIM_PWM_Start>
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
	  		hardwareDelayFlag = 1;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <StarttimerTask+0x74>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
	  		TIM4->DIER &= ~(1<<1);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <StarttimerTask+0x80>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <StarttimerTask+0x80>)
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	60d3      	str	r3, [r2, #12]
	  		//TIM4->CCR1;
}

//	  	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
    osDelay(1000);
 8001b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba2:	f004 fd82 	bl	80066aa <osDelay>
if (hardwareDelayFlag == 0){
 8001ba6:	e7d4      	b.n	8001b52 <StarttimerTask+0x16>
 8001ba8:	20000138 	.word	0x20000138
 8001bac:	20000180 	.word	0x20000180
 8001bb0:	2000009c 	.word	0x2000009c
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	200000f0 	.word	0x200000f0
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <deftask_init>:
  }
  /* USER CODE END StartDefaultTask */
}

void deftask_init(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	/* creation of defaultTask */
	timerTaskHandle = osThreadNew(StarttimerTask, NULL, &timerTask_attributes);
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <deftask_init+0x18>)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <deftask_init+0x1c>)
 8001bca:	f004 fcdb 	bl	8006584 <osThreadNew>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <deftask_init+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800b0e0 	.word	0x0800b0e0
 8001bdc:	08001b3d 	.word	0x08001b3d
 8001be0:	200002b8 	.word	0x200002b8

08001be4 <PrintServerPrintf>:
	uint8_t buffer[PRINT_BUFFER_SIZE];
} PrintStruct;

//oppgave e
void PrintServerPrintf(const char *fmt, ...)
{
 8001be4:	b40f      	push	{r0, r1, r2, r3}
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0

	PrintStruct *PrintMem;

	PrintMem = (PrintStruct *) osMemoryPoolAlloc(PrintPool, 0U);
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <PrintServerPrintf+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 f866 	bl	8006cc4 <osMemoryPoolAlloc>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	607b      	str	r3, [r7, #4]
	if(PrintMem == NULL){
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01b      	beq.n	8001c3a <PrintServerPrintf+0x56>
		return;
	}

	va_list args;

	va_start(args, fmt);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	603b      	str	r3, [r7, #0]

	vsnprintf((char *)PrintMem -> buffer, PRINT_BUFFER_SIZE, fmt, args);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	f008 fe4f 	bl	800a8b4 <vsniprintf>

	va_end(args);

	if(osMessageQueuePut(PrintMsgQ, &PrintMem, 0U, 0U) != osOK){
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <PrintServerPrintf+0x68>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	1d39      	adds	r1, r7, #4
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f004 febc 	bl	800699c <osMessageQueuePut>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <PrintServerPrintf+0x58>
		osMemoryPoolFree(PrintPool, PrintMem);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <PrintServerPrintf+0x64>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f005 f8bc 	bl	8006db0 <osMemoryPoolFree>
 8001c38:	e000      	b.n	8001c3c <PrintServerPrintf+0x58>
		return;
 8001c3a:	bf00      	nop
	}
}
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c44:	b004      	add	sp, #16
 8001c46:	4770      	bx	lr
 8001c48:	200002c4 	.word	0x200002c4
 8001c4c:	200002bc 	.word	0x200002bc

08001c50 <HAL_UART_TxCpltCallback>:

void callbacks (UART_HandleTypeDef *huart){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	if(huart == uart_handle_p){
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_UART_TxCpltCallback+0x28>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d105      	bne.n	8001c6e <HAL_UART_TxCpltCallback+0x1e>
		osEventFlagsSet(Printflag, 0x1U);
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_UART_TxCpltCallback+0x2c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fd79 	bl	8006760 <osEventFlagsSet>
	}
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	200002c8 	.word	0x200002c8

08001c80 <PrintServer>:


//oppgave f

void PrintServer(void *arg){
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	PrintStruct *PrintMem;
	osStatus_t status;
	while(1){
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <PrintServer+0x68>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	f107 0108 	add.w	r1, r7, #8
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	2200      	movs	r2, #0
 8001c96:	f004 fee1 	bl	8006a5c <osMessageQueueGet>
 8001c9a:	60f8      	str	r0, [r7, #12]
		if(status  == osOK){
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <PrintServer+0x56>
			if(HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t*)PrintMem->buffer, strlen((char*)PrintMem->buffer)) == HAL_OK)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <PrintServer+0x6c>)
 8001ca4:	681c      	ldr	r4, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	461d      	mov	r5, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe faaf 	bl	8000210 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f003 fbc2 	bl	8005444 <HAL_UART_Transmit_DMA>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d107      	bne.n	8001cd6 <PrintServer+0x56>
			{
				osEventFlagsWait(Printflag, 0x1U, osFlagsWaitAny, osWaitForever);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <PrintServer+0x70>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	f004 fd89 	bl	80067e8 <osEventFlagsWait>

			}
		}

		osMemoryPoolFree(PrintPool, PrintMem);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <PrintServer+0x74>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 f866 	bl	8006db0 <osMemoryPoolFree>
		status = osMessageQueueGet(PrintMsgQ, (PrintStruct*)&PrintMem, NULL, osWaitForever);
 8001ce4:	e7d0      	b.n	8001c88 <PrintServer+0x8>
 8001ce6:	bf00      	nop
 8001ce8:	200002bc 	.word	0x200002bc
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	200002c4 	.word	0x200002c4

08001cf8 <PrintServerPrintfInit>:
}


// oppgave c og d

_Bool PrintServerPrintfInit(void){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	PrintMsgQ = osMessageQueueNew(print_Pool, 4, NULL);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2104      	movs	r1, #4
 8001d00:	2020      	movs	r0, #32
 8001d02:	f004 fdd7 	bl	80068b4 <osMessageQueueNew>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <PrintServerPrintfInit+0x48>)
 8001d0a:	6013      	str	r3, [r2, #0]
	PrintThread = osThreadNew(PrintServer, NULL, NULL);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <PrintServerPrintfInit+0x4c>)
 8001d12:	f004 fc37 	bl	8006584 <osThreadNew>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <PrintServerPrintfInit+0x50>)
 8001d1a:	6013      	str	r3, [r2, #0]
	PrintPool = osMemoryPoolNew(print_Pool, sizeof(PrintStruct), NULL);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	2020      	movs	r0, #32
 8001d22:	f004 fef9 	bl	8006b18 <osMemoryPoolNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <PrintServerPrintfInit+0x54>)
 8001d2a:	6013      	str	r3, [r2, #0]
	Printflag = osEventFlagsNew(NULL);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f004 fcd7 	bl	80066e0 <osEventFlagsNew>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <PrintServerPrintfInit+0x58>)
 8001d36:	6013      	str	r3, [r2, #0]

	return true;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002bc 	.word	0x200002bc
 8001d44:	08001c81 	.word	0x08001c81
 8001d48:	200002c0 	.word	0x200002c0
 8001d4c:	200002c4 	.word	0x200002c4
 8001d50:	200002c8 	.word	0x200002c8

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f8d8 	bl	8001f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f7ff f950 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff f922 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	200002cc 	.word	0x200002cc

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200002cc 	.word	0x200002cc

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff4c 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5a:	f7ff ff61 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f7ff ffb1 	bl	8001ecc <NVIC_EncodePriority>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff80 	bl	8001e78 <__NVIC_SetPriority>
}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff54 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ff0a 	bl	8001dc0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e099      	b.n	80020ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd8:	e00f      	b.n	8001ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fda:	f7ff fef1 	bl	8001dc0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d908      	bls.n	8001ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e078      	b.n	80020ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e8      	bne.n	8001fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_DMA_Init+0x158>)
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b04      	cmp	r3, #4
 800208c:	d117      	bne.n	80020be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fb01 	bl	80026a8 <DMA_CheckFifoParam>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ba:	2301      	movs	r3, #1
 80020bc:	e016      	b.n	80020ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fab8 	bl	800263c <DMA_CalcBaseAndBitshift>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	223f      	movs	r2, #63	; 0x3f
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	f010803f 	.word	0xf010803f

080020f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_DMA_Start_IT+0x26>
 800211a:	2302      	movs	r3, #2
 800211c:	e040      	b.n	80021a0 <HAL_DMA_Start_IT+0xa8>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d12f      	bne.n	8002192 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fa4a 	bl	80025e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0216 	orr.w	r2, r2, #22
 8002166:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e005      	b.n	800219e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b6:	f7ff fe03 	bl	8001dc0 <HAL_GetTick>
 80021ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d008      	beq.n	80021da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e052      	b.n	8002280 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0216 	bic.w	r2, r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_DMA_Abort+0x62>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222a:	e013      	b.n	8002254 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222c:	f7ff fdc8 	bl	8001dc0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b05      	cmp	r3, #5
 8002238:	d90c      	bls.n	8002254 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2203      	movs	r2, #3
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e015      	b.n	8002280 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e4      	bne.n	800222c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	223f      	movs	r2, #63	; 0x3f
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d004      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00c      	b.n	80022c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2205      	movs	r2, #5
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022d8:	4b8e      	ldr	r3, [pc, #568]	; (8002514 <HAL_DMA_IRQHandler+0x248>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a8e      	ldr	r2, [pc, #568]	; (8002518 <HAL_DMA_IRQHandler+0x24c>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a9b      	lsrs	r3, r3, #10
 80022e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2208      	movs	r2, #8
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01a      	beq.n	8002338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2208      	movs	r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	2201      	movs	r2, #1
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2201      	movs	r2, #1
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002372:	2204      	movs	r2, #4
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d012      	beq.n	80023a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2204      	movs	r2, #4
 8002392:	409a      	lsls	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	2210      	movs	r2, #16
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d043      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03c      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2210      	movs	r2, #16
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d018      	beq.n	800240e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d024      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	4798      	blx	r3
 80023fa:	e01f      	b.n	800243c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
 800240c:	e016      	b.n	800243c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0208 	bic.w	r2, r2, #8
 800242a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2220      	movs	r2, #32
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 808f 	beq.w	800256c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8087 	beq.w	800256c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	2220      	movs	r2, #32
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b05      	cmp	r3, #5
 8002474:	d136      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0216 	bic.w	r2, r2, #22
 8002484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_DMA_IRQHandler+0x1da>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0208 	bic.w	r2, r2, #8
 80024b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	223f      	movs	r2, #63	; 0x3f
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
        }
        return;
 80024e2:	e079      	b.n	80025d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01d      	beq.n	800252e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	2b00      	cmp	r3, #0
 8002506:	d031      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e02c      	b.n	800256c <HAL_DMA_IRQHandler+0x2a0>
 8002512:	bf00      	nop
 8002514:	20000000 	.word	0x20000000
 8002518:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
 800252c:	e01e      	b.n	800256c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0210 	bic.w	r2, r2, #16
 800254a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d032      	beq.n	80025da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2205      	movs	r2, #5
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3301      	adds	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d307      	bcc.n	80025b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f2      	bne.n	8002598 <HAL_DMA_IRQHandler+0x2cc>
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e000      	b.n	80025da <HAL_DMA_IRQHandler+0x30e>
        return;
 80025d8:	bf00      	nop
    }
  }
}
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d108      	bne.n	8002620 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800261e:	e007      	b.n	8002630 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3b10      	subs	r3, #16
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <DMA_CalcBaseAndBitshift+0x64>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d909      	bls.n	800267e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	1d1a      	adds	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	; 0x58
 800267c:	e007      	b.n	800268e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	aaaaaaab 	.word	0xaaaaaaab
 80026a4:	0800b104 	.word	0x0800b104

080026a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d11f      	bne.n	8002702 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d856      	bhi.n	8002776 <DMA_CheckFifoParam+0xce>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <DMA_CheckFifoParam+0x28>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026f3 	.word	0x080026f3
 80026d8:	080026e1 	.word	0x080026e1
 80026dc:	08002777 	.word	0x08002777
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d046      	beq.n	800277a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e043      	b.n	800277a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026fa:	d140      	bne.n	800277e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e03d      	b.n	800277e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270a:	d121      	bne.n	8002750 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d837      	bhi.n	8002782 <DMA_CheckFifoParam+0xda>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <DMA_CheckFifoParam+0x70>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002729 	.word	0x08002729
 800271c:	0800272f 	.word	0x0800272f
 8002720:	08002729 	.word	0x08002729
 8002724:	08002741 	.word	0x08002741
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e030      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d025      	beq.n	8002786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273e:	e022      	b.n	8002786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800274e:	e01c      	b.n	800278a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d903      	bls.n	800275e <DMA_CheckFifoParam+0xb6>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d003      	beq.n	8002764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800275c:	e018      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      break;
 8002762:	e015      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00e      	beq.n	800278e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e00b      	b.n	800278e <DMA_CheckFifoParam+0xe6>
      break;
 8002776:	bf00      	nop
 8002778:	e00a      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800277a:	bf00      	nop
 800277c:	e008      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
 8002780:	e006      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;   
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
    }
  } 
  
  return status; 
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e165      	b.n	8002a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8154 	bne.w	8002a82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80ae 	beq.w	8002a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a5c      	ldr	r2, [pc, #368]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_GPIO_Init+0x300>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x308>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x21a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_GPIO_Init+0x30c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x216>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x310>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x212>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4c      	ldr	r2, [pc, #304]	; (8002ab4 <HAL_GPIO_Init+0x314>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x20e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <HAL_GPIO_Init+0x318>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x20a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x31c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x206>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_GPIO_Init+0x320>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x202>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x21c>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x304>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_GPIO_Init+0x324>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae96 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	041a      	lsls	r2, r3, #16
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5c:	f7ff f930 	bl	8001dc0 <HAL_GetTick>
 8002b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b62:	e009      	b.n	8002b78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b64:	f7ff f92c 	bl	8001dc0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b72:	d901      	bls.n	8002b78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e01f      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d1ee      	bne.n	8002b64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7ff f918 	bl	8001dc0 <HAL_GetTick>
 8002b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b92:	e009      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b94:	f7ff f914 	bl	8001dc0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba2:	d901      	bls.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e007      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	420e0040 	.word	0x420e0040
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	420e0044 	.word	0x420e0044

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7ff f87e 	bl	8001dc0 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7ff f87a 	bl	8001dc0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f887 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f956 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	0800b0a4 	.word	0x0800b0a4
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000008 	.word	0x20000008

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	0800b0b4 	.word	0x0800b0b4

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	0800b0b4 	.word	0x0800b0b4

08002e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	220f      	movs	r2, #15
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_GetClockConfig+0x60>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b0ae      	sub	sp, #184	; 0xb8
 8002e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8e:	4bcb      	ldr	r3, [pc, #812]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	f200 8206 	bhi.w	80032a8 <HAL_RCC_GetSysClockFreq+0x440>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	080032a9 	.word	0x080032a9
 8002eac:	080032a9 	.word	0x080032a9
 8002eb0:	080032a9 	.word	0x080032a9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	080032a9 	.word	0x080032a9
 8002ebc:	080032a9 	.word	0x080032a9
 8002ec0:	080032a9 	.word	0x080032a9
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	080032a9 	.word	0x080032a9
 8002ecc:	080032a9 	.word	0x080032a9
 8002ed0:	080032a9 	.word	0x080032a9
 8002ed4:	080030d9 	.word	0x080030d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ede:	e1e7      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee0:	4bb8      	ldr	r3, [pc, #736]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ee6:	e1e3      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4bb4      	ldr	r3, [pc, #720]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef4:	4bb1      	ldr	r3, [pc, #708]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d071      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f00:	4bae      	ldr	r3, [pc, #696]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	6439      	str	r1, [r7, #64]	; 0x40
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f58:	4649      	mov	r1, r9
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4641      	mov	r1, r8
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4641      	mov	r1, r8
 8002f68:	1a51      	subs	r1, r2, r1
 8002f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f80:	4649      	mov	r1, r9
 8002f82:	00cb      	lsls	r3, r1, #3
 8002f84:	4641      	mov	r1, r8
 8002f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	00ca      	lsls	r2, r1, #3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	4622      	mov	r2, r4
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	eb42 0303 	adc.w	r3, r2, r3
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	024b      	lsls	r3, r1, #9
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fba:	4621      	mov	r1, r4
 8002fbc:	024a      	lsls	r2, r1, #9
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fd4:	f7fd fc82 	bl	80008dc <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe2:	e067      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ffe:	2300      	movs	r3, #0
 8003000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003002:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003006:	4622      	mov	r2, r4
 8003008:	462b      	mov	r3, r5
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	0159      	lsls	r1, r3, #5
 8003014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003018:	0150      	lsls	r0, r2, #5
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4621      	mov	r1, r4
 8003020:	1a51      	subs	r1, r2, r1
 8003022:	62b9      	str	r1, [r7, #40]	; 0x28
 8003024:	4629      	mov	r1, r5
 8003026:	eb63 0301 	sbc.w	r3, r3, r1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003038:	4649      	mov	r1, r9
 800303a:	018b      	lsls	r3, r1, #6
 800303c:	4641      	mov	r1, r8
 800303e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003042:	4641      	mov	r1, r8
 8003044:	018a      	lsls	r2, r1, #6
 8003046:	4641      	mov	r1, r8
 8003048:	ebb2 0a01 	subs.w	sl, r2, r1
 800304c:	4649      	mov	r1, r9
 800304e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800305e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003066:	4692      	mov	sl, r2
 8003068:	469b      	mov	fp, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb1a 0303 	adds.w	r3, sl, r3
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	462b      	mov	r3, r5
 8003074:	eb4b 0303 	adc.w	r3, fp, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003086:	4629      	mov	r1, r5
 8003088:	028b      	lsls	r3, r1, #10
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003090:	4621      	mov	r1, r4
 8003092:	028a      	lsls	r2, r1, #10
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309c:	2200      	movs	r2, #0
 800309e:	673b      	str	r3, [r7, #112]	; 0x70
 80030a0:	677a      	str	r2, [r7, #116]	; 0x74
 80030a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030a6:	f7fd fc19 	bl	80008dc <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4613      	mov	r3, r2
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030d6:	e0eb      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d8:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d06b      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	2200      	movs	r2, #0
 80030f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	663b      	str	r3, [r7, #96]	; 0x60
 8003104:	2300      	movs	r3, #0
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
 8003108:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	0159      	lsls	r1, r3, #5
 800311a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800311e:	0150      	lsls	r0, r2, #5
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4621      	mov	r1, r4
 8003126:	1a51      	subs	r1, r2, r1
 8003128:	61b9      	str	r1, [r7, #24]
 800312a:	4629      	mov	r1, r5
 800312c:	eb63 0301 	sbc.w	r3, r3, r1
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800313e:	4659      	mov	r1, fp
 8003140:	018b      	lsls	r3, r1, #6
 8003142:	4651      	mov	r1, sl
 8003144:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003148:	4651      	mov	r1, sl
 800314a:	018a      	lsls	r2, r1, #6
 800314c:	4651      	mov	r1, sl
 800314e:	ebb2 0801 	subs.w	r8, r2, r1
 8003152:	4659      	mov	r1, fp
 8003154:	eb63 0901 	sbc.w	r9, r3, r1
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003164:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003168:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800316c:	4690      	mov	r8, r2
 800316e:	4699      	mov	r9, r3
 8003170:	4623      	mov	r3, r4
 8003172:	eb18 0303 	adds.w	r3, r8, r3
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	462b      	mov	r3, r5
 800317a:	eb49 0303 	adc.w	r3, r9, r3
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800318c:	4629      	mov	r1, r5
 800318e:	024b      	lsls	r3, r1, #9
 8003190:	4621      	mov	r1, r4
 8003192:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003196:	4621      	mov	r1, r4
 8003198:	024a      	lsls	r2, r1, #9
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a2:	2200      	movs	r2, #0
 80031a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ac:	f7fd fb96 	bl	80008dc <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ba:	e065      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x420>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	2200      	movs	r2, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	4611      	mov	r1, r2
 80031d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
 80031da:	2300      	movs	r3, #0
 80031dc:	657b      	str	r3, [r7, #84]	; 0x54
 80031de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031e2:	4642      	mov	r2, r8
 80031e4:	464b      	mov	r3, r9
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4641      	mov	r1, r8
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	4649      	mov	r1, r9
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003214:	4659      	mov	r1, fp
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4651      	mov	r1, sl
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	4651      	mov	r1, sl
 8003224:	1a54      	subs	r4, r2, r1
 8003226:	4659      	mov	r1, fp
 8003228:	eb63 0501 	sbc.w	r5, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	00eb      	lsls	r3, r5, #3
 8003236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323a:	00e2      	lsls	r2, r4, #3
 800323c:	4614      	mov	r4, r2
 800323e:	461d      	mov	r5, r3
 8003240:	4643      	mov	r3, r8
 8003242:	18e3      	adds	r3, r4, r3
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	464b      	mov	r3, r9
 8003248:	eb45 0303 	adc.w	r3, r5, r3
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325a:	4629      	mov	r1, r5
 800325c:	028b      	lsls	r3, r1, #10
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003264:	4621      	mov	r1, r4
 8003266:	028a      	lsls	r2, r1, #10
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003270:	2200      	movs	r2, #0
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
 8003274:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003276:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327a:	f7fd fb2f 	bl	80008dc <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4613      	mov	r3, r2
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0f1b      	lsrs	r3, r3, #28
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032a6:	e003      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	37b8      	adds	r7, #184	; 0xb8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400

080032c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e28d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8083 	beq.w	80033ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e8:	4b94      	ldr	r3, [pc, #592]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d019      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f4:	4b91      	ldr	r3, [pc, #580]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003300:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b8b      	ldr	r3, [pc, #556]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x124>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e25a      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x90>
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xb4>
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fd10 	bl	8001dc0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fd0c 	bl	8001dc0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e21f      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xdc>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fcfc 	bl	8001dc0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fcf8 	bl	8001dc0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e20b      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x104>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06f      	beq.n	80034da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1d3      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4937      	ldr	r1, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b34      	ldr	r3, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe fca5 	bl	8001dc0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe fca1 	bl	8001dc0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1b4      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4925      	ldr	r1, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fc84 	bl	8001dc0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe fc80 	bl	8001dc0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e193      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fc64 	bl	8001dc0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fc60 	bl	8001dc0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e173      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x234>
 800351a:	e01b      	b.n	8003554 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fc4d 	bl	8001dc0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00e      	b.n	8003548 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fc49 	bl	8001dc0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d907      	bls.n	8003548 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e15c      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 800353c:	40023800 	.word	0x40023800
 8003540:	42470000 	.word	0x42470000
 8003544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8097 	beq.w	8003690 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b83      	ldr	r3, [pc, #524]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fc09 	bl	8001dc0 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fc05 	bl	8001dc0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e118      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x31e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x340>
 80035ee:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 8003608:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a59      	ldr	r2, [pc, #356]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b57      	ldr	r3, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fbca 	bl	8001dc0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fbc6 	bl	8001dc0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0d7      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x368>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe fbb4 	bl	8001dc0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fbb0 	bl	8001dc0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0c1      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80ad 	beq.w	80037f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d060      	beq.n	8003768 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d145      	bne.n	800373a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fb84 	bl	8001dc0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fb80 	bl	8001dc0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e093      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fb55 	bl	8001dc0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fb51 	bl	8001dc0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e064      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x452>
 8003738:	e05c      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fb3e 	bl	8001dc0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe fb3a 	bl	8001dc0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x480>
 8003766:	e045      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e040      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_RCC_OscConfig+0x538>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d030      	beq.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d129      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d122      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d119      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d10f      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e041      	b.n	800389a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fee6 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 ff58 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e04e      	b.n	800395a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	; (8003968 <HAL_TIM_Base_Start_IT+0xc4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d01d      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_TIM_Base_Start_IT+0xc8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <HAL_TIM_Base_Start_IT+0xcc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_TIM_Base_Start_IT+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_TIM_Base_Start_IT+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_TIM_Base_Start_IT+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x80>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_TIM_Base_Start_IT+0xdc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d111      	bne.n	8003948 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b06      	cmp	r3, #6
 8003934:	d010      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	e007      	b.n	8003958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f839 	bl	8003a22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fe98 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_TIM_PWM_Start+0x24>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e022      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d109      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x3e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	bf14      	ite	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	2300      	moveq	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	e015      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d109      	bne.n	8003a90 <HAL_TIM_PWM_Start+0x58>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e008      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x6a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07c      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0x82>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab8:	e013      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0x92>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac8:	e00b      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Start+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad8:	e003      	b.n	8003ae2 <HAL_TIM_PWM_Start+0xaa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fa18 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <HAL_TIM_PWM_Start+0x174>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIM_PWM_Start+0xcc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <HAL_TIM_PWM_Start+0x178>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_PWM_Start+0xd0>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_TIM_PWM_Start+0xd2>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_TIM_PWM_Start+0x174>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d01d      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_TIM_PWM_Start+0x17c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_TIM_PWM_Start+0x180>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_TIM_PWM_Start+0x184>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_PWM_Start+0x178>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIM_PWM_Start+0x188>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x136>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_TIM_PWM_Start+0x18c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d010      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40001800 	.word	0x40001800

08003bc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f9a0 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <HAL_TIM_PWM_Stop+0xd8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_TIM_PWM_Stop+0x2c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_TIM_PWM_Stop+0xdc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_PWM_Stop+0x30>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_TIM_PWM_Stop+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d017      	beq.n	8003c2e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_TIM_PWM_Stop+0x66>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	f240 4344 	movw	r3, #1092	; 0x444
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <HAL_TIM_PWM_Stop+0x66>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a1a      	ldr	r2, [r3, #32]
 8003c34:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <HAL_TIM_PWM_Stop+0x96>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	f240 4344 	movw	r3, #1092	; 0x444
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_PWM_Stop+0x96>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_TIM_PWM_Stop+0xa6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6c:	e013      	b.n	8003c96 <HAL_TIM_PWM_Stop+0xce>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_PWM_Stop+0xb6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c7c:	e00b      	b.n	8003c96 <HAL_TIM_PWM_Stop+0xce>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_PWM_Stop+0xc6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	e003      	b.n	8003c96 <HAL_TIM_PWM_Stop+0xce>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f839 	bl	8003d46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 fd06 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Start_IT+0x1e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e013      	b.n	8003da2 <HAL_TIM_IC_Start_IT+0x46>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_IC_Start_IT+0x2e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e00b      	b.n	8003da2 <HAL_TIM_IC_Start_IT+0x46>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_IC_Start_IT+0x3e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e003      	b.n	8003da2 <HAL_TIM_IC_Start_IT+0x46>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_TIM_IC_Start_IT+0x58>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e013      	b.n	8003ddc <HAL_TIM_IC_Start_IT+0x80>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d104      	bne.n	8003dc4 <HAL_TIM_IC_Start_IT+0x68>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e00b      	b.n	8003ddc <HAL_TIM_IC_Start_IT+0x80>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_IC_Start_IT+0x78>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e003      	b.n	8003ddc <HAL_TIM_IC_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d102      	bne.n	8003dea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003de4:	7b7b      	ldrb	r3, [r7, #13]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0cc      	b.n	8003f88 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <HAL_TIM_IC_Start_IT+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfc:	e013      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xca>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d104      	bne.n	8003e0e <HAL_TIM_IC_Start_IT+0xb2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0c:	e00b      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xca>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d104      	bne.n	8003e1e <HAL_TIM_IC_Start_IT+0xc2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	e003      	b.n	8003e26 <HAL_TIM_IC_Start_IT+0xca>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_IC_Start_IT+0xda>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e34:	e013      	b.n	8003e5e <HAL_TIM_IC_Start_IT+0x102>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_IC_Start_IT+0xea>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e44:	e00b      	b.n	8003e5e <HAL_TIM_IC_Start_IT+0x102>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_IC_Start_IT+0xfa>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	e003      	b.n	8003e5e <HAL_TIM_IC_Start_IT+0x102>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d841      	bhi.n	8003ee8 <HAL_TIM_IC_Start_IT+0x18c>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_TIM_IC_Start_IT+0x110>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003ee9 	.word	0x08003ee9
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003ee9 	.word	0x08003ee9
 8003e7c:	08003eb3 	.word	0x08003eb3
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003ee9 	.word	0x08003ee9
 8003e8c:	08003ec5 	.word	0x08003ec5
 8003e90:	08003ee9 	.word	0x08003ee9
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	08003ee9 	.word	0x08003ee9
 8003e9c:	08003ed7 	.word	0x08003ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0202 	orr.w	r2, r2, #2
 8003eae:	60da      	str	r2, [r3, #12]
      break;
 8003eb0:	e01d      	b.n	8003eee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0204 	orr.w	r2, r2, #4
 8003ec0:	60da      	str	r2, [r3, #12]
      break;
 8003ec2:	e014      	b.n	8003eee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0208 	orr.w	r2, r2, #8
 8003ed2:	60da      	str	r2, [r3, #12]
      break;
 8003ed4:	e00b      	b.n	8003eee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0210 	orr.w	r2, r2, #16
 8003ee4:	60da      	str	r2, [r3, #12]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      break;
 8003eec:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d148      	bne.n	8003f86 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f80f 	bl	8004f20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a22      	ldr	r2, [pc, #136]	; (8003f90 <HAL_TIM_IC_Start_IT+0x234>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d01d      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <HAL_TIM_IC_Start_IT+0x238>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_TIM_IC_Start_IT+0x23c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_TIM_IC_Start_IT+0x240>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_TIM_IC_Start_IT+0x244>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIM_IC_Start_IT+0x248>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_TIM_IC_Start_IT+0x24c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d111      	bne.n	8003f76 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d010      	beq.n	8003f86 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	e007      	b.n	8003f86 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40001800 	.word	0x40001800

08003fac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e041      	b.n	8004044 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f839 	bl	800404c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 fb83 	bl	80046f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0208 	bic.w	r2, r2, #8
 8004000:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0202 	mvn.w	r2, #2
 800408c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fee0 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fb05 	bl	80046ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fb0c 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0204 	mvn.w	r2, #4
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc feb6 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fadb 	bl	80046ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fae2 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b08      	cmp	r3, #8
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0208 	mvn.w	r2, #8
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2204      	movs	r2, #4
 800413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fe8c 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fab1 	bl	80046ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fab8 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b10      	cmp	r3, #16
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0210 	mvn.w	r2, #16
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2208      	movs	r2, #8
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fe62 	bl	8000e68 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa87 	bl	80046ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa8e 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d107      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0201 	mvn.w	r2, #1
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fc fe96 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d10e      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d107      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f001 f89e 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d10e      	bne.n	800423c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d107      	bne.n	800423c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa53 	bl	80046e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	d10e      	bne.n	8004268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d107      	bne.n	8004268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0220 	mvn.w	r2, #32
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f001 f868 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_TIM_IC_ConfigChannel+0x1e>
 800428a:	2302      	movs	r3, #2
 800428c:	e088      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f000 fc74 	bl	8004b98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020c 	bic.w	r2, r2, #12
 80042be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6999      	ldr	r1, [r3, #24]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e060      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d11c      	bne.n	8004314 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f000 fcf8 	bl	8004cde <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	021a      	lsls	r2, r3, #8
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]
 8004312:	e040      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11b      	bne.n	8004352 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f000 fd45 	bl	8004db8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 020c 	bic.w	r2, r2, #12
 800433c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
 8004350:	e021      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d11c      	bne.n	8004392 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f000 fd62 	bl	8004e30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800437a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69d9      	ldr	r1, [r3, #28]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
 8004390:	e001      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ae      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	f200 809f 	bhi.w	8004514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004515 	.word	0x08004515
 80043e4:	08004515 	.word	0x08004515
 80043e8:	08004515 	.word	0x08004515
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004515 	.word	0x08004515
 80043f4:	08004515 	.word	0x08004515
 80043f8:	08004515 	.word	0x08004515
 80043fc:	08004493 	.word	0x08004493
 8004400:	08004515 	.word	0x08004515
 8004404:	08004515 	.word	0x08004515
 8004408:	08004515 	.word	0x08004515
 800440c:	080044d3 	.word	0x080044d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fa0e 	bl	8004838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
      break;
 800444e:	e064      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fa5e 	bl	8004918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
      break;
 8004490:	e043      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fab3 	bl	8004a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0204 	bic.w	r2, r2, #4
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	61da      	str	r2, [r3, #28]
      break;
 80044d0:	e023      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fb07 	bl	8004aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
      break;
 8004512:	e002      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0b4      	b.n	80046b2 <HAL_TIM_ConfigClockSource+0x186>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d03e      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0xd4>
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004586:	f200 8087 	bhi.w	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	f000 8086 	beq.w	800469e <HAL_TIM_ConfigClockSource+0x172>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	d87f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b70      	cmp	r3, #112	; 0x70
 800459a:	d01a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0xa6>
 800459c:	2b70      	cmp	r3, #112	; 0x70
 800459e:	d87b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b60      	cmp	r3, #96	; 0x60
 80045a2:	d050      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x11a>
 80045a4:	2b60      	cmp	r3, #96	; 0x60
 80045a6:	d877      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b50      	cmp	r3, #80	; 0x50
 80045aa:	d03c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xfa>
 80045ac:	2b50      	cmp	r3, #80	; 0x50
 80045ae:	d873      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d058      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x13a>
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d86f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b30      	cmp	r3, #48	; 0x30
 80045ba:	d064      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b30      	cmp	r3, #48	; 0x30
 80045be:	d86b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d060      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d867      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d05c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d05a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	e062      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f000 fc7d 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
      break;
 80045fe:	e04f      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6899      	ldr	r1, [r3, #8]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f000 fc66 	bl	8004ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e03c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fb24 	bl	8004c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2150      	movs	r1, #80	; 0x50
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc33 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004644:	e02c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fb80 	bl	8004d58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2160      	movs	r1, #96	; 0x60
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fc23 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004664:	e01c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f000 fb04 	bl	8004c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fc13 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004684:	e00c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fc0a 	bl	8004eaa <TIM_ITRx_SetConfig>
      break;
 8004696:	e003      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e000      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800469e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a40      	ldr	r2, [pc, #256]	; (800480c <TIM_Base_SetConfig+0x114>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3d      	ldr	r2, [pc, #244]	; (8004810 <TIM_Base_SetConfig+0x118>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <TIM_Base_SetConfig+0x120>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <TIM_Base_SetConfig+0x124>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2f      	ldr	r2, [pc, #188]	; (800480c <TIM_Base_SetConfig+0x114>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d027      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <TIM_Base_SetConfig+0x118>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d023      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <TIM_Base_SetConfig+0x11c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <TIM_Base_SetConfig+0x120>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <TIM_Base_SetConfig+0x124>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a28      	ldr	r2, [pc, #160]	; (8004820 <TIM_Base_SetConfig+0x128>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a27      	ldr	r2, [pc, #156]	; (8004824 <TIM_Base_SetConfig+0x12c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a26      	ldr	r2, [pc, #152]	; (8004828 <TIM_Base_SetConfig+0x130>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a25      	ldr	r2, [pc, #148]	; (800482c <TIM_Base_SetConfig+0x134>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a24      	ldr	r2, [pc, #144]	; (8004830 <TIM_Base_SetConfig+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <TIM_Base_SetConfig+0x13c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <TIM_Base_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40014400 	.word	0x40014400
 8004828:	40014800 	.word	0x40014800
 800482c:	40001800 	.word	0x40001800
 8004830:	40001c00 	.word	0x40001c00
 8004834:	40002000 	.word	0x40002000

08004838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a20      	ldr	r2, [pc, #128]	; (8004910 <TIM_OC1_SetConfig+0xd8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC1_SetConfig+0x64>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <TIM_OC1_SetConfig+0xdc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10c      	bne.n	80048b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0308 	bic.w	r3, r3, #8
 80048a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a15      	ldr	r2, [pc, #84]	; (8004910 <TIM_OC1_SetConfig+0xd8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_OC1_SetConfig+0x8e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <TIM_OC1_SetConfig+0xdc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d111      	bne.n	80048ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40010000 	.word	0x40010000
 8004914:	40010400 	.word	0x40010400

08004918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0210 	bic.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0320 	bic.w	r3, r3, #32
 8004962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a22      	ldr	r2, [pc, #136]	; (80049fc <TIM_OC2_SetConfig+0xe4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_OC2_SetConfig+0x68>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <TIM_OC2_SetConfig+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10d      	bne.n	800499c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC2_SetConfig+0xe4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC2_SetConfig+0x94>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC2_SetConfig+0xe8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d113      	bne.n	80049d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40010400 	.word	0x40010400

08004a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <TIM_OC3_SetConfig+0xe0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC3_SetConfig+0x66>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <TIM_OC3_SetConfig+0xe4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10d      	bne.n	8004a86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <TIM_OC3_SetConfig+0xe0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_OC3_SetConfig+0x92>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <TIM_OC3_SetConfig+0xe4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d113      	bne.n	8004abe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40010400 	.word	0x40010400

08004aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <TIM_OC4_SetConfig+0xa4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_OC4_SetConfig+0x68>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <TIM_OC4_SetConfig+0xa8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d109      	bne.n	8004b68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	019b      	lsls	r3, r3, #6
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400

08004b98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <TIM_TI1_SetConfig+0xcc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01b      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d017      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	; (8004c68 <TIM_TI1_SetConfig+0xd0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <TIM_TI1_SetConfig+0xd4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <TIM_TI1_SetConfig+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <TIM_TI1_SetConfig+0xdc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <TIM_TI1_SetConfig+0xe0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_TI1_SetConfig+0x66>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <TIM_TI1_SetConfig+0xe4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <TIM_TI1_SetConfig+0x6a>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <TIM_TI1_SetConfig+0x6c>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e003      	b.n	8004c22 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f023 030a 	bic.w	r3, r3, #10
 8004c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 030a 	and.w	r3, r3, #10
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40001800 	.word	0x40001800

08004c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 030a 	bic.w	r3, r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0210 	bic.w	r2, r3, #16
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f023 0210 	bic.w	r2, r3, #16
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	031b      	lsls	r3, r3, #12
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0303 	bic.w	r3, r3, #3
 8004de4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	031b      	lsls	r3, r3, #12
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	031b      	lsls	r3, r3, #12
 8004e88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f043 0307 	orr.w	r3, r3, #7
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <HAL_TIMEx_PWMN_Start+0x24>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	bf14      	ite	ne
 8004f88:	2301      	movne	r3, #1
 8004f8a:	2300      	moveq	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e022      	b.n	8004fd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d109      	bne.n	8004faa <HAL_TIMEx_PWMN_Start+0x3e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	bf14      	ite	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	2300      	moveq	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	e015      	b.n	8004fd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d109      	bne.n	8004fc4 <HAL_TIMEx_PWMN_Start+0x58>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e008      	b.n	8004fd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06d      	b.n	80050ba <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_TIMEx_PWMN_Start+0x82>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fec:	e013      	b.n	8005016 <HAL_TIMEx_PWMN_Start+0xaa>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d104      	bne.n	8004ffe <HAL_TIMEx_PWMN_Start+0x92>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ffc:	e00b      	b.n	8005016 <HAL_TIMEx_PWMN_Start+0xaa>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d104      	bne.n	800500e <HAL_TIMEx_PWMN_Start+0xa2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500c:	e003      	b.n	8005016 <HAL_TIMEx_PWMN_Start+0xaa>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2204      	movs	r2, #4
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f99e 	bl	8005360 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_TIMEx_PWMN_Start+0x158>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d01d      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_TIMEx_PWMN_Start+0x160>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_TIMEx_PWMN_Start+0x168>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIMEx_PWMN_Start+0x118>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <HAL_TIMEx_PWMN_Start+0x170>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d111      	bne.n	80050a8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b06      	cmp	r3, #6
 8005094:	d010      	beq.n	80050b8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	e007      	b.n	80050b8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f934 	bl	8005360 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10f      	bne.n	8005128 <HAL_TIMEx_PWMN_Stop+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	f240 4344 	movw	r3, #1092	; 0x444
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_TIMEx_PWMN_Stop+0x48>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <HAL_TIMEx_PWMN_Stop+0x78>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	f240 4344 	movw	r3, #1092	; 0x444
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_TIMEx_PWMN_Stop+0x78>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_TIMEx_PWMN_Stop+0x88>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005166:	e013      	b.n	8005190 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d104      	bne.n	8005178 <HAL_TIMEx_PWMN_Stop+0x98>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005176:	e00b      	b.n	8005190 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d104      	bne.n	8005188 <HAL_TIMEx_PWMN_Stop+0xa8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005186:	e003      	b.n	8005190 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e05a      	b.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005200:	d01d      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1d      	ldr	r2, [pc, #116]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d10c      	bne.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40010400 	.word	0x40010400
 800528c:	40014000 	.word	0x40014000
 8005290:	40001800 	.word	0x40001800

08005294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e03d      	b.n	800532c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2204      	movs	r2, #4
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e03f      	b.n	800543c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fc fa35 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2224      	movs	r2, #36	; 0x24
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fdc6 	bl	8005f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005402:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005412:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08c      	sub	sp, #48	; 0x30
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b20      	cmp	r3, #32
 800545c:	d165      	bne.n	800552a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_UART_Transmit_DMA+0x26>
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e05e      	b.n	800552c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_UART_Transmit_DMA+0x38>
 8005478:	2302      	movs	r3, #2
 800547a:	e057      	b.n	800552c <HAL_UART_Transmit_DMA+0xe8>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2221      	movs	r2, #33	; 0x21
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	4a22      	ldr	r2, [pc, #136]	; (8005534 <HAL_UART_Transmit_DMA+0xf0>)
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	4a21      	ldr	r2, [pc, #132]	; (8005538 <HAL_UART_Transmit_DMA+0xf4>)
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	4a20      	ldr	r2, [pc, #128]	; (800553c <HAL_UART_Transmit_DMA+0xf8>)
 80054ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	2200      	movs	r2, #0
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3304      	adds	r3, #4
 80054d8:	461a      	mov	r2, r3
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	f7fc fe0c 	bl	80020f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3314      	adds	r3, #20
 80054f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	617b      	str	r3, [r7, #20]
   return(result);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005512:	627a      	str	r2, [r7, #36]	; 0x24
 8005514:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6a39      	ldr	r1, [r7, #32]
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3730      	adds	r7, #48	; 0x30
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08005ab1 	.word	0x08005ab1
 8005538:	08005b4b 	.word	0x08005b4b
 800553c:	08005b67 	.word	0x08005b67

08005540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b0ba      	sub	sp, #232	; 0xe8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800557e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc32 	bl	8005e08 <UART_Receive_IT>
      return;
 80055a4:	e256      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80de 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80d1 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800564e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0208 	orr.w	r2, r3, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 81ed 	beq.w	8005a4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fbbd 	bl	8005e08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_UART_IRQHandler+0x17a>
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04f      	beq.n	800575a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fac5 	bl	8005c4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d141      	bne.n	8005752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1d9      	bne.n	80056ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	4a7d      	ldr	r2, [pc, #500]	; (800591c <HAL_UART_IRQHandler+0x3dc>)
 8005728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	4618      	mov	r0, r3
 8005730:	f7fc fdaa 	bl	8002288 <HAL_DMA_Abort_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00e      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f99a 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00a      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f996 	bl	8005a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e006      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f992 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005766:	e170      	b.n	8005a4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	bf00      	nop
    return;
 800576a:	e16e      	b.n	8005a4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	f040 814a 	bne.w	8005a0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8143 	beq.w	8005a0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 813c 	beq.w	8005a0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	f040 80b4 	bne.w	8005920 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8140 	beq.w	8005a4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d6:	429a      	cmp	r2, r3
 80057d8:	f080 8139 	bcs.w	8005a4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ee:	f000 8088 	beq.w	8005902 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800580c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800581e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800582a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d9      	bne.n	80057f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800584e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800586a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e1      	bne.n	800583e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800589e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d2:	f023 0310 	bic.w	r3, r3, #16
 80058d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e3      	bne.n	80058c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fc fc53 	bl	80021a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590a:	b29b      	uxth	r3, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	b29b      	uxth	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8c0 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005918:	e099      	b.n	8005a4e <HAL_UART_IRQHandler+0x50e>
 800591a:	bf00      	nop
 800591c:	08005d11 	.word	0x08005d11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 808b 	beq.w	8005a52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800593c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8086 	beq.w	8005a52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800596a:	647a      	str	r2, [r7, #68]	; 0x44
 800596c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e3      	bne.n	8005946 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3314      	adds	r3, #20
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	623b      	str	r3, [r7, #32]
   return(result);
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3314      	adds	r3, #20
 800599e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059a2:	633a      	str	r2, [r7, #48]	; 0x30
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e3      	bne.n	800597e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0310 	bic.w	r3, r3, #16
 80059da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	617b      	str	r3, [r7, #20]
   return(result);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e3      	bne.n	80059c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f848 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a08:	e023      	b.n	8005a52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_UART_IRQHandler+0x4ea>
 8005a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f988 	bl	8005d38 <UART_Transmit_IT>
    return;
 8005a28:	e014      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00e      	beq.n	8005a54 <HAL_UART_IRQHandler+0x514>
 8005a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9c8 	bl	8005dd8 <UART_EndTransmit_IT>
    return;
 8005a48:	e004      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
    return;
 8005a4a:	bf00      	nop
 8005a4c:	e002      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
      return;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
      return;
 8005a52:	bf00      	nop
  }
}
 8005a54:	37e8      	adds	r7, #232	; 0xe8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b090      	sub	sp, #64	; 0x40
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d137      	bne.n	8005b3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3314      	adds	r3, #20
 8005af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af2:	633a      	str	r2, [r7, #48]	; 0x30
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b26:	61fa      	str	r2, [r7, #28]
 8005b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	617b      	str	r3, [r7, #20]
   return(result);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e5      	bne.n	8005b06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b3a:	e002      	b.n	8005b42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b3e:	f7fc f887 	bl	8001c50 <HAL_UART_TxCpltCallback>
}
 8005b42:	bf00      	nop
 8005b44:	3740      	adds	r7, #64	; 0x40
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff ff7f 	bl	8005a5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b21      	cmp	r3, #33	; 0x21
 8005b98:	d108      	bne.n	8005bac <UART_DMAError+0x46>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f000 f827 	bl	8005bfa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b22      	cmp	r3, #34	; 0x22
 8005bcc:	d108      	bne.n	8005be0 <UART_DMAError+0x7a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bda:	68b8      	ldr	r0, [r7, #8]
 8005bdc:	f000 f835 	bl	8005c4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0210 	orr.w	r2, r3, #16
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f7ff ff49 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b089      	sub	sp, #36	; 0x24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	61ba      	str	r2, [r7, #24]
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c3e:	bf00      	nop
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b095      	sub	sp, #84	; 0x54
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c72:	643a      	str	r2, [r7, #64]	; 0x40
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d119      	bne.n	8005cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce2:	61ba      	str	r2, [r7, #24]
 8005ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d04:	bf00      	nop
 8005d06:	3754      	adds	r7, #84	; 0x54
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff feaa 	bl	8005a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b21      	cmp	r3, #33	; 0x21
 8005d4a:	d13e      	bne.n	8005dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d114      	bne.n	8005d80 <UART_Transmit_IT+0x48>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d110      	bne.n	8005d80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]
 8005d7e:	e008      	b.n	8005d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6211      	str	r1, [r2, #32]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fb ff29 	bl	8001c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b22      	cmp	r3, #34	; 0x22
 8005e1a:	f040 80ab 	bne.w	8005f74 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e26:	d117      	bne.n	8005e58 <UART_Receive_IT+0x50>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d113      	bne.n	8005e58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	1c9a      	adds	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
 8005e56:	e026      	b.n	8005ea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	d007      	beq.n	8005e7c <UART_Receive_IT+0x74>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <UART_Receive_IT+0x82>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e008      	b.n	8005e9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d15a      	bne.n	8005f70 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0220 	bic.w	r2, r2, #32
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d135      	bne.n	8005f66 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d10a      	bne.n	8005f58 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fd9a 	bl	8005a98 <HAL_UARTEx_RxEventCallback>
 8005f64:	e002      	b.n	8005f6c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fd82 	bl	8005a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e002      	b.n	8005f76 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	; 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f84:	b0c0      	sub	sp, #256	; 0x100
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	68d9      	ldr	r1, [r3, #12]
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	ea40 0301 	orr.w	r3, r0, r1
 8005fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fd8:	f021 010c 	bic.w	r1, r1, #12
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	6999      	ldr	r1, [r3, #24]
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	ea40 0301 	orr.w	r3, r0, r1
 8006006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8f      	ldr	r3, [pc, #572]	; (800624c <UART_SetConfig+0x2cc>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d005      	beq.n	8006020 <UART_SetConfig+0xa0>
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8d      	ldr	r3, [pc, #564]	; (8006250 <UART_SetConfig+0x2d0>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d104      	bne.n	800602a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fc fedc 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8006024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006028:	e003      	b.n	8006032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800602a:	f7fc fec3 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800602e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	f040 810c 	bne.w	8006258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800604a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800604e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006052:	4622      	mov	r2, r4
 8006054:	462b      	mov	r3, r5
 8006056:	1891      	adds	r1, r2, r2
 8006058:	65b9      	str	r1, [r7, #88]	; 0x58
 800605a:	415b      	adcs	r3, r3
 800605c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800605e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006062:	4621      	mov	r1, r4
 8006064:	eb12 0801 	adds.w	r8, r2, r1
 8006068:	4629      	mov	r1, r5
 800606a:	eb43 0901 	adc.w	r9, r3, r1
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800607a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800607e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006082:	4690      	mov	r8, r2
 8006084:	4699      	mov	r9, r3
 8006086:	4623      	mov	r3, r4
 8006088:	eb18 0303 	adds.w	r3, r8, r3
 800608c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006090:	462b      	mov	r3, r5
 8006092:	eb49 0303 	adc.w	r3, r9, r3
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ae:	460b      	mov	r3, r1
 80060b0:	18db      	adds	r3, r3, r3
 80060b2:	653b      	str	r3, [r7, #80]	; 0x50
 80060b4:	4613      	mov	r3, r2
 80060b6:	eb42 0303 	adc.w	r3, r2, r3
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
 80060bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060c4:	f7fa fc0a 	bl	80008dc <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4b61      	ldr	r3, [pc, #388]	; (8006254 <UART_SetConfig+0x2d4>)
 80060ce:	fba3 2302 	umull	r2, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	011c      	lsls	r4, r3, #4
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80060f0:	415b      	adcs	r3, r3
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060f8:	4641      	mov	r1, r8
 80060fa:	eb12 0a01 	adds.w	sl, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb43 0b01 	adc.w	fp, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006118:	4692      	mov	sl, r2
 800611a:	469b      	mov	fp, r3
 800611c:	4643      	mov	r3, r8
 800611e:	eb1a 0303 	adds.w	r3, sl, r3
 8006122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006126:	464b      	mov	r3, r9
 8006128:	eb4b 0303 	adc.w	r3, fp, r3
 800612c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006144:	460b      	mov	r3, r1
 8006146:	18db      	adds	r3, r3, r3
 8006148:	643b      	str	r3, [r7, #64]	; 0x40
 800614a:	4613      	mov	r3, r2
 800614c:	eb42 0303 	adc.w	r3, r2, r3
 8006150:	647b      	str	r3, [r7, #68]	; 0x44
 8006152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800615a:	f7fa fbbf 	bl	80008dc <__aeabi_uldivmod>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4611      	mov	r1, r2
 8006164:	4b3b      	ldr	r3, [pc, #236]	; (8006254 <UART_SetConfig+0x2d4>)
 8006166:	fba3 2301 	umull	r2, r3, r3, r1
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2264      	movs	r2, #100	; 0x64
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	1acb      	subs	r3, r1, r3
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800617a:	4b36      	ldr	r3, [pc, #216]	; (8006254 <UART_SetConfig+0x2d4>)
 800617c:	fba3 2302 	umull	r2, r3, r3, r2
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006188:	441c      	add	r4, r3
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006194:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800619c:	4642      	mov	r2, r8
 800619e:	464b      	mov	r3, r9
 80061a0:	1891      	adds	r1, r2, r2
 80061a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061a4:	415b      	adcs	r3, r3
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061ac:	4641      	mov	r1, r8
 80061ae:	1851      	adds	r1, r2, r1
 80061b0:	6339      	str	r1, [r7, #48]	; 0x30
 80061b2:	4649      	mov	r1, r9
 80061b4:	414b      	adcs	r3, r1
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061c4:	4659      	mov	r1, fp
 80061c6:	00cb      	lsls	r3, r1, #3
 80061c8:	4651      	mov	r1, sl
 80061ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ce:	4651      	mov	r1, sl
 80061d0:	00ca      	lsls	r2, r1, #3
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	4642      	mov	r2, r8
 80061da:	189b      	adds	r3, r3, r2
 80061dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e0:	464b      	mov	r3, r9
 80061e2:	460a      	mov	r2, r1
 80061e4:	eb42 0303 	adc.w	r3, r2, r3
 80061e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006200:	460b      	mov	r3, r1
 8006202:	18db      	adds	r3, r3, r3
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
 8006206:	4613      	mov	r3, r2
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006216:	f7fa fb61 	bl	80008dc <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <UART_SetConfig+0x2d4>)
 8006220:	fba3 1302 	umull	r1, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	2164      	movs	r1, #100	; 0x64
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	3332      	adds	r3, #50	; 0x32
 8006232:	4a08      	ldr	r2, [pc, #32]	; (8006254 <UART_SetConfig+0x2d4>)
 8006234:	fba2 2303 	umull	r2, r3, r2, r3
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f003 0207 	and.w	r2, r3, #7
 800623e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4422      	add	r2, r4
 8006246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006248:	e105      	b.n	8006456 <UART_SetConfig+0x4d6>
 800624a:	bf00      	nop
 800624c:	40011000 	.word	0x40011000
 8006250:	40011400 	.word	0x40011400
 8006254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800625c:	2200      	movs	r2, #0
 800625e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006262:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800626a:	4642      	mov	r2, r8
 800626c:	464b      	mov	r3, r9
 800626e:	1891      	adds	r1, r2, r2
 8006270:	6239      	str	r1, [r7, #32]
 8006272:	415b      	adcs	r3, r3
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
 8006276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800627a:	4641      	mov	r1, r8
 800627c:	1854      	adds	r4, r2, r1
 800627e:	4649      	mov	r1, r9
 8006280:	eb43 0501 	adc.w	r5, r3, r1
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	00eb      	lsls	r3, r5, #3
 800628e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006292:	00e2      	lsls	r2, r4, #3
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	4643      	mov	r3, r8
 800629a:	18e3      	adds	r3, r4, r3
 800629c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a0:	464b      	mov	r3, r9
 80062a2:	eb45 0303 	adc.w	r3, r5, r3
 80062a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062c6:	4629      	mov	r1, r5
 80062c8:	008b      	lsls	r3, r1, #2
 80062ca:	4621      	mov	r1, r4
 80062cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d0:	4621      	mov	r1, r4
 80062d2:	008a      	lsls	r2, r1, #2
 80062d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062d8:	f7fa fb00 	bl	80008dc <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4b60      	ldr	r3, [pc, #384]	; (8006464 <UART_SetConfig+0x4e4>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	011c      	lsls	r4, r3, #4
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	61b9      	str	r1, [r7, #24]
 8006304:	415b      	adcs	r3, r3
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800630c:	4641      	mov	r1, r8
 800630e:	1851      	adds	r1, r2, r1
 8006310:	6139      	str	r1, [r7, #16]
 8006312:	4649      	mov	r1, r9
 8006314:	414b      	adcs	r3, r1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006324:	4659      	mov	r1, fp
 8006326:	00cb      	lsls	r3, r1, #3
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632e:	4651      	mov	r1, sl
 8006330:	00ca      	lsls	r2, r1, #3
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	4603      	mov	r3, r0
 8006338:	4642      	mov	r2, r8
 800633a:	189b      	adds	r3, r3, r2
 800633c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006340:	464b      	mov	r3, r9
 8006342:	460a      	mov	r2, r1
 8006344:	eb42 0303 	adc.w	r3, r2, r3
 8006348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	67bb      	str	r3, [r7, #120]	; 0x78
 8006356:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006364:	4649      	mov	r1, r9
 8006366:	008b      	lsls	r3, r1, #2
 8006368:	4641      	mov	r1, r8
 800636a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636e:	4641      	mov	r1, r8
 8006370:	008a      	lsls	r2, r1, #2
 8006372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006376:	f7fa fab1 	bl	80008dc <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4b39      	ldr	r3, [pc, #228]	; (8006464 <UART_SetConfig+0x4e4>)
 8006380:	fba3 1302 	umull	r1, r3, r3, r2
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	2164      	movs	r1, #100	; 0x64
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	3332      	adds	r3, #50	; 0x32
 8006392:	4a34      	ldr	r2, [pc, #208]	; (8006464 <UART_SetConfig+0x4e4>)
 8006394:	fba2 2303 	umull	r2, r3, r2, r3
 8006398:	095b      	lsrs	r3, r3, #5
 800639a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639e:	441c      	add	r4, r3
 80063a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a4:	2200      	movs	r2, #0
 80063a6:	673b      	str	r3, [r7, #112]	; 0x70
 80063a8:	677a      	str	r2, [r7, #116]	; 0x74
 80063aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063ae:	4642      	mov	r2, r8
 80063b0:	464b      	mov	r3, r9
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	415b      	adcs	r3, r3
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063be:	4641      	mov	r1, r8
 80063c0:	1851      	adds	r1, r2, r1
 80063c2:	6039      	str	r1, [r7, #0]
 80063c4:	4649      	mov	r1, r9
 80063c6:	414b      	adcs	r3, r1
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063d6:	4659      	mov	r1, fp
 80063d8:	00cb      	lsls	r3, r1, #3
 80063da:	4651      	mov	r1, sl
 80063dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e0:	4651      	mov	r1, sl
 80063e2:	00ca      	lsls	r2, r1, #3
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	4642      	mov	r2, r8
 80063ec:	189b      	adds	r3, r3, r2
 80063ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f0:	464b      	mov	r3, r9
 80063f2:	460a      	mov	r2, r1
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	663b      	str	r3, [r7, #96]	; 0x60
 8006404:	667a      	str	r2, [r7, #100]	; 0x64
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006412:	4649      	mov	r1, r9
 8006414:	008b      	lsls	r3, r1, #2
 8006416:	4641      	mov	r1, r8
 8006418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800641c:	4641      	mov	r1, r8
 800641e:	008a      	lsls	r2, r1, #2
 8006420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006424:	f7fa fa5a 	bl	80008dc <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <UART_SetConfig+0x4e4>)
 800642e:	fba3 1302 	umull	r1, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	2164      	movs	r1, #100	; 0x64
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	3332      	adds	r3, #50	; 0x32
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <UART_SetConfig+0x4e4>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4422      	add	r2, r4
 8006454:	609a      	str	r2, [r3, #8]
}
 8006456:	bf00      	nop
 8006458:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop
 8006464:	51eb851f 	.word	0x51eb851f

08006468 <__NVIC_SetPriority>:
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006478:	2b00      	cmp	r3, #0
 800647a:	db0a      	blt.n	8006492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	490c      	ldr	r1, [pc, #48]	; (80064b4 <__NVIC_SetPriority+0x4c>)
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	0112      	lsls	r2, r2, #4
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	440b      	add	r3, r1
 800648c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006490:	e00a      	b.n	80064a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	4908      	ldr	r1, [pc, #32]	; (80064b8 <__NVIC_SetPriority+0x50>)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	3b04      	subs	r3, #4
 80064a0:	0112      	lsls	r2, r2, #4
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	440b      	add	r3, r1
 80064a6:	761a      	strb	r2, [r3, #24]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	e000e100 	.word	0xe000e100
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <SysTick_Handler+0x1c>)
 80064c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064c4:	f002 fede 	bl	8009284 <xTaskGetSchedulerState>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d001      	beq.n	80064d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064ce:	f003 fdfb 	bl	800a0c8 <xPortSysTickHandler>
  }
}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	e000e010 	.word	0xe000e010

080064dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064e0:	2100      	movs	r1, #0
 80064e2:	f06f 0004 	mvn.w	r0, #4
 80064e6:	f7ff ffbf 	bl	8006468 <__NVIC_SetPriority>
#endif
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f6:	f3ef 8305 	mrs	r3, IPSR
 80064fa:	603b      	str	r3, [r7, #0]
  return(result);
 80064fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006502:	f06f 0305 	mvn.w	r3, #5
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	e00c      	b.n	8006524 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <osKernelInitialize+0x44>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <osKernelInitialize+0x44>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006518:	2300      	movs	r3, #0
 800651a:	607b      	str	r3, [r7, #4]
 800651c:	e002      	b.n	8006524 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006524:	687b      	ldr	r3, [r7, #4]
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200002d0 	.word	0x200002d0

08006538 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653e:	f3ef 8305 	mrs	r3, IPSR
 8006542:	603b      	str	r3, [r7, #0]
  return(result);
 8006544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <osKernelStart+0x1a>
    stat = osErrorISR;
 800654a:	f06f 0305 	mvn.w	r3, #5
 800654e:	607b      	str	r3, [r7, #4]
 8006550:	e010      	b.n	8006574 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006552:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <osKernelStart+0x48>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d109      	bne.n	800656e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800655a:	f7ff ffbf 	bl	80064dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800655e:	4b08      	ldr	r3, [pc, #32]	; (8006580 <osKernelStart+0x48>)
 8006560:	2202      	movs	r2, #2
 8006562:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006564:	f002 f994 	bl	8008890 <vTaskStartScheduler>
      stat = osOK;
 8006568:	2300      	movs	r3, #0
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	e002      	b.n	8006574 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295
 8006572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006574:	687b      	ldr	r3, [r7, #4]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200002d0 	.word	0x200002d0

08006584 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af04      	add	r7, sp, #16
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006594:	f3ef 8305 	mrs	r3, IPSR
 8006598:	617b      	str	r3, [r7, #20]
  return(result);
 800659a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800659c:	2b00      	cmp	r3, #0
 800659e:	d17f      	bne.n	80066a0 <osThreadNew+0x11c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d07c      	beq.n	80066a0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80065a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065ac:	2318      	movs	r3, #24
 80065ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d045      	beq.n	800664c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <osThreadNew+0x4a>
        name = attr->name;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <osThreadNew+0x70>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b38      	cmp	r3, #56	; 0x38
 80065e6:	d805      	bhi.n	80065f4 <osThreadNew+0x70>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <osThreadNew+0x74>
        return (NULL);
 80065f4:	2300      	movs	r3, #0
 80065f6:	e054      	b.n	80066a2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	089b      	lsrs	r3, r3, #2
 8006606:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <osThreadNew+0xaa>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2bbb      	cmp	r3, #187	; 0xbb
 8006616:	d90a      	bls.n	800662e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <osThreadNew+0xaa>
        mem = 1;
 8006628:	2301      	movs	r3, #1
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	e010      	b.n	8006650 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10c      	bne.n	8006650 <osThreadNew+0xcc>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <osThreadNew+0xcc>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <osThreadNew+0xcc>
          mem = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e001      	b.n	8006650 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d110      	bne.n	8006678 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800665e:	9202      	str	r2, [sp, #8]
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 ff23 	bl	80084b8 <xTaskCreateStatic>
 8006672:	4603      	mov	r3, r0
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	e013      	b.n	80066a0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d110      	bne.n	80066a0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b29a      	uxth	r2, r3
 8006682:	f107 0310 	add.w	r3, r7, #16
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f001 ff6e 	bl	8008572 <xTaskCreate>
 8006696:	4603      	mov	r3, r0
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <osThreadNew+0x11c>
            hTask = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066a0:	693b      	ldr	r3, [r7, #16]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b2:	f3ef 8305 	mrs	r3, IPSR
 80066b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80066b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <osDelay+0x1c>
    stat = osErrorISR;
 80066be:	f06f 0305 	mvn.w	r3, #5
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e007      	b.n	80066d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f002 f8a9 	bl	8008828 <vTaskDelay>
    }
  }

  return (stat);
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ec:	f3ef 8305 	mrs	r3, IPSR
 80066f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d12d      	bne.n	8006754 <osEventFlagsNew+0x74>
    mem = -1;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <osEventFlagsNew+0x3a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b1f      	cmp	r3, #31
 8006712:	d902      	bls.n	800671a <osEventFlagsNew+0x3a>
        mem = 1;
 8006714:	2301      	movs	r3, #1
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	e00c      	b.n	8006734 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d108      	bne.n	8006734 <osEventFlagsNew+0x54>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <osEventFlagsNew+0x54>
          mem = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	e001      	b.n	8006734 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d106      	bne.n	8006748 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fc50 	bl	8006fe4 <xEventGroupCreateStatic>
 8006744:	6178      	str	r0, [r7, #20]
 8006746:	e005      	b.n	8006754 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800674e:	f000 fc80 	bl	8007052 <xEventGroupCreate>
 8006752:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006754:	697b      	ldr	r3, [r7, #20]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <osEventFlagsSet+0x1e>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800677e:	f06f 0303 	mvn.w	r3, #3
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e028      	b.n	80067d8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006786:	f3ef 8305 	mrs	r3, IPSR
 800678a:	60fb      	str	r3, [r7, #12]
  return(result);
 800678c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01d      	beq.n	80067ce <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006796:	f107 0308 	add.w	r3, r7, #8
 800679a:	461a      	mov	r2, r3
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f000 fdfa 	bl	8007398 <xEventGroupSetBitsFromISR>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80067aa:	f06f 0302 	mvn.w	r3, #2
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e012      	b.n	80067d8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00d      	beq.n	80067d8 <osEventFlagsSet+0x78>
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <osEventFlagsSet+0x84>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	e004      	b.n	80067d8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6938      	ldr	r0, [r7, #16]
 80067d2:	f000 fd27 	bl	8007224 <xEventGroupSetBits>
 80067d6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80067d8:	697b      	ldr	r3, [r7, #20]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <osEventFlagsWait+0x22>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800680a:	f06f 0303 	mvn.w	r3, #3
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e04b      	b.n	80068aa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006812:	f3ef 8305 	mrs	r3, IPSR
 8006816:	617b      	str	r3, [r7, #20]
  return(result);
 8006818:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800681e:	f06f 0305 	mvn.w	r3, #5
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e041      	b.n	80068aa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
 8006834:	e001      	b.n	800683a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006844:	2300      	movs	r3, #0
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	e001      	b.n	800684e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	69b8      	ldr	r0, [r7, #24]
 800685a:	f000 fc15 	bl	8007088 <xEventGroupWaitBits>
 800685e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4013      	ands	r3, r2
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d019      	beq.n	80068aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800687c:	f06f 0301 	mvn.w	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e012      	b.n	80068aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006884:	f06f 0302 	mvn.w	r3, #2
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e00e      	b.n	80068aa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800689c:	f06f 0301 	mvn.w	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	e002      	b.n	80068aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80068a4:	f06f 0302 	mvn.w	r3, #2
 80068a8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80068aa:	69fb      	ldr	r3, [r7, #28]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	; 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c4:	f3ef 8305 	mrs	r3, IPSR
 80068c8:	613b      	str	r3, [r7, #16]
  return(result);
 80068ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d15f      	bne.n	8006990 <osMessageQueueNew+0xdc>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d05c      	beq.n	8006990 <osMessageQueueNew+0xdc>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d059      	beq.n	8006990 <osMessageQueueNew+0xdc>
    mem = -1;
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295
 80068e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d029      	beq.n	800693c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <osMessageQueueNew+0x62>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b4f      	cmp	r3, #79	; 0x4f
 80068f6:	d90e      	bls.n	8006916 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <osMessageQueueNew+0x62>
        mem = 1;
 8006910:	2301      	movs	r3, #1
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e014      	b.n	8006940 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d110      	bne.n	8006940 <osMessageQueueNew+0x8c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10c      	bne.n	8006940 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <osMessageQueueNew+0x8c>
          mem = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e001      	b.n	8006940 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10b      	bne.n	800695e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	2100      	movs	r1, #0
 8006950:	9100      	str	r1, [sp, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fe4f 	bl	80075f8 <xQueueGenericCreateStatic>
 800695a:	61f8      	str	r0, [r7, #28]
 800695c:	e008      	b.n	8006970 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006964:	2200      	movs	r2, #0
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 febd 	bl	80076e8 <xQueueGenericCreate>
 800696e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <osMessageQueueNew+0xd0>
        name = attr->name;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e001      	b.n	8006988 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	69f8      	ldr	r0, [r7, #28]
 800698c:	f001 fd36 	bl	80083fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006990:	69fb      	ldr	r3, [r7, #28]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3720      	adds	r7, #32
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b4:	f3ef 8305 	mrs	r3, IPSR
 80069b8:	617b      	str	r3, [r7, #20]
  return(result);
 80069ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d028      	beq.n	8006a12 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <osMessageQueuePut+0x36>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <osMessageQueuePut+0x36>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80069d2:	f06f 0303 	mvn.w	r3, #3
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	e038      	b.n	8006a4c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80069de:	f107 0210 	add.w	r2, r7, #16
 80069e2:	2300      	movs	r3, #0
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	69b8      	ldr	r0, [r7, #24]
 80069e8:	f001 f810 	bl	8007a0c <xQueueGenericSendFromISR>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d003      	beq.n	80069fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80069f2:	f06f 0302 	mvn.w	r3, #2
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e028      	b.n	8006a4c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d025      	beq.n	8006a4c <osMessageQueuePut+0xb0>
 8006a00:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <osMessageQueuePut+0xbc>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	e01c      	b.n	8006a4c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <osMessageQueuePut+0x82>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006a1e:	f06f 0303 	mvn.w	r3, #3
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e012      	b.n	8006a4c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a26:	2300      	movs	r3, #0
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	69b8      	ldr	r0, [r7, #24]
 8006a2e:	f000 feef 	bl	8007810 <xQueueGenericSend>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d009      	beq.n	8006a4c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006a3e:	f06f 0301 	mvn.w	r3, #1
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	e002      	b.n	8006a4c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006a46:	f06f 0302 	mvn.w	r3, #2
 8006a4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	617b      	str	r3, [r7, #20]
  return(result);
 8006a78:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d028      	beq.n	8006ad0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <osMessageQueueGet+0x34>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <osMessageQueueGet+0x34>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006a90:	f06f 0303 	mvn.w	r3, #3
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e037      	b.n	8006b08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006a9c:	f107 0310 	add.w	r3, r7, #16
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	69b8      	ldr	r0, [r7, #24]
 8006aa6:	f001 fac5 	bl	8008034 <xQueueReceiveFromISR>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d003      	beq.n	8006ab8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006ab0:	f06f 0302 	mvn.w	r3, #2
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e027      	b.n	8006b08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d024      	beq.n	8006b08 <osMessageQueueGet+0xac>
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <osMessageQueueGet+0xb8>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	e01b      	b.n	8006b08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <osMessageQueueGet+0x80>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006adc:	f06f 0303 	mvn.w	r3, #3
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	e011      	b.n	8006b08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	69b8      	ldr	r0, [r7, #24]
 8006aea:	f001 f8b7 	bl	8007c5c <xQueueReceive>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d009      	beq.n	8006b08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006afa:	f06f 0301 	mvn.w	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e002      	b.n	8006b08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006b02:	f06f 0302 	mvn.w	r3, #2
 8006b06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006b08:	69fb      	ldr	r3, [r7, #28]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b24:	f3ef 8305 	mrs	r3, IPSR
 8006b28:	613b      	str	r3, [r7, #16]
  return(result);
 8006b2a:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <osMemoryPoolNew+0x1e>
    mp = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
 8006b34:	e0be      	b.n	8006cb4 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <osMemoryPoolNew+0x2a>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <osMemoryPoolNew+0x30>
    mp = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e0b5      	b.n	8006cb4 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	3303      	adds	r3, #3
 8006b50:	f023 0203 	bic.w	r2, r3, #3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	617b      	str	r3, [r7, #20]

    name = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 8006b60:	f04f 33ff 	mov.w	r3, #4294967295
 8006b64:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d038      	beq.n	8006be4 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <osMemoryPoolNew+0x68>
        name = attr->name;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <osMemoryPoolNew+0x7e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	2b73      	cmp	r3, #115	; 0x73
 8006b8e:	d902      	bls.n	8006b96 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 8006b90:	2301      	movs	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e009      	b.n	8006baa <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <osMemoryPoolNew+0x92>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <osMemoryPoolNew+0xa8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e015      	b.n	8006bec <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d011      	beq.n	8006bec <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d806      	bhi.n	8006bec <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 8006bde:	2301      	movs	r3, #1
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	e003      	b.n	8006bec <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 8006bf2:	2074      	movs	r0, #116	; 0x74
 8006bf4:	f003 faf8 	bl	800a1e8 <pvPortMalloc>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24
 8006bfa:	e002      	b.n	8006c02 <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fdc6 	bl	80077a2 <xQueueCreateCountingSemaphoreStatic>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8006c2a:	6978      	ldr	r0, [r7, #20]
 8006c2c:	f003 fadc 	bl	800a1e8 <pvPortMalloc>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	609a      	str	r2, [r3, #8]
 8006c36:	e003      	b.n	8006c40 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02b      	beq.n	8006c9e <osMemoryPoolNew+0x186>
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d027      	beq.n	8006c9e <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <osMemoryPoolNew+0x1a8>)
 8006c76:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d105      	bne.n	8006c8a <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d111      	bne.n	8006cb4 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f043 0202 	orr.w	r2, r3, #2
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8006c9c:	e00a      	b.n	8006cb4 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <osMemoryPoolNew+0x198>
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 8006caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cac:	f003 fb68 	bl	800a380 <vPortFree>
      }
      mp = NULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3728      	adds	r7, #40	; 0x28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	5eed0000 	.word	0x5eed0000

08006cc4 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	e062      	b.n	8006da0 <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	4b31      	ldr	r3, [pc, #196]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	4a30      	ldr	r2, [pc, #192]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d157      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf0:	f3ef 8305 	mrs	r3, IPSR
 8006cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cf6:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d032      	beq.n	8006d62 <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14e      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 f992 	bl	8008034 <xQueueReceiveFromISR>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d144      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	4a23      	ldr	r2, [pc, #140]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d13d      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d24:	f3ef 8211 	mrs	r2, BASEPRI
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	617a      	str	r2, [r7, #20]
 8006d3a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d3c:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 8006d3e:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 8006d40:	6a38      	ldr	r0, [r7, #32]
 8006d42:	f000 f8ef 	bl	8006f24 <AllocBlock>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 8006d4e:	6a38      	ldr	r0, [r7, #32]
 8006d50:	f000 f8c6 	bl	8006ee0 <CreateBlock>
 8006d54:	6278      	str	r0, [r7, #36]	; 0x24
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d60:	e01e      	b.n	8006da0 <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 f857 	bl	8007e1c <xQueueSemaphoreTake>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d115      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <osMemoryPoolAlloc+0xe8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10e      	bne.n	8006da0 <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 8006d82:	f003 f90f 	bl	8009fa4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8006d86:	6a38      	ldr	r0, [r7, #32]
 8006d88:	f000 f8cc 	bl	8006f24 <AllocBlock>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8006d94:	6a38      	ldr	r0, [r7, #32]
 8006d96:	f000 f8a3 	bl	8006ee0 <CreateBlock>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8006d9c:	f003 f932 	bl	800a004 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3728      	adds	r7, #40	; 0x28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	5eed0000 	.word	0x5eed0000

08006db0 <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <osMemoryPoolFree+0x16>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 8006dc6:	f06f 0303 	mvn.w	r3, #3
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
 8006dcc:	e07f      	b.n	8006ece <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <osMemoryPoolFree+0x128>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	4a3f      	ldr	r2, [pc, #252]	; (8006ed8 <osMemoryPoolFree+0x128>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 8006de0:	f06f 0302 	mvn.w	r3, #2
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	e072      	b.n	8006ece <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d308      	bcc.n	8006e04 <osMemoryPoolFree+0x54>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 8006e04:	f06f 0303 	mvn.w	r3, #3
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e060      	b.n	8006ece <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e10:	f3ef 8305 	mrs	r3, IPSR
 8006e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e16:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d03b      	beq.n	8006e94 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f9a5 	bl	8008170 <uxQueueMessagesWaitingFromISR>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d103      	bne.n	8006e38 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 8006e30:	f06f 0302 	mvn.w	r3, #2
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
 8006e36:	e04a      	b.n	8006ece <osMemoryPoolFree+0x11e>
	__asm volatile
 8006e38:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	613a      	str	r2, [r7, #16]
 8006e4e:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8006e50:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 8006e52:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6a38      	ldr	r0, [r7, #32]
 8006e58:	f000 f87c 	bl	8006f54 <FreeBlock>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f383 8811 	msr	BASEPRI, r3
}
 8006e66:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f107 0208 	add.w	r2, r7, #8
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe63 	bl	8007b42 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d025      	beq.n	8006ece <osMemoryPoolFree+0x11e>
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <osMemoryPoolFree+0x12c>)
 8006e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	e01c      	b.n	8006ece <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f94b 	bl	8008134 <uxQueueMessagesWaiting>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d103      	bne.n	8006eb0 <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8006ea8:	f06f 0302 	mvn.w	r3, #2
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	e00e      	b.n	8006ece <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 8006eb0:	f003 f878 	bl	8009fa4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6a38      	ldr	r0, [r7, #32]
 8006eb8:	f000 f84c 	bl	8006f54 <FreeBlock>

          taskEXIT_CRITICAL();
 8006ebc:	f003 f8a2 	bl	800a004 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	6858      	ldr	r0, [r3, #4]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f000 fca1 	bl	8007810 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	5eed0000 	.word	0x5eed0000
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d20e      	bcs.n	8006f16 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	69c9      	ldr	r1, [r1, #28]
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	61da      	str	r2, [r3, #28]
  }

  return (p);
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d006      	beq.n	8006f46 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	601a      	str	r2, [r3, #0]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a07      	ldr	r2, [pc, #28]	; (8006fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a06      	ldr	r2, [pc, #24]	; (8006fac <vApplicationGetIdleTaskMemory+0x30>)
 8006f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f9a:	601a      	str	r2, [r3, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	200002d4 	.word	0x200002d4
 8006fac:	20000390 	.word	0x20000390

08006fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a07      	ldr	r2, [pc, #28]	; (8006fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8006fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8006fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fce:	601a      	str	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20001390 	.word	0x20001390
 8006fe0:	2000144c 	.word	0x2000144c

08006fe4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <xEventGroupCreateStatic+0x24>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	613b      	str	r3, [r7, #16]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007008:	2320      	movs	r3, #32
 800700a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b20      	cmp	r3, #32
 8007010:	d00a      	beq.n	8007028 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3304      	adds	r3, #4
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f9bf 	bl	80073c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2201      	movs	r2, #1
 8007046:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8007048:	697b      	ldr	r3, [r7, #20]
	}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007058:	2020      	movs	r0, #32
 800705a:	f003 f8c5 	bl	800a1e8 <pvPortMalloc>
 800705e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f9a5 	bl	80073c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800707c:	687b      	ldr	r3, [r7, #4]
	}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b090      	sub	sp, #64	; 0x40
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xEventGroupWaitBits+0x36>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <xEventGroupWaitBits+0x56>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	61fb      	str	r3, [r7, #28]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xEventGroupWaitBits+0x72>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61bb      	str	r3, [r7, #24]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070fa:	f002 f8c3 	bl	8009284 <xTaskGetSchedulerState>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <xEventGroupWaitBits+0x82>
 8007104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <xEventGroupWaitBits+0x86>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <xEventGroupWaitBits+0x88>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	617b      	str	r3, [r7, #20]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800712a:	f001 fc21 	bl	8008970 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800713a:	f000 f90b 	bl	8007354 <prvTestWaitCondition>
 800713e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800714a:	2300      	movs	r3, #0
 800714c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d028      	beq.n	80071a6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	43db      	mvns	r3, r3
 800715c:	401a      	ands	r2, r3
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e020      	b.n	80071a6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
 8007172:	e018      	b.n	80071a6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007180:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	1d18      	adds	r0, r3, #4
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	4313      	orrs	r3, r2
 800719a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800719c:	4619      	mov	r1, r3
 800719e:	f001 fde5 	bl	8008d6c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80071a6:	f001 fbf1 	bl	800898c <xTaskResumeAll>
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80071ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d031      	beq.n	8007216 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80071b8:	4b19      	ldr	r3, [pc, #100]	; (8007220 <xEventGroupWaitBits+0x198>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80071c8:	f002 f9d2 	bl	8009570 <uxTaskResetEventItemValue>
 80071cc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80071ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11a      	bne.n	800720e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80071d8:	f002 fee4 	bl	8009fa4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071e8:	f000 f8b4 	bl	8007354 <prvTestWaitCondition>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	43db      	mvns	r3, r3
 8007200:	401a      	ands	r2, r3
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007206:	2301      	movs	r3, #1
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800720a:	f002 fefb 	bl	800a004 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007218:	4618      	mov	r0, r3
 800721a:	3740      	adds	r7, #64	; 0x40
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800722e:	2300      	movs	r3, #0
 8007230:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <xEventGroupSetBits+0x32>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	613b      	str	r3, [r7, #16]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <xEventGroupSetBits+0x52>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	3304      	adds	r3, #4
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	3308      	adds	r3, #8
 8007280:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007282:	f001 fb75 	bl	8008970 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	431a      	orrs	r2, r3
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007298:	e03c      	b.n	8007314 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072b8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d4:	e008      	b.n	80072e8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d101      	bne.n	80072e8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d010      	beq.n	8007310 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007308:	4619      	mov	r1, r3
 800730a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800730c:	f001 fdfa 	bl	8008f04 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	429a      	cmp	r2, r3
 800731a:	d1be      	bne.n	800729a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	43db      	mvns	r3, r3
 8007324:	401a      	ands	r2, r3
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800732a:	f001 fb2f 	bl	800898c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	681b      	ldr	r3, [r3, #0]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3738      	adds	r7, #56	; 0x38
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ff6c 	bl	8007224 <xEventGroupSetBits>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e007      	b.n	800738a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4013      	ands	r3, r2
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	429a      	cmp	r2, r3
 8007384:	d101      	bne.n	800738a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800738a:	697b      	ldr	r3, [r7, #20]
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	4804      	ldr	r0, [pc, #16]	; (80073bc <xEventGroupSetBitsFromISR+0x24>)
 80073ac:	f002 fcae 	bl	8009d0c <xTimerPendFunctionCallFromISR>
 80073b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80073b2:	697b      	ldr	r3, [r7, #20]
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	0800733b 	.word	0x0800733b

080073c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f103 0208 	add.w	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295
 80073d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f103 0208 	add.w	r2, r3, #8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0208 	add.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d103      	bne.n	8007482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e00c      	b.n	800749c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3308      	adds	r3, #8
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e002      	b.n	8007490 <vListInsert+0x2e>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	d2f6      	bcs.n	800748a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6892      	ldr	r2, [r2, #8]
 80074ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d103      	bne.n	8007508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xQueueGenericReset+0x2a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007552:	f002 fd27 	bl	8009fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	3b01      	subs	r3, #1
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	441a      	add	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	22ff      	movs	r2, #255	; 0xff
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d114      	bne.n	80075d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01a      	beq.n	80075e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3310      	adds	r3, #16
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 fc41 	bl	8008e3c <xTaskRemoveFromEventList>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d012      	beq.n	80075e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <xQueueGenericReset+0xcc>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	e009      	b.n	80075e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3310      	adds	r3, #16
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fef2 	bl	80073c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff feed 	bl	80073c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075e6:	f002 fd0d 	bl	800a004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075ea:	2301      	movs	r3, #1
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	e000ed04 	.word	0xe000ed04

080075f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	; 0x38
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <xQueueGenericCreateStatic+0x52>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <xQueueGenericCreateStatic+0x56>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <xQueueGenericCreateStatic+0x58>
 800764e:	2300      	movs	r3, #0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <xQueueGenericCreateStatic+0x7e>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <xQueueGenericCreateStatic+0x82>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <xQueueGenericCreateStatic+0x84>
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	61fb      	str	r3, [r7, #28]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007696:	2350      	movs	r3, #80	; 0x50
 8007698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b50      	cmp	r3, #80	; 0x50
 800769e:	d00a      	beq.n	80076b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	61bb      	str	r3, [r7, #24]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	4613      	mov	r3, r2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f83f 	bl	800775c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3730      	adds	r7, #48	; 0x30
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xQueueGenericCreate+0x2a>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	fb02 f303 	mul.w	r3, r2, r3
 800771a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	3350      	adds	r3, #80	; 0x50
 8007720:	4618      	mov	r0, r3
 8007722:	f002 fd61 	bl	800a1e8 <pvPortMalloc>
 8007726:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	3350      	adds	r3, #80	; 0x50
 8007736:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007740:	79fa      	ldrb	r2, [r7, #7]
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f805 	bl	800775c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007752:	69bb      	ldr	r3, [r7, #24]
	}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e002      	b.n	800777e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800778a:	2101      	movs	r1, #1
 800778c:	69b8      	ldr	r0, [r7, #24]
 800778e:	f7ff fecb 	bl	8007528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b08a      	sub	sp, #40	; 0x28
 80077a6:	af02      	add	r7, sp, #8
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	61bb      	str	r3, [r7, #24]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d90a      	bls.n	80077e8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	617b      	str	r3, [r7, #20]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077e8:	2302      	movs	r3, #2
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	2100      	movs	r1, #0
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff ff00 	bl	80075f8 <xQueueGenericCreateStatic>
 80077f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007806:	69fb      	ldr	r3, [r7, #28]
	}
 8007808:	4618      	mov	r0, r3
 800780a:	3720      	adds	r7, #32
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	; 0x38
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800781e:	2300      	movs	r3, #0
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xQueueGenericSend+0x32>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <xQueueGenericSend+0x40>
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <xQueueGenericSend+0x44>
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <xQueueGenericSend+0x46>
 8007854:	2300      	movs	r3, #0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <xQueueGenericSend+0x60>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d103      	bne.n	800787e <xQueueGenericSend+0x6e>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <xQueueGenericSend+0x72>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <xQueueGenericSend+0x74>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <xQueueGenericSend+0x8e>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	623b      	str	r3, [r7, #32]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800789e:	f001 fcf1 	bl	8009284 <xTaskGetSchedulerState>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d102      	bne.n	80078ae <xQueueGenericSend+0x9e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <xQueueGenericSend+0xa2>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <xQueueGenericSend+0xa4>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xQueueGenericSend+0xbe>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	61fb      	str	r3, [r7, #28]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ce:	f002 fb69 	bl	8009fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	429a      	cmp	r2, r3
 80078dc:	d302      	bcc.n	80078e4 <xQueueGenericSend+0xd4>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d129      	bne.n	8007938 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ea:	f000 fc77 	bl	80081dc <prvCopyDataToQueue>
 80078ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d010      	beq.n	800791a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	3324      	adds	r3, #36	; 0x24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 fa9d 	bl	8008e3c <xTaskRemoveFromEventList>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d013      	beq.n	8007930 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007908:	4b3f      	ldr	r3, [pc, #252]	; (8007a08 <xQueueGenericSend+0x1f8>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	e00a      	b.n	8007930 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007920:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <xQueueGenericSend+0x1f8>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007930:	f002 fb68 	bl	800a004 <vPortExitCritical>
				return pdPASS;
 8007934:	2301      	movs	r3, #1
 8007936:	e063      	b.n	8007a00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d103      	bne.n	8007946 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800793e:	f002 fb61 	bl	800a004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007942:	2300      	movs	r3, #0
 8007944:	e05c      	b.n	8007a00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007948:	2b00      	cmp	r3, #0
 800794a:	d106      	bne.n	800795a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	4618      	mov	r0, r3
 8007952:	f001 fb39 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800795a:	f002 fb53 	bl	800a004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800795e:	f001 f807 	bl	8008970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007962:	f002 fb1f 	bl	8009fa4 <vPortEnterCritical>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800796c:	b25b      	sxtb	r3, r3
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d103      	bne.n	800797c <xQueueGenericSend+0x16c>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007982:	b25b      	sxtb	r3, r3
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d103      	bne.n	8007992 <xQueueGenericSend+0x182>
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007992:	f002 fb37 	bl	800a004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007996:	1d3a      	adds	r2, r7, #4
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fb28 	bl	8008ff4 <xTaskCheckForTimeOut>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d124      	bne.n	80079f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ac:	f000 fd0e 	bl	80083cc <prvIsQueueFull>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d018      	beq.n	80079e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	3310      	adds	r3, #16
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 f9b0 	bl	8008d24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c6:	f000 fc99 	bl	80082fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079ca:	f000 ffdf 	bl	800898c <xTaskResumeAll>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f47f af7c 	bne.w	80078ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <xQueueGenericSend+0x1f8>)
 80079d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	e772      	b.n	80078ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ea:	f000 fc87 	bl	80082fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ee:	f000 ffcd 	bl	800898c <xTaskResumeAll>
 80079f2:	e76c      	b.n	80078ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f6:	f000 fc81 	bl	80082fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079fa:	f000 ffc7 	bl	800898c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3738      	adds	r7, #56	; 0x38
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b090      	sub	sp, #64	; 0x40
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <xQueueGenericSendFromISR+0x3c>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <xQueueGenericSendFromISR+0x40>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <xQueueGenericSendFromISR+0x42>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSendFromISR+0x6a>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSendFromISR+0x6e>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSendFromISR+0x70>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	623b      	str	r3, [r7, #32]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a96:	f002 fb67 	bl	800a168 <vPortValidateInterruptPriority>
	__asm volatile
 8007a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	61fa      	str	r2, [r7, #28]
 8007ab0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <xQueueGenericSendFromISR+0xbc>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d12f      	bne.n	8007b28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ade:	f000 fb7d 	bl	80081dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d112      	bne.n	8007b12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d016      	beq.n	8007b22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f99f 	bl	8008e3c <xTaskRemoveFromEventList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	e007      	b.n	8007b22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	b25a      	sxtb	r2, r3
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b22:	2301      	movs	r3, #1
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b26:	e001      	b.n	8007b2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f383 8811 	msr	BASEPRI, r3
}
 8007b36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3740      	adds	r7, #64	; 0x40
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b08e      	sub	sp, #56	; 0x38
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	623b      	str	r3, [r7, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61fb      	str	r3, [r7, #28]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <xQueueGiveFromISR+0x58>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <xQueueGiveFromISR+0x5c>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueGiveFromISR+0x5e>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xQueueGiveFromISR+0x78>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bba:	f002 fad5 	bl	800a168 <vPortValidateInterruptPriority>
	__asm volatile
 8007bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617a      	str	r2, [r7, #20]
 8007bd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d22b      	bcs.n	8007c42 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d112      	bne.n	8007c2c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d016      	beq.n	8007c3c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	3324      	adds	r3, #36	; 0x24
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f912 	bl	8008e3c <xTaskRemoveFromEventList>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00e      	beq.n	8007c3c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e007      	b.n	8007c3c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	3301      	adds	r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	b25a      	sxtb	r2, r3
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	e001      	b.n	8007c46 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f383 8811 	msr	BASEPRI, r3
}
 8007c50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3738      	adds	r7, #56	; 0x38
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	; 0x30
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <xQueueReceive+0x30>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	623b      	str	r3, [r7, #32]
}
 8007c88:	bf00      	nop
 8007c8a:	e7fe      	b.n	8007c8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <xQueueReceive+0x3e>
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <xQueueReceive+0x42>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <xQueueReceive+0x44>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xQueueReceive+0x5e>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	61fb      	str	r3, [r7, #28]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cba:	f001 fae3 	bl	8009284 <xTaskGetSchedulerState>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <xQueueReceive+0x6e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <xQueueReceive+0x72>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <xQueueReceive+0x74>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xQueueReceive+0x8e>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	61bb      	str	r3, [r7, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cea:	f002 f95b 	bl	8009fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01f      	beq.n	8007d3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfe:	f000 fad7 	bl	80082b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	1e5a      	subs	r2, r3, #1
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00f      	beq.n	8007d32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	3310      	adds	r3, #16
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f890 	bl	8008e3c <xTaskRemoveFromEventList>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d22:	4b3d      	ldr	r3, [pc, #244]	; (8007e18 <xQueueReceive+0x1bc>)
 8007d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d32:	f002 f967 	bl	800a004 <vPortExitCritical>
				return pdPASS;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e069      	b.n	8007e0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d40:	f002 f960 	bl	800a004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e062      	b.n	8007e0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d4e:	f107 0310 	add.w	r3, r7, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 f938 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d5c:	f002 f952 	bl	800a004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d60:	f000 fe06 	bl	8008970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d64:	f002 f91e 	bl	8009fa4 <vPortEnterCritical>
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d6e:	b25b      	sxtb	r3, r3
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d103      	bne.n	8007d7e <xQueueReceive+0x122>
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d103      	bne.n	8007d94 <xQueueReceive+0x138>
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d94:	f002 f936 	bl	800a004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d98:	1d3a      	adds	r2, r7, #4
 8007d9a:	f107 0310 	add.w	r3, r7, #16
 8007d9e:	4611      	mov	r1, r2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 f927 	bl	8008ff4 <xTaskCheckForTimeOut>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d123      	bne.n	8007df4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dae:	f000 faf7 	bl	80083a0 <prvIsQueueEmpty>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d017      	beq.n	8007de8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 ffaf 	bl	8008d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc8:	f000 fa98 	bl	80082fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dcc:	f000 fdde 	bl	800898c <xTaskResumeAll>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d189      	bne.n	8007cea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <xQueueReceive+0x1bc>)
 8007dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	e780      	b.n	8007cea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dea:	f000 fa87 	bl	80082fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dee:	f000 fdcd 	bl	800898c <xTaskResumeAll>
 8007df2:	e77a      	b.n	8007cea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df6:	f000 fa81 	bl	80082fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dfa:	f000 fdc7 	bl	800898c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e00:	f000 face 	bl	80083a0 <prvIsQueueEmpty>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f43f af6f 	beq.w	8007cea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3730      	adds	r7, #48	; 0x30
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	; 0x38
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	623b      	str	r3, [r7, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61fb      	str	r3, [r7, #28]
}
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e6c:	f001 fa0a 	bl	8009284 <xTaskGetSchedulerState>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <xQueueSemaphoreTake+0x60>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <xQueueSemaphoreTake+0x64>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <xQueueSemaphoreTake+0x66>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10a      	bne.n	8007e9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	61bb      	str	r3, [r7, #24]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e9c:	f002 f882 	bl	8009fa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d024      	beq.n	8007ef6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	1e5a      	subs	r2, r3, #1
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ebc:	f001 fb70 	bl	80095a0 <pvTaskIncrementMutexHeldCount>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	3310      	adds	r3, #16
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 ffb2 	bl	8008e3c <xTaskRemoveFromEventList>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ede:	4b54      	ldr	r3, [pc, #336]	; (8008030 <xQueueSemaphoreTake+0x214>)
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007eee:	f002 f889 	bl	800a004 <vPortExitCritical>
				return pdPASS;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e097      	b.n	8008026 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d111      	bne.n	8007f20 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	617b      	str	r3, [r7, #20]
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f18:	f002 f874 	bl	800a004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e082      	b.n	8008026 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f26:	f107 030c 	add.w	r3, r7, #12
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f84c 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f34:	f002 f866 	bl	800a004 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f38:	f000 fd1a 	bl	8008970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3c:	f002 f832 	bl	8009fa4 <vPortEnterCritical>
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f46:	b25b      	sxtb	r3, r3
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d103      	bne.n	8007f56 <xQueueSemaphoreTake+0x13a>
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d103      	bne.n	8007f6c <xQueueSemaphoreTake+0x150>
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f6c:	f002 f84a 	bl	800a004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f70:	463a      	mov	r2, r7
 8007f72:	f107 030c 	add.w	r3, r7, #12
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 f83b 	bl	8008ff4 <xTaskCheckForTimeOut>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d132      	bne.n	8007fea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f86:	f000 fa0b 	bl	80083a0 <prvIsQueueEmpty>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d026      	beq.n	8007fde <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f98:	f002 f804 	bl	8009fa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 f98d 	bl	80092c0 <xTaskPriorityInherit>
 8007fa6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007fa8:	f002 f82c 	bl	800a004 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 feb5 	bl	8008d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fbc:	f000 f99e 	bl	80082fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc0:	f000 fce4 	bl	800898c <xTaskResumeAll>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f47f af68 	bne.w	8007e9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fcc:	4b18      	ldr	r3, [pc, #96]	; (8008030 <xQueueSemaphoreTake+0x214>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	e75e      	b.n	8007e9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe0:	f000 f98c 	bl	80082fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fe4:	f000 fcd2 	bl	800898c <xTaskResumeAll>
 8007fe8:	e758      	b.n	8007e9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fec:	f000 f986 	bl	80082fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ff0:	f000 fccc 	bl	800898c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff6:	f000 f9d3 	bl	80083a0 <prvIsQueueEmpty>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f43f af4d 	beq.w	8007e9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008008:	f001 ffcc 	bl	8009fa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800800c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800800e:	f000 f8cd 	bl	80081ac <prvGetDisinheritPriorityAfterTimeout>
 8008012:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fa26 	bl	800946c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008020:	f001 fff0 	bl	800a004 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008026:	4618      	mov	r0, r3
 8008028:	3738      	adds	r7, #56	; 0x38
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	; 0x38
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	623b      	str	r3, [r7, #32]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <xQueueReceiveFromISR+0x3a>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <xQueueReceiveFromISR+0x3e>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <xQueueReceiveFromISR+0x40>
 8008072:	2300      	movs	r3, #0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	61fb      	str	r3, [r7, #28]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800808e:	f002 f86b 	bl	800a168 <vPortValidateInterruptPriority>
	__asm volatile
 8008092:	f3ef 8211 	mrs	r2, BASEPRI
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	61ba      	str	r2, [r7, #24]
 80080a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80080aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d02f      	beq.n	800811a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c8:	f000 f8f2 	bl	80082b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	1e5a      	subs	r2, r3, #1
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80080d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d112      	bne.n	8008104 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	3310      	adds	r3, #16
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fea6 	bl	8008e3c <xTaskRemoveFromEventList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e007      	b.n	8008114 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008108:	3301      	adds	r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	b25a      	sxtb	r2, r3
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008114:	2301      	movs	r3, #1
 8008116:	637b      	str	r3, [r7, #52]	; 0x34
 8008118:	e001      	b.n	800811e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800811a:	2300      	movs	r3, #0
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f383 8811 	msr	BASEPRI, r3
}
 8008128:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800812a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800812c:	4618      	mov	r0, r3
 800812e:	3738      	adds	r7, #56	; 0x38
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60bb      	str	r3, [r7, #8]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008158:	f001 ff24 	bl	8009fa4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008162:	f001 ff4f 	bl	800a004 <vPortExitCritical>

	return uxReturn;
 8008166:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60fb      	str	r3, [r7, #12]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800819e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081a0:	4618      	mov	r0, r3
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e001      	b.n	80081ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081ce:	68fb      	ldr	r3, [r7, #12]
	}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10d      	bne.n	8008216 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d14d      	bne.n	800829e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f8c2 	bl	8009390 <xTaskPriorityDisinherit>
 800820c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	e043      	b.n	800829e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d119      	bne.n	8008250 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6858      	ldr	r0, [r3, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	461a      	mov	r2, r3
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	f002 f9f4 	bl	800a614 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	441a      	add	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	d32b      	bcc.n	800829e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	e026      	b.n	800829e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68d8      	ldr	r0, [r3, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	461a      	mov	r2, r3
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	f002 f9da 	bl	800a614 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	425b      	negs	r3, r3
 800826a:	441a      	add	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d207      	bcs.n	800828c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	425b      	negs	r3, r3
 8008286:	441a      	add	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d105      	bne.n	800829e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3b01      	subs	r3, #1
 800829c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082a6:	697b      	ldr	r3, [r7, #20]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d018      	beq.n	80082f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	441a      	add	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d303      	bcc.n	80082e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68d9      	ldr	r1, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ec:	461a      	mov	r2, r3
 80082ee:	6838      	ldr	r0, [r7, #0]
 80082f0:	f002 f990 	bl	800a614 <memcpy>
	}
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008304:	f001 fe4e 	bl	8009fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008310:	e011      	b.n	8008336 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d012      	beq.n	8008340 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3324      	adds	r3, #36	; 0x24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fd8c 	bl	8008e3c <xTaskRemoveFromEventList>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800832a:	f000 fec5 	bl	80090b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	3b01      	subs	r3, #1
 8008332:	b2db      	uxtb	r3, r3
 8008334:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dce9      	bgt.n	8008312 <prvUnlockQueue+0x16>
 800833e:	e000      	b.n	8008342 <prvUnlockQueue+0x46>
					break;
 8008340:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	22ff      	movs	r2, #255	; 0xff
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800834a:	f001 fe5b 	bl	800a004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800834e:	f001 fe29 	bl	8009fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008358:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800835a:	e011      	b.n	8008380 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3310      	adds	r3, #16
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fd67 	bl	8008e3c <xTaskRemoveFromEventList>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008374:	f000 fea0 	bl	80090b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	3b01      	subs	r3, #1
 800837c:	b2db      	uxtb	r3, r3
 800837e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	dce9      	bgt.n	800835c <prvUnlockQueue+0x60>
 8008388:	e000      	b.n	800838c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800838a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	22ff      	movs	r2, #255	; 0xff
 8008390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008394:	f001 fe36 	bl	800a004 <vPortExitCritical>
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083a8:	f001 fdfc 	bl	8009fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e001      	b.n	80083be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083be:	f001 fe21 	bl	800a004 <vPortExitCritical>

	return xReturn;
 80083c2:	68fb      	ldr	r3, [r7, #12]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d4:	f001 fde6 	bl	8009fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d102      	bne.n	80083ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e001      	b.n	80083ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ee:	f001 fe09 	bl	800a004 <vPortExitCritical>

	return xReturn;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e014      	b.n	8008436 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800840c:	4a0f      	ldr	r2, [pc, #60]	; (800844c <vQueueAddToRegistry+0x50>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10b      	bne.n	8008430 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008418:	490c      	ldr	r1, [pc, #48]	; (800844c <vQueueAddToRegistry+0x50>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008422:	4a0a      	ldr	r2, [pc, #40]	; (800844c <vQueueAddToRegistry+0x50>)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	4413      	add	r3, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800842e:	e006      	b.n	800843e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3301      	adds	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b07      	cmp	r3, #7
 800843a:	d9e7      	bls.n	800840c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	2000344c 	.word	0x2000344c

08008450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008460:	f001 fda0 	bl	8009fa4 <vPortEnterCritical>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <vQueueWaitForMessageRestricted+0x2a>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <vQueueWaitForMessageRestricted+0x40>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008490:	f001 fdb8 	bl	800a004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fc9d 	bl	8008de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f7ff ff26 	bl	80082fc <prvUnlockQueue>
	}
 80084b0:	bf00      	nop
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af04      	add	r7, sp, #16
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	623b      	str	r3, [r7, #32]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <xTaskCreateStatic+0x46>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	61fb      	str	r3, [r7, #28]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084fe:	23bc      	movs	r3, #188	; 0xbc
 8008500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2bbc      	cmp	r3, #188	; 0xbc
 8008506:	d00a      	beq.n	800851e <xTaskCreateStatic+0x66>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	61bb      	str	r3, [r7, #24]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800851e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01e      	beq.n	8008564 <xTaskCreateStatic+0xac>
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01b      	beq.n	8008564 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008534:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	2202      	movs	r2, #2
 800853a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800853e:	2300      	movs	r3, #0
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	f107 0314 	add.w	r3, r7, #20
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f850 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800855c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800855e:	f000 f8f3 	bl	8008748 <prvAddNewTaskToReadyList>
 8008562:	e001      	b.n	8008568 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008568:	697b      	ldr	r3, [r7, #20]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3728      	adds	r7, #40	; 0x28
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008572:	b580      	push	{r7, lr}
 8008574:	b08c      	sub	sp, #48	; 0x30
 8008576:	af04      	add	r7, sp, #16
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fe2e 	bl	800a1e8 <pvPortMalloc>
 800858c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00e      	beq.n	80085b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008594:	20bc      	movs	r0, #188	; 0xbc
 8008596:	f001 fe27 	bl	800a1e8 <pvPortMalloc>
 800859a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30
 80085a8:	e005      	b.n	80085b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085aa:	6978      	ldr	r0, [r7, #20]
 80085ac:	f001 fee8 	bl	800a380 <vPortFree>
 80085b0:	e001      	b.n	80085b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085c4:	88fa      	ldrh	r2, [r7, #6]
 80085c6:	2300      	movs	r3, #0
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f80e 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085e0:	69f8      	ldr	r0, [r7, #28]
 80085e2:	f000 f8b1 	bl	8008748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085e6:	2301      	movs	r3, #1
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e002      	b.n	80085f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295
 80085f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085f2:	69bb      	ldr	r3, [r7, #24]
	}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	461a      	mov	r2, r3
 8008614:	21a5      	movs	r1, #165	; 0xa5
 8008616:	f002 f80b 	bl	800a630 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008624:	3b01      	subs	r3, #1
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f023 0307 	bic.w	r3, r3, #7
 8008632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <prvInitialiseNewTask+0x58>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	617b      	str	r3, [r7, #20]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01f      	beq.n	800869a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
 800865e:	e012      	b.n	8008686 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	7819      	ldrb	r1, [r3, #0]
 8008668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	3334      	adds	r3, #52	; 0x34
 8008670:	460a      	mov	r2, r1
 8008672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	3301      	adds	r3, #1
 8008684:	61fb      	str	r3, [r7, #28]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	2b0f      	cmp	r3, #15
 800868a:	d9e9      	bls.n	8008660 <prvInitialiseNewTask+0x64>
 800868c:	e000      	b.n	8008690 <prvInitialiseNewTask+0x94>
			{
				break;
 800868e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008698:	e003      	b.n	80086a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	2b37      	cmp	r3, #55	; 0x37
 80086a6:	d901      	bls.n	80086ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086a8:	2337      	movs	r3, #55	; 0x37
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2200      	movs	r2, #0
 80086bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fe9c 	bl	8007400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	3318      	adds	r3, #24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fe97 	bl	8007400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	3354      	adds	r3, #84	; 0x54
 80086fc:	2260      	movs	r2, #96	; 0x60
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f001 ff95 	bl	800a630 <memset>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	4a0c      	ldr	r2, [pc, #48]	; (800873c <prvInitialiseNewTask+0x140>)
 800870a:	659a      	str	r2, [r3, #88]	; 0x58
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	4a0c      	ldr	r2, [pc, #48]	; (8008740 <prvInitialiseNewTask+0x144>)
 8008710:	65da      	str	r2, [r3, #92]	; 0x5c
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	4a0b      	ldr	r2, [pc, #44]	; (8008744 <prvInitialiseNewTask+0x148>)
 8008716:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	69b8      	ldr	r0, [r7, #24]
 800871e:	f001 fb15 	bl	8009d4c <pxPortInitialiseStack>
 8008722:	4602      	mov	r2, r0
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008734:	bf00      	nop
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	0800b12c 	.word	0x0800b12c
 8008740:	0800b14c 	.word	0x0800b14c
 8008744:	0800b10c 	.word	0x0800b10c

08008748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008750:	f001 fc28 	bl	8009fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008754:	4b2d      	ldr	r3, [pc, #180]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 800875c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800875e:	4b2c      	ldr	r3, [pc, #176]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008766:	4a2a      	ldr	r2, [pc, #168]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800876c:	4b27      	ldr	r3, [pc, #156]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d110      	bne.n	8008796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008774:	f000 fcc4 	bl	8009100 <prvInitialiseTaskLists>
 8008778:	e00d      	b.n	8008796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <prvAddNewTaskToReadyList+0xcc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008782:	4b23      	ldr	r3, [pc, #140]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d802      	bhi.n	8008796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008796:	4b20      	ldr	r3, [pc, #128]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3301      	adds	r3, #1
 800879c:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 800879e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087a0:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <prvAddNewTaskToReadyList+0xd4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d903      	bls.n	80087bc <prvAddNewTaskToReadyList+0x74>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	4a18      	ldr	r2, [pc, #96]	; (800881c <prvAddNewTaskToReadyList+0xd4>)
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <prvAddNewTaskToReadyList+0xd8>)
 80087ca:	441a      	add	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe fe21 	bl	800741a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087d8:	f001 fc14 	bl	800a004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <prvAddNewTaskToReadyList+0xcc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e4:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d207      	bcs.n	8008802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087f2:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <prvAddNewTaskToReadyList+0xdc>)
 80087f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20003960 	.word	0x20003960
 8008810:	2000348c 	.word	0x2000348c
 8008814:	2000396c 	.word	0x2000396c
 8008818:	2000397c 	.word	0x2000397c
 800881c:	20003968 	.word	0x20003968
 8008820:	20003490 	.word	0x20003490
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d017      	beq.n	800886a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <vTaskDelay+0x60>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <vTaskDelay+0x30>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60bb      	str	r3, [r7, #8]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008858:	f000 f88a 	bl	8008970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 feb2 	bl	80095c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008864:	f000 f892 	bl	800898c <xTaskResumeAll>
 8008868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d107      	bne.n	8008880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <vTaskDelay+0x64>)
 8008872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20003988 	.word	0x20003988
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800889e:	463a      	mov	r2, r7
 80088a0:	1d39      	adds	r1, r7, #4
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fb68 	bl	8006f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	9202      	str	r2, [sp, #8]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	460a      	mov	r2, r1
 80088be:	4924      	ldr	r1, [pc, #144]	; (8008950 <vTaskStartScheduler+0xc0>)
 80088c0:	4824      	ldr	r0, [pc, #144]	; (8008954 <vTaskStartScheduler+0xc4>)
 80088c2:	f7ff fdf9 	bl	80084b8 <xTaskCreateStatic>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a23      	ldr	r2, [pc, #140]	; (8008958 <vTaskStartScheduler+0xc8>)
 80088ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088cc:	4b22      	ldr	r3, [pc, #136]	; (8008958 <vTaskStartScheduler+0xc8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088d4:	2301      	movs	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e001      	b.n	80088de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d102      	bne.n	80088ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088e4:	f000 fec4 	bl	8009670 <xTimerCreateTimerTask>
 80088e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d11b      	bne.n	8008928 <vTaskStartScheduler+0x98>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008904:	4b15      	ldr	r3, [pc, #84]	; (800895c <vTaskStartScheduler+0xcc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3354      	adds	r3, #84	; 0x54
 800890a:	4a15      	ldr	r2, [pc, #84]	; (8008960 <vTaskStartScheduler+0xd0>)
 800890c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <vTaskStartScheduler+0xd4>)
 8008910:	f04f 32ff 	mov.w	r2, #4294967295
 8008914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008916:	4b14      	ldr	r3, [pc, #80]	; (8008968 <vTaskStartScheduler+0xd8>)
 8008918:	2201      	movs	r2, #1
 800891a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800891c:	4b13      	ldr	r3, [pc, #76]	; (800896c <vTaskStartScheduler+0xdc>)
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008922:	f001 fa9d 	bl	8009e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008926:	e00e      	b.n	8008946 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d10a      	bne.n	8008946 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <vTaskStartScheduler+0xb4>
}
 8008946:	bf00      	nop
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	0800b068 	.word	0x0800b068
 8008954:	080090d1 	.word	0x080090d1
 8008958:	20003984 	.word	0x20003984
 800895c:	2000348c 	.word	0x2000348c
 8008960:	20000014 	.word	0x20000014
 8008964:	20003980 	.word	0x20003980
 8008968:	2000396c 	.word	0x2000396c
 800896c:	20003964 	.word	0x20003964

08008970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008974:	4b04      	ldr	r3, [pc, #16]	; (8008988 <vTaskSuspendAll+0x18>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	4a03      	ldr	r2, [pc, #12]	; (8008988 <vTaskSuspendAll+0x18>)
 800897c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800897e:	bf00      	nop
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20003988 	.word	0x20003988

0800898c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800899a:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <xTaskResumeAll+0x118>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10a      	bne.n	80089b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	603b      	str	r3, [r7, #0]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089b8:	f001 faf4 	bl	8009fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089bc:	4b39      	ldr	r3, [pc, #228]	; (8008aa4 <xTaskResumeAll+0x118>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	4a38      	ldr	r2, [pc, #224]	; (8008aa4 <xTaskResumeAll+0x118>)
 80089c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c6:	4b37      	ldr	r3, [pc, #220]	; (8008aa4 <xTaskResumeAll+0x118>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d162      	bne.n	8008a94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089ce:	4b36      	ldr	r3, [pc, #216]	; (8008aa8 <xTaskResumeAll+0x11c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d05e      	beq.n	8008a94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d6:	e02f      	b.n	8008a38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	4b34      	ldr	r3, [pc, #208]	; (8008aac <xTaskResumeAll+0x120>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3318      	adds	r3, #24
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fe fd75 	bl	80074d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fd70 	bl	80074d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	4b2d      	ldr	r3, [pc, #180]	; (8008ab0 <xTaskResumeAll+0x124>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d903      	bls.n	8008a08 <xTaskResumeAll+0x7c>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <xTaskResumeAll+0x124>)
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4a27      	ldr	r2, [pc, #156]	; (8008ab4 <xTaskResumeAll+0x128>)
 8008a16:	441a      	add	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7fe fcfb 	bl	800741a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <xTaskResumeAll+0x12c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a32:	4b22      	ldr	r3, [pc, #136]	; (8008abc <xTaskResumeAll+0x130>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a38:	4b1c      	ldr	r3, [pc, #112]	; (8008aac <xTaskResumeAll+0x120>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1cb      	bne.n	80089d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a46:	f000 fbfd 	bl	8009244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a4a:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <xTaskResumeAll+0x134>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a56:	f000 f847 	bl	8008ae8 <xTaskIncrementTick>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <xTaskResumeAll+0x130>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f1      	bne.n	8008a56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <xTaskResumeAll+0x134>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a78:	4b10      	ldr	r3, [pc, #64]	; (8008abc <xTaskResumeAll+0x130>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <xTaskResumeAll+0x138>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a94:	f001 fab6 	bl	800a004 <vPortExitCritical>

	return xAlreadyYielded;
 8008a98:	68bb      	ldr	r3, [r7, #8]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20003988 	.word	0x20003988
 8008aa8:	20003960 	.word	0x20003960
 8008aac:	20003920 	.word	0x20003920
 8008ab0:	20003968 	.word	0x20003968
 8008ab4:	20003490 	.word	0x20003490
 8008ab8:	2000348c 	.word	0x2000348c
 8008abc:	20003974 	.word	0x20003974
 8008ac0:	20003970 	.word	0x20003970
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <xTaskGetTickCount+0x1c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ad4:	687b      	ldr	r3, [r7, #4]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20003964 	.word	0x20003964

08008ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af2:	4b4f      	ldr	r3, [pc, #316]	; (8008c30 <xTaskIncrementTick+0x148>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f040 808f 	bne.w	8008c1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008afc:	4b4d      	ldr	r3, [pc, #308]	; (8008c34 <xTaskIncrementTick+0x14c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b04:	4a4b      	ldr	r2, [pc, #300]	; (8008c34 <xTaskIncrementTick+0x14c>)
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d120      	bne.n	8008b52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b10:	4b49      	ldr	r3, [pc, #292]	; (8008c38 <xTaskIncrementTick+0x150>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	603b      	str	r3, [r7, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <xTaskIncrementTick+0x46>
 8008b30:	4b41      	ldr	r3, [pc, #260]	; (8008c38 <xTaskIncrementTick+0x150>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	4b41      	ldr	r3, [pc, #260]	; (8008c3c <xTaskIncrementTick+0x154>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a3f      	ldr	r2, [pc, #252]	; (8008c38 <xTaskIncrementTick+0x150>)
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	4a3f      	ldr	r2, [pc, #252]	; (8008c3c <xTaskIncrementTick+0x154>)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	4b3e      	ldr	r3, [pc, #248]	; (8008c40 <xTaskIncrementTick+0x158>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	4a3d      	ldr	r2, [pc, #244]	; (8008c40 <xTaskIncrementTick+0x158>)
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	f000 fb79 	bl	8009244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b52:	4b3c      	ldr	r3, [pc, #240]	; (8008c44 <xTaskIncrementTick+0x15c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d349      	bcc.n	8008bf0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b5c:	4b36      	ldr	r3, [pc, #216]	; (8008c38 <xTaskIncrementTick+0x150>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b66:	4b37      	ldr	r3, [pc, #220]	; (8008c44 <xTaskIncrementTick+0x15c>)
 8008b68:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6c:	601a      	str	r2, [r3, #0]
					break;
 8008b6e:	e03f      	b.n	8008bf0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b70:	4b31      	ldr	r3, [pc, #196]	; (8008c38 <xTaskIncrementTick+0x150>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d203      	bcs.n	8008b90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b88:	4a2e      	ldr	r2, [pc, #184]	; (8008c44 <xTaskIncrementTick+0x15c>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b8e:	e02f      	b.n	8008bf0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fc9d 	bl	80074d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3318      	adds	r3, #24
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fc94 	bl	80074d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	4b25      	ldr	r3, [pc, #148]	; (8008c48 <xTaskIncrementTick+0x160>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d903      	bls.n	8008bc0 <xTaskIncrementTick+0xd8>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	4a22      	ldr	r2, [pc, #136]	; (8008c48 <xTaskIncrementTick+0x160>)
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4a1f      	ldr	r2, [pc, #124]	; (8008c4c <xTaskIncrementTick+0x164>)
 8008bce:	441a      	add	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7fe fc1f 	bl	800741a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <xTaskIncrementTick+0x168>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3b8      	bcc.n	8008b5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bea:	2301      	movs	r3, #1
 8008bec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bee:	e7b5      	b.n	8008b5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bf0:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <xTaskIncrementTick+0x168>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4915      	ldr	r1, [pc, #84]	; (8008c4c <xTaskIncrementTick+0x164>)
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	440b      	add	r3, r1
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d901      	bls.n	8008c0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c0c:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <xTaskIncrementTick+0x16c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d007      	beq.n	8008c24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	e004      	b.n	8008c24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <xTaskIncrementTick+0x170>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <xTaskIncrementTick+0x170>)
 8008c22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c24:	697b      	ldr	r3, [r7, #20]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20003988 	.word	0x20003988
 8008c34:	20003964 	.word	0x20003964
 8008c38:	20003918 	.word	0x20003918
 8008c3c:	2000391c 	.word	0x2000391c
 8008c40:	20003978 	.word	0x20003978
 8008c44:	20003980 	.word	0x20003980
 8008c48:	20003968 	.word	0x20003968
 8008c4c:	20003490 	.word	0x20003490
 8008c50:	2000348c 	.word	0x2000348c
 8008c54:	20003974 	.word	0x20003974
 8008c58:	20003970 	.word	0x20003970

08008c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <vTaskSwitchContext+0xb0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c6a:	4b29      	ldr	r3, [pc, #164]	; (8008d10 <vTaskSwitchContext+0xb4>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c70:	e046      	b.n	8008d00 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c72:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <vTaskSwitchContext+0xb4>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	4b26      	ldr	r3, [pc, #152]	; (8008d14 <vTaskSwitchContext+0xb8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e010      	b.n	8008ca2 <vTaskSwitchContext+0x46>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <vTaskSwitchContext+0x40>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	607b      	str	r3, [r7, #4]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <vTaskSwitchContext+0x3e>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	491d      	ldr	r1, [pc, #116]	; (8008d18 <vTaskSwitchContext+0xbc>)
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0e4      	beq.n	8008c80 <vTaskSwitchContext+0x24>
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <vTaskSwitchContext+0xbc>)
 8008cc2:	4413      	add	r3, r2
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	605a      	str	r2, [r3, #4]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d104      	bne.n	8008ce6 <vTaskSwitchContext+0x8a>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	4a0b      	ldr	r2, [pc, #44]	; (8008d1c <vTaskSwitchContext+0xc0>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	4a08      	ldr	r2, [pc, #32]	; (8008d14 <vTaskSwitchContext+0xb8>)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <vTaskSwitchContext+0xc0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3354      	adds	r3, #84	; 0x54
 8008cfc:	4a08      	ldr	r2, [pc, #32]	; (8008d20 <vTaskSwitchContext+0xc4>)
 8008cfe:	6013      	str	r3, [r2, #0]
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20003988 	.word	0x20003988
 8008d10:	20003974 	.word	0x20003974
 8008d14:	20003968 	.word	0x20003968
 8008d18:	20003490 	.word	0x20003490
 8008d1c:	2000348c 	.word	0x2000348c
 8008d20:	20000014 	.word	0x20000014

08008d24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	60fb      	str	r3, [r7, #12]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <vTaskPlaceOnEventList+0x44>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3318      	adds	r3, #24
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fe fb85 	bl	8007462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d58:	2101      	movs	r1, #1
 8008d5a:	6838      	ldr	r0, [r7, #0]
 8008d5c:	f000 fc34 	bl	80095c8 <prvAddCurrentTaskToDelayedList>
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000348c 	.word	0x2000348c

08008d6c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	617b      	str	r3, [r7, #20]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <vTaskPlaceOnUnorderedEventList+0x70>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	613b      	str	r3, [r7, #16]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008db2:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008dbc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3318      	adds	r3, #24
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7fe fb27 	bl	800741a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008dcc:	2101      	movs	r1, #1
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fbfa 	bl	80095c8 <prvAddCurrentTaskToDelayedList>
}
 8008dd4:	bf00      	nop
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20003988 	.word	0x20003988
 8008de0:	2000348c 	.word	0x2000348c

08008de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	617b      	str	r3, [r7, #20]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3318      	adds	r3, #24
 8008e12:	4619      	mov	r1, r3
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7fe fb00 	bl	800741a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	68b8      	ldr	r0, [r7, #8]
 8008e2a:	f000 fbcd 	bl	80095c8 <prvAddCurrentTaskToDelayedList>
	}
 8008e2e:	bf00      	nop
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	2000348c 	.word	0x2000348c

08008e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60fb      	str	r3, [r7, #12]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3318      	adds	r3, #24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fb31 	bl	80074d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e72:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <xTaskRemoveFromEventList+0xb0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d11d      	bne.n	8008eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fb28 	bl	80074d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e88:	4b19      	ldr	r3, [pc, #100]	; (8008ef0 <xTaskRemoveFromEventList+0xb4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d903      	bls.n	8008e98 <xTaskRemoveFromEventList+0x5c>
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <xTaskRemoveFromEventList+0xb4>)
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4a13      	ldr	r2, [pc, #76]	; (8008ef4 <xTaskRemoveFromEventList+0xb8>)
 8008ea6:	441a      	add	r2, r3
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	4619      	mov	r1, r3
 8008eae:	4610      	mov	r0, r2
 8008eb0:	f7fe fab3 	bl	800741a <vListInsertEnd>
 8008eb4:	e005      	b.n	8008ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	3318      	adds	r3, #24
 8008eba:	4619      	mov	r1, r3
 8008ebc:	480e      	ldr	r0, [pc, #56]	; (8008ef8 <xTaskRemoveFromEventList+0xbc>)
 8008ebe:	f7fe faac 	bl	800741a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <xTaskRemoveFromEventList+0xc0>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d905      	bls.n	8008edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <xTaskRemoveFromEventList+0xc4>)
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e001      	b.n	8008ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ee0:	697b      	ldr	r3, [r7, #20]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20003988 	.word	0x20003988
 8008ef0:	20003968 	.word	0x20003968
 8008ef4:	20003490 	.word	0x20003490
 8008ef8:	20003920 	.word	0x20003920
 8008efc:	2000348c 	.word	0x2000348c
 8008f00:	20003974 	.word	0x20003974

08008f04 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	613b      	str	r3, [r7, #16]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60fb      	str	r3, [r7, #12]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fe fabb 	bl	80074d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	3304      	adds	r3, #4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fab6 	bl	80074d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d903      	bls.n	8008f7c <vTaskRemoveFromUnorderedEventList+0x78>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a0f      	ldr	r2, [pc, #60]	; (8008fb8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008f8a:	441a      	add	r2, r3
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fe fa41 	bl	800741a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d902      	bls.n	8008fac <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
	}
}
 8008fac:	bf00      	nop
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20003988 	.word	0x20003988
 8008fb8:	20003968 	.word	0x20003968
 8008fbc:	20003490 	.word	0x20003490
 8008fc0:	2000348c 	.word	0x2000348c
 8008fc4:	20003974 	.word	0x20003974

08008fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <vTaskInternalSetTimeOutState+0x24>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <vTaskInternalSetTimeOutState+0x28>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	20003978 	.word	0x20003978
 8008ff0:	20003964 	.word	0x20003964

08008ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	613b      	str	r3, [r7, #16]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009036:	f000 ffb5 	bl	8009fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <xTaskCheckForTimeOut+0xbc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d102      	bne.n	800905a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e023      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <xTaskCheckForTimeOut+0xc0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d007      	beq.n	8009076 <xTaskCheckForTimeOut+0x82>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	429a      	cmp	r2, r3
 800906e:	d302      	bcc.n	8009076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009070:	2301      	movs	r3, #1
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	e015      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	429a      	cmp	r2, r3
 800907e:	d20b      	bcs.n	8009098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	1ad2      	subs	r2, r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ff9b 	bl	8008fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e004      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090a2:	f000 ffaf 	bl	800a004 <vPortExitCritical>

	return xReturn;
 80090a6:	69fb      	ldr	r3, [r7, #28]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20003964 	.word	0x20003964
 80090b4:	20003978 	.word	0x20003978

080090b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090bc:	4b03      	ldr	r3, [pc, #12]	; (80090cc <vTaskMissedYield+0x14>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
}
 80090c2:	bf00      	nop
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20003974 	.word	0x20003974

080090d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090d8:	f000 f852 	bl	8009180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <prvIdleTask+0x28>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d9f9      	bls.n	80090d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <prvIdleTask+0x2c>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090f4:	e7f0      	b.n	80090d8 <prvIdleTask+0x8>
 80090f6:	bf00      	nop
 80090f8:	20003490 	.word	0x20003490
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009106:	2300      	movs	r3, #0
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	e00c      	b.n	8009126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4a12      	ldr	r2, [pc, #72]	; (8009160 <prvInitialiseTaskLists+0x60>)
 8009118:	4413      	add	r3, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe f950 	bl	80073c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3301      	adds	r3, #1
 8009124:	607b      	str	r3, [r7, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b37      	cmp	r3, #55	; 0x37
 800912a:	d9ef      	bls.n	800910c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800912c:	480d      	ldr	r0, [pc, #52]	; (8009164 <prvInitialiseTaskLists+0x64>)
 800912e:	f7fe f947 	bl	80073c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009132:	480d      	ldr	r0, [pc, #52]	; (8009168 <prvInitialiseTaskLists+0x68>)
 8009134:	f7fe f944 	bl	80073c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009138:	480c      	ldr	r0, [pc, #48]	; (800916c <prvInitialiseTaskLists+0x6c>)
 800913a:	f7fe f941 	bl	80073c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800913e:	480c      	ldr	r0, [pc, #48]	; (8009170 <prvInitialiseTaskLists+0x70>)
 8009140:	f7fe f93e 	bl	80073c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009144:	480b      	ldr	r0, [pc, #44]	; (8009174 <prvInitialiseTaskLists+0x74>)
 8009146:	f7fe f93b 	bl	80073c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <prvInitialiseTaskLists+0x78>)
 800914c:	4a05      	ldr	r2, [pc, #20]	; (8009164 <prvInitialiseTaskLists+0x64>)
 800914e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <prvInitialiseTaskLists+0x7c>)
 8009152:	4a05      	ldr	r2, [pc, #20]	; (8009168 <prvInitialiseTaskLists+0x68>)
 8009154:	601a      	str	r2, [r3, #0]
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20003490 	.word	0x20003490
 8009164:	200038f0 	.word	0x200038f0
 8009168:	20003904 	.word	0x20003904
 800916c:	20003920 	.word	0x20003920
 8009170:	20003934 	.word	0x20003934
 8009174:	2000394c 	.word	0x2000394c
 8009178:	20003918 	.word	0x20003918
 800917c:	2000391c 	.word	0x2000391c

08009180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009186:	e019      	b.n	80091bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009188:	f000 ff0c 	bl	8009fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <prvCheckTasksWaitingTermination+0x50>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe f99b 	bl	80074d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <prvCheckTasksWaitingTermination+0x54>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	4a0b      	ldr	r2, [pc, #44]	; (80091d4 <prvCheckTasksWaitingTermination+0x54>)
 80091a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091b2:	f000 ff27 	bl	800a004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f810 	bl	80091dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e1      	bne.n	8009188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20003934 	.word	0x20003934
 80091d4:	20003960 	.word	0x20003960
 80091d8:	20003948 	.word	0x20003948

080091dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3354      	adds	r3, #84	; 0x54
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 facb 	bl	800a784 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d108      	bne.n	800920a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f8bf 	bl	800a380 <vPortFree>
				vPortFree( pxTCB );
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 f8bc 	bl	800a380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009208:	e018      	b.n	800923c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009210:	2b01      	cmp	r3, #1
 8009212:	d103      	bne.n	800921c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 f8b3 	bl	800a380 <vPortFree>
	}
 800921a:	e00f      	b.n	800923c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009222:	2b02      	cmp	r3, #2
 8009224:	d00a      	beq.n	800923c <prvDeleteTCB+0x60>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	60fb      	str	r3, [r7, #12]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <prvDeleteTCB+0x5e>
	}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800924a:	4b0c      	ldr	r3, [pc, #48]	; (800927c <prvResetNextTaskUnblockTime+0x38>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d104      	bne.n	800925e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <prvResetNextTaskUnblockTime+0x3c>)
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800925c:	e008      	b.n	8009270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <prvResetNextTaskUnblockTime+0x38>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	4a04      	ldr	r2, [pc, #16]	; (8009280 <prvResetNextTaskUnblockTime+0x3c>)
 800926e:	6013      	str	r3, [r2, #0]
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20003918 	.word	0x20003918
 8009280:	20003980 	.word	0x20003980

08009284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800928a:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <xTaskGetSchedulerState+0x34>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d102      	bne.n	8009298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009292:	2301      	movs	r3, #1
 8009294:	607b      	str	r3, [r7, #4]
 8009296:	e008      	b.n	80092aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009298:	4b08      	ldr	r3, [pc, #32]	; (80092bc <xTaskGetSchedulerState+0x38>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092a0:	2302      	movs	r3, #2
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	e001      	b.n	80092aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092aa:	687b      	ldr	r3, [r7, #4]
	}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	2000396c 	.word	0x2000396c
 80092bc:	20003988 	.word	0x20003988

080092c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d051      	beq.n	800937a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <xTaskPriorityInherit+0xc4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d241      	bcs.n	8009368 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db06      	blt.n	80092fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ec:	4b25      	ldr	r3, [pc, #148]	; (8009384 <xTaskPriorityInherit+0xc4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6959      	ldr	r1, [r3, #20]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4a1f      	ldr	r2, [pc, #124]	; (8009388 <xTaskPriorityInherit+0xc8>)
 800930c:	4413      	add	r3, r2
 800930e:	4299      	cmp	r1, r3
 8009310:	d122      	bne.n	8009358 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f8dc 	bl	80074d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <xTaskPriorityInherit+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	4b18      	ldr	r3, [pc, #96]	; (800938c <xTaskPriorityInherit+0xcc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	429a      	cmp	r2, r3
 8009330:	d903      	bls.n	800933a <xTaskPriorityInherit+0x7a>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	4a15      	ldr	r2, [pc, #84]	; (800938c <xTaskPriorityInherit+0xcc>)
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	4613      	mov	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4a10      	ldr	r2, [pc, #64]	; (8009388 <xTaskPriorityInherit+0xc8>)
 8009348:	441a      	add	r2, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	3304      	adds	r3, #4
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f7fe f862 	bl	800741a <vListInsertEnd>
 8009356:	e004      	b.n	8009362 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <xTaskPriorityInherit+0xc4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009362:	2301      	movs	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e008      	b.n	800937a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <xTaskPriorityInherit+0xc4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009372:	429a      	cmp	r2, r3
 8009374:	d201      	bcs.n	800937a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009376:	2301      	movs	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800937a:	68fb      	ldr	r3, [r7, #12]
	}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	2000348c 	.word	0x2000348c
 8009388:	20003490 	.word	0x20003490
 800938c:	20003968 	.word	0x20003968

08009390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d056      	beq.n	8009454 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093a6:	4b2e      	ldr	r3, [pc, #184]	; (8009460 <xTaskPriorityDisinherit+0xd0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d00a      	beq.n	80093c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60bb      	str	r3, [r7, #8]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e8:	1e5a      	subs	r2, r3, #1
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d02c      	beq.n	8009454 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d128      	bne.n	8009454 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	3304      	adds	r3, #4
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe f864 	bl	80074d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <xTaskPriorityDisinherit+0xd4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d903      	bls.n	8009434 <xTaskPriorityDisinherit+0xa4>
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <xTaskPriorityDisinherit+0xd4>)
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4a09      	ldr	r2, [pc, #36]	; (8009468 <xTaskPriorityDisinherit+0xd8>)
 8009442:	441a      	add	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f7fd ffe5 	bl	800741a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009450:	2301      	movs	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009454:	697b      	ldr	r3, [r7, #20]
	}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000348c 	.word	0x2000348c
 8009464:	20003968 	.word	0x20003968
 8009468:	20003490 	.word	0x20003490

0800946c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800947a:	2301      	movs	r3, #1
 800947c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d06a      	beq.n	800955a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d902      	bls.n	80094b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e002      	b.n	80094b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d04b      	beq.n	800955a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d146      	bne.n	800955a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094cc:	4b25      	ldr	r3, [pc, #148]	; (8009564 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d10a      	bne.n	80094ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60bb      	str	r3, [r7, #8]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	db04      	blt.n	800950a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6959      	ldr	r1, [r3, #20]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a13      	ldr	r2, [pc, #76]	; (8009568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800951a:	4413      	add	r3, r2
 800951c:	4299      	cmp	r1, r3
 800951e:	d11c      	bne.n	800955a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	3304      	adds	r3, #4
 8009524:	4618      	mov	r0, r3
 8009526:	f7fd ffd5 	bl	80074d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d903      	bls.n	800953e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	4a0c      	ldr	r2, [pc, #48]	; (800956c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4a07      	ldr	r2, [pc, #28]	; (8009568 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800954c:	441a      	add	r2, r3
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fd ff60 	bl	800741a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800955a:	bf00      	nop
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	2000348c 	.word	0x2000348c
 8009568:	20003490 	.word	0x20003490
 800956c:	20003968 	.word	0x20003968

08009570 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009576:	4b09      	ldr	r3, [pc, #36]	; (800959c <uxTaskResetEventItemValue+0x2c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <uxTaskResetEventItemValue+0x2c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <uxTaskResetEventItemValue+0x2c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800958c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800958e:	687b      	ldr	r3, [r7, #4]
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	2000348c 	.word	0x2000348c

080095a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80095a4:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095b2:	3201      	adds	r2, #1
 80095b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80095b6:	4b03      	ldr	r3, [pc, #12]	; (80095c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80095b8:	681b      	ldr	r3, [r3, #0]
	}
 80095ba:	4618      	mov	r0, r3
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	2000348c 	.word	0x2000348c

080095c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095d2:	4b21      	ldr	r3, [pc, #132]	; (8009658 <prvAddCurrentTaskToDelayedList+0x90>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d8:	4b20      	ldr	r3, [pc, #128]	; (800965c <prvAddCurrentTaskToDelayedList+0x94>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3304      	adds	r3, #4
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd ff78 	bl	80074d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ea:	d10a      	bne.n	8009602 <prvAddCurrentTaskToDelayedList+0x3a>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f2:	4b1a      	ldr	r3, [pc, #104]	; (800965c <prvAddCurrentTaskToDelayedList+0x94>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	4819      	ldr	r0, [pc, #100]	; (8009660 <prvAddCurrentTaskToDelayedList+0x98>)
 80095fc:	f7fd ff0d 	bl	800741a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009600:	e026      	b.n	8009650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800960a:	4b14      	ldr	r3, [pc, #80]	; (800965c <prvAddCurrentTaskToDelayedList+0x94>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d209      	bcs.n	800962e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <prvAddCurrentTaskToDelayedList+0x94>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3304      	adds	r3, #4
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fd ff1b 	bl	8007462 <vListInsert>
}
 800962c:	e010      	b.n	8009650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800962e:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <prvAddCurrentTaskToDelayedList+0x94>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fd ff11 	bl	8007462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	429a      	cmp	r2, r3
 8009648:	d202      	bcs.n	8009650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800964a:	4a08      	ldr	r2, [pc, #32]	; (800966c <prvAddCurrentTaskToDelayedList+0xa4>)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6013      	str	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20003964 	.word	0x20003964
 800965c:	2000348c 	.word	0x2000348c
 8009660:	2000394c 	.word	0x2000394c
 8009664:	2000391c 	.word	0x2000391c
 8009668:	20003918 	.word	0x20003918
 800966c:	20003980 	.word	0x20003980

08009670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	; 0x28
 8009674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800967a:	f000 fb07 	bl	8009c8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800967e:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <xTimerCreateTimerTask+0x80>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d021      	beq.n	80096ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800968e:	1d3a      	adds	r2, r7, #4
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	f107 030c 	add.w	r3, r7, #12
 8009698:	4618      	mov	r0, r3
 800969a:	f7fd fc89 	bl	8006fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	9202      	str	r2, [sp, #8]
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	2302      	movs	r3, #2
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	460a      	mov	r2, r1
 80096b0:	4910      	ldr	r1, [pc, #64]	; (80096f4 <xTimerCreateTimerTask+0x84>)
 80096b2:	4811      	ldr	r0, [pc, #68]	; (80096f8 <xTimerCreateTimerTask+0x88>)
 80096b4:	f7fe ff00 	bl	80084b8 <xTaskCreateStatic>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4a10      	ldr	r2, [pc, #64]	; (80096fc <xTimerCreateTimerTask+0x8c>)
 80096bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <xTimerCreateTimerTask+0x8c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096c6:	2301      	movs	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096e6:	697b      	ldr	r3, [r7, #20]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200039bc 	.word	0x200039bc
 80096f4:	0800b070 	.word	0x0800b070
 80096f8:	08009835 	.word	0x08009835
 80096fc:	200039c0 	.word	0x200039c0

08009700 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800970e:	2300      	movs	r3, #0
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	623b      	str	r3, [r7, #32]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800972e:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <xTimerGenericCommand+0x98>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d02a      	beq.n	800978c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b05      	cmp	r3, #5
 8009746:	dc18      	bgt.n	800977a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009748:	f7ff fd9c 	bl	8009284 <xTaskGetSchedulerState>
 800974c:	4603      	mov	r3, r0
 800974e:	2b02      	cmp	r3, #2
 8009750:	d109      	bne.n	8009766 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009752:	4b11      	ldr	r3, [pc, #68]	; (8009798 <xTimerGenericCommand+0x98>)
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f107 0110 	add.w	r1, r7, #16
 800975a:	2300      	movs	r3, #0
 800975c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800975e:	f7fe f857 	bl	8007810 <xQueueGenericSend>
 8009762:	6278      	str	r0, [r7, #36]	; 0x24
 8009764:	e012      	b.n	800978c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <xTimerGenericCommand+0x98>)
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f107 0110 	add.w	r1, r7, #16
 800976e:	2300      	movs	r3, #0
 8009770:	2200      	movs	r2, #0
 8009772:	f7fe f84d 	bl	8007810 <xQueueGenericSend>
 8009776:	6278      	str	r0, [r7, #36]	; 0x24
 8009778:	e008      	b.n	800978c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <xTimerGenericCommand+0x98>)
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f107 0110 	add.w	r1, r7, #16
 8009782:	2300      	movs	r3, #0
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	f7fe f941 	bl	8007a0c <xQueueGenericSendFromISR>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800978e:	4618      	mov	r0, r3
 8009790:	3728      	adds	r7, #40	; 0x28
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200039bc 	.word	0x200039bc

0800979c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a6:	4b22      	ldr	r3, [pc, #136]	; (8009830 <prvProcessExpiredTimer+0x94>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3304      	adds	r3, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fd fe8d 	bl	80074d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d022      	beq.n	800980e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	18d1      	adds	r1, r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	f000 f8d1 	bl	800997c <prvInsertTimerInActiveList>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01f      	beq.n	8009820 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097e0:	2300      	movs	r3, #0
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	2100      	movs	r1, #0
 80097ea:	6978      	ldr	r0, [r7, #20]
 80097ec:	f7ff ff88 	bl	8009700 <xTimerGenericCommand>
 80097f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d113      	bne.n	8009820 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60fb      	str	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	b2da      	uxtb	r2, r3
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	6978      	ldr	r0, [r7, #20]
 8009826:	4798      	blx	r3
}
 8009828:	bf00      	nop
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200039b4 	.word	0x200039b4

08009834 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f857 	bl	80098f4 <prvGetNextExpireTime>
 8009846:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	4619      	mov	r1, r3
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f803 	bl	8009858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009852:	f000 f8d5 	bl	8009a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009856:	e7f1      	b.n	800983c <prvTimerTask+0x8>

08009858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009862:	f7ff f885 	bl	8008970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009866:	f107 0308 	add.w	r3, r7, #8
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f866 	bl	800993c <prvSampleTimeNow>
 8009870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d130      	bne.n	80098da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <prvProcessTimerOrBlockTask+0x3c>
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	429a      	cmp	r2, r3
 8009884:	d806      	bhi.n	8009894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009886:	f7ff f881 	bl	800898c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7ff ff85 	bl	800979c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009892:	e024      	b.n	80098de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <prvProcessTimerOrBlockTask+0x90>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <prvProcessTimerOrBlockTask+0x50>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e000      	b.n	80098aa <prvProcessTimerOrBlockTask+0x52>
 80098a8:	2300      	movs	r3, #0
 80098aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098ac:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <prvProcessTimerOrBlockTask+0x94>)
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7fe fdc9 	bl	8008450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098be:	f7ff f865 	bl	800898c <xTaskResumeAll>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098c8:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <prvProcessTimerOrBlockTask+0x98>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
}
 80098d8:	e001      	b.n	80098de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098da:	f7ff f857 	bl	800898c <xTaskResumeAll>
}
 80098de:	bf00      	nop
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	200039b8 	.word	0x200039b8
 80098ec:	200039bc 	.word	0x200039bc
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098fc:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <prvGetNextExpireTime+0x44>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <prvGetNextExpireTime+0x16>
 8009906:	2201      	movs	r2, #1
 8009908:	e000      	b.n	800990c <prvGetNextExpireTime+0x18>
 800990a:	2200      	movs	r2, #0
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d105      	bne.n	8009924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009918:	4b07      	ldr	r3, [pc, #28]	; (8009938 <prvGetNextExpireTime+0x44>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]
 8009922:	e001      	b.n	8009928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009928:	68fb      	ldr	r3, [r7, #12]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	200039b4 	.word	0x200039b4

0800993c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009944:	f7ff f8c0 	bl	8008ac8 <xTaskGetTickCount>
 8009948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800994a:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <prvSampleTimeNow+0x3c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d205      	bcs.n	8009960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009954:	f000 f936 	bl	8009bc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e002      	b.n	8009966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009966:	4a04      	ldr	r2, [pc, #16]	; (8009978 <prvSampleTimeNow+0x3c>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800996c:	68fb      	ldr	r3, [r7, #12]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200039c4 	.word	0x200039c4

0800997c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d812      	bhi.n	80099c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d302      	bcc.n	80099b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e01b      	b.n	80099ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099b6:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <prvInsertTimerInActiveList+0x7c>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3304      	adds	r3, #4
 80099be:	4619      	mov	r1, r3
 80099c0:	4610      	mov	r0, r2
 80099c2:	f7fd fd4e 	bl	8007462 <vListInsert>
 80099c6:	e012      	b.n	80099ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d206      	bcs.n	80099de <prvInsertTimerInActiveList+0x62>
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d302      	bcc.n	80099de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	e007      	b.n	80099ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099de:	4b07      	ldr	r3, [pc, #28]	; (80099fc <prvInsertTimerInActiveList+0x80>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3304      	adds	r3, #4
 80099e6:	4619      	mov	r1, r3
 80099e8:	4610      	mov	r0, r2
 80099ea:	f7fd fd3a 	bl	8007462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099ee:	697b      	ldr	r3, [r7, #20]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200039b8 	.word	0x200039b8
 80099fc:	200039b4 	.word	0x200039b4

08009a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a06:	e0ca      	b.n	8009b9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	da18      	bge.n	8009a40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	3304      	adds	r3, #4
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10a      	bne.n	8009a30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	61fb      	str	r3, [r7, #28]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a36:	6850      	ldr	r0, [r2, #4]
 8009a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a3a:	6892      	ldr	r2, [r2, #8]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f2c0 80aa 	blt.w	8009b9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	3304      	adds	r3, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fd fd3b 	bl	80074d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a5e:	463b      	mov	r3, r7
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ff6b 	bl	800993c <prvSampleTimeNow>
 8009a66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	f200 8097 	bhi.w	8009b9e <prvProcessReceivedCommands+0x19e>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <prvProcessReceivedCommands+0x78>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009aa1 	.word	0x08009aa1
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b73 	.word	0x08009b73
 8009a90:	08009aa1 	.word	0x08009aa1
 8009a94:	08009aa1 	.word	0x08009aa1
 8009a98:	08009b15 	.word	0x08009b15
 8009a9c:	08009b29 	.word	0x08009b29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	18d1      	adds	r1, r2, r3
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac0:	f7ff ff5c 	bl	800997c <prvInsertTimerInActiveList>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d069      	beq.n	8009b9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d05e      	beq.n	8009b9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	441a      	add	r2, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	2300      	movs	r3, #0
 8009aee:	2100      	movs	r1, #0
 8009af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af2:	f7ff fe05 	bl	8009700 <xTimerGenericCommand>
 8009af6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d14f      	bne.n	8009b9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	61bb      	str	r3, [r7, #24]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b1a:	f023 0301 	bic.w	r3, r3, #1
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b26:	e03a      	b.n	8009b9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	617b      	str	r3, [r7, #20]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	18d1      	adds	r1, r2, r3
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6c:	f7ff ff06 	bl	800997c <prvInsertTimerInActiveList>
					break;
 8009b70:	e015      	b.n	8009b9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b82:	f000 fbfd 	bl	800a380 <vPortFree>
 8009b86:	e00a      	b.n	8009b9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b8e:	f023 0301 	bic.w	r3, r3, #1
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b9a:	e000      	b.n	8009b9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <prvProcessReceivedCommands+0x1c0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	1d39      	adds	r1, r7, #4
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe f858 	bl	8007c5c <xQueueReceive>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f47f af2a 	bne.w	8009a08 <prvProcessReceivedCommands+0x8>
	}
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	3730      	adds	r7, #48	; 0x30
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200039bc 	.word	0x200039bc

08009bc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bca:	e048      	b.n	8009c5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bcc:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd6:	4b2b      	ldr	r3, [pc, #172]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fd fc75 	bl	80074d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf8:	f003 0304 	and.w	r3, r3, #4
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d02e      	beq.n	8009c5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4413      	add	r3, r2
 8009c08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d90e      	bls.n	8009c30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c1e:	4b19      	ldr	r3, [pc, #100]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3304      	adds	r3, #4
 8009c26:	4619      	mov	r1, r3
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f7fd fc1a 	bl	8007462 <vListInsert>
 8009c2e:	e016      	b.n	8009c5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c30:	2300      	movs	r3, #0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	2300      	movs	r3, #0
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff fd60 	bl	8009700 <xTimerGenericCommand>
 8009c40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	603b      	str	r3, [r7, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	e7fe      	b.n	8009c5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1b1      	bne.n	8009bcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c6e:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <prvSwitchTimerLists+0xc4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <prvSwitchTimerLists+0xc0>)
 8009c74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c76:	4a04      	ldr	r2, [pc, #16]	; (8009c88 <prvSwitchTimerLists+0xc4>)
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6013      	str	r3, [r2, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	200039b4 	.word	0x200039b4
 8009c88:	200039b8 	.word	0x200039b8

08009c8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c92:	f000 f987 	bl	8009fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c96:	4b15      	ldr	r3, [pc, #84]	; (8009cec <prvCheckForValidListAndQueue+0x60>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d120      	bne.n	8009ce0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c9e:	4814      	ldr	r0, [pc, #80]	; (8009cf0 <prvCheckForValidListAndQueue+0x64>)
 8009ca0:	f7fd fb8e 	bl	80073c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ca4:	4813      	ldr	r0, [pc, #76]	; (8009cf4 <prvCheckForValidListAndQueue+0x68>)
 8009ca6:	f7fd fb8b 	bl	80073c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <prvCheckForValidListAndQueue+0x6c>)
 8009cac:	4a10      	ldr	r2, [pc, #64]	; (8009cf0 <prvCheckForValidListAndQueue+0x64>)
 8009cae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cb0:	4b12      	ldr	r3, [pc, #72]	; (8009cfc <prvCheckForValidListAndQueue+0x70>)
 8009cb2:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <prvCheckForValidListAndQueue+0x68>)
 8009cb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <prvCheckForValidListAndQueue+0x74>)
 8009cbc:	4a11      	ldr	r2, [pc, #68]	; (8009d04 <prvCheckForValidListAndQueue+0x78>)
 8009cbe:	2110      	movs	r1, #16
 8009cc0:	200a      	movs	r0, #10
 8009cc2:	f7fd fc99 	bl	80075f8 <xQueueGenericCreateStatic>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4a08      	ldr	r2, [pc, #32]	; (8009cec <prvCheckForValidListAndQueue+0x60>)
 8009cca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ccc:	4b07      	ldr	r3, [pc, #28]	; (8009cec <prvCheckForValidListAndQueue+0x60>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <prvCheckForValidListAndQueue+0x60>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	490b      	ldr	r1, [pc, #44]	; (8009d08 <prvCheckForValidListAndQueue+0x7c>)
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe fb8e 	bl	80083fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ce0:	f000 f990 	bl	800a004 <vPortExitCritical>
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	200039bc 	.word	0x200039bc
 8009cf0:	2000398c 	.word	0x2000398c
 8009cf4:	200039a0 	.word	0x200039a0
 8009cf8:	200039b4 	.word	0x200039b4
 8009cfc:	200039b8 	.word	0x200039b8
 8009d00:	20003a68 	.word	0x20003a68
 8009d04:	200039c8 	.word	0x200039c8
 8009d08:	0800b078 	.word	0x0800b078

08009d0c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	; 0x28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009d1a:	f06f 0301 	mvn.w	r3, #1
 8009d1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <xTimerPendFunctionCallFromISR+0x3c>)
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	f107 0114 	add.w	r1, r7, #20
 8009d34:	2300      	movs	r3, #0
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	f7fd fe68 	bl	8007a0c <xQueueGenericSendFromISR>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3728      	adds	r7, #40	; 0x28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	200039bc 	.word	0x200039bc

08009d4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3b04      	subs	r3, #4
 8009d5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f023 0201 	bic.w	r2, r3, #1
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3b04      	subs	r3, #4
 8009d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d7c:	4a0c      	ldr	r2, [pc, #48]	; (8009db0 <pxPortInitialiseStack+0x64>)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b14      	subs	r3, #20
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3b04      	subs	r3, #4
 8009d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f06f 0202 	mvn.w	r2, #2
 8009d9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3b20      	subs	r3, #32
 8009da0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009da2:	68fb      	ldr	r3, [r7, #12]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	08009db5 	.word	0x08009db5

08009db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <prvTaskExitError+0x54>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d00a      	beq.n	8009dde <prvTaskExitError+0x2a>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <prvTaskExitError+0x28>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	60bb      	str	r3, [r7, #8]
}
 8009df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009df2:	bf00      	nop
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0fc      	beq.n	8009df4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	20000010 	.word	0x20000010
 8009e0c:	00000000 	.word	0x00000000

08009e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <pxCurrentTCBConst2>)
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	6808      	ldr	r0, [r1, #0]
 8009e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	f380 8809 	msr	PSP, r0
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8811 	msr	BASEPRI, r0
 8009e2a:	4770      	bx	lr
 8009e2c:	f3af 8000 	nop.w

08009e30 <pxCurrentTCBConst2>:
 8009e30:	2000348c 	.word	0x2000348c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e38:	4808      	ldr	r0, [pc, #32]	; (8009e5c <prvPortStartFirstTask+0x24>)
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	6800      	ldr	r0, [r0, #0]
 8009e3e:	f380 8808 	msr	MSP, r0
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8814 	msr	CONTROL, r0
 8009e4a:	b662      	cpsie	i
 8009e4c:	b661      	cpsie	f
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	df00      	svc	0
 8009e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e5a:	bf00      	nop
 8009e5c:	e000ed08 	.word	0xe000ed08

08009e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e66:	4b46      	ldr	r3, [pc, #280]	; (8009f80 <xPortStartScheduler+0x120>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a46      	ldr	r2, [pc, #280]	; (8009f84 <xPortStartScheduler+0x124>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d10a      	bne.n	8009e86 <xPortStartScheduler+0x26>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	613b      	str	r3, [r7, #16]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e86:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <xPortStartScheduler+0x120>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <xPortStartScheduler+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10a      	bne.n	8009ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ea6:	4b39      	ldr	r3, [pc, #228]	; (8009f8c <xPortStartScheduler+0x12c>)
 8009ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	22ff      	movs	r2, #255	; 0xff
 8009eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	4b31      	ldr	r3, [pc, #196]	; (8009f90 <xPortStartScheduler+0x130>)
 8009ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ece:	4b31      	ldr	r3, [pc, #196]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ed4:	e009      	b.n	8009eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ed6:	4b2f      	ldr	r3, [pc, #188]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	4a2d      	ldr	r2, [pc, #180]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef2:	2b80      	cmp	r3, #128	; 0x80
 8009ef4:	d0ef      	beq.n	8009ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ef6:	4b27      	ldr	r3, [pc, #156]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1c3 0307 	rsb	r3, r3, #7
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d00a      	beq.n	8009f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60bb      	str	r3, [r7, #8]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f18:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	4a1d      	ldr	r2, [pc, #116]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f22:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f36:	4b18      	ldr	r3, [pc, #96]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a17      	ldr	r2, [pc, #92]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f42:	4b15      	ldr	r3, [pc, #84]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a14      	ldr	r2, [pc, #80]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f4e:	f000 f8dd 	bl	800a10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <xPortStartScheduler+0x13c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f58:	f000 f8fc 	bl	800a154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <xPortStartScheduler+0x140>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a0f      	ldr	r2, [pc, #60]	; (8009fa0 <xPortStartScheduler+0x140>)
 8009f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f68:	f7ff ff66 	bl	8009e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f6c:	f7fe fe76 	bl	8008c5c <vTaskSwitchContext>
	prvTaskExitError();
 8009f70:	f7ff ff20 	bl	8009db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	e000ed00 	.word	0xe000ed00
 8009f84:	410fc271 	.word	0x410fc271
 8009f88:	410fc270 	.word	0x410fc270
 8009f8c:	e000e400 	.word	0xe000e400
 8009f90:	20003ab8 	.word	0x20003ab8
 8009f94:	20003abc 	.word	0x20003abc
 8009f98:	e000ed20 	.word	0xe000ed20
 8009f9c:	20000010 	.word	0x20000010
 8009fa0:	e000ef34 	.word	0xe000ef34

08009fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	607b      	str	r3, [r7, #4]
}
 8009fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fbe:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	4a0d      	ldr	r2, [pc, #52]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d10f      	bne.n	8009ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <vPortEnterCritical+0x5c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	603b      	str	r3, [r7, #0]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <vPortEnterCritical+0x4a>
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000010 	.word	0x20000010
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a00a:	4b12      	ldr	r3, [pc, #72]	; (800a054 <vPortExitCritical+0x50>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <vPortExitCritical+0x24>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	607b      	str	r3, [r7, #4]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <vPortExitCritical+0x50>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	4a09      	ldr	r2, [pc, #36]	; (800a054 <vPortExitCritical+0x50>)
 800a030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <vPortExitCritical+0x50>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d105      	bne.n	800a046 <vPortExitCritical+0x42>
 800a03a:	2300      	movs	r3, #0
 800a03c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	f383 8811 	msr	BASEPRI, r3
}
 800a044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20000010 	.word	0x20000010
	...

0800a060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a060:	f3ef 8009 	mrs	r0, PSP
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <pxCurrentTCBConst>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	f01e 0f10 	tst.w	lr, #16
 800a070:	bf08      	it	eq
 800a072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	6010      	str	r0, [r2, #0]
 800a07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a080:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a084:	f380 8811 	msr	BASEPRI, r0
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f7fe fde4 	bl	8008c5c <vTaskSwitchContext>
 800a094:	f04f 0000 	mov.w	r0, #0
 800a098:	f380 8811 	msr	BASEPRI, r0
 800a09c:	bc09      	pop	{r0, r3}
 800a09e:	6819      	ldr	r1, [r3, #0]
 800a0a0:	6808      	ldr	r0, [r1, #0]
 800a0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a6:	f01e 0f10 	tst.w	lr, #16
 800a0aa:	bf08      	it	eq
 800a0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0b0:	f380 8809 	msr	PSP, r0
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	f3af 8000 	nop.w

0800a0c0 <pxCurrentTCBConst>:
 800a0c0:	2000348c 	.word	0x2000348c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop

0800a0c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	607b      	str	r3, [r7, #4]
}
 800a0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0e2:	f7fe fd01 	bl	8008ae8 <xTaskIncrementTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <xPortSysTickHandler+0x40>)
 800a0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
}
 800a0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <vPortSetupTimerInterrupt+0x34>)
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <vPortSetupTimerInterrupt+0x38>)
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <vPortSetupTimerInterrupt+0x3c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <vPortSetupTimerInterrupt+0x40>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	099b      	lsrs	r3, r3, #6
 800a128:	4a09      	ldr	r2, [pc, #36]	; (800a150 <vPortSetupTimerInterrupt+0x44>)
 800a12a:	3b01      	subs	r3, #1
 800a12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a12e:	4b04      	ldr	r3, [pc, #16]	; (800a140 <vPortSetupTimerInterrupt+0x34>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	e000e010 	.word	0xe000e010
 800a144:	e000e018 	.word	0xe000e018
 800a148:	20000000 	.word	0x20000000
 800a14c:	10624dd3 	.word	0x10624dd3
 800a150:	e000e014 	.word	0xe000e014

0800a154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a164 <vPortEnableVFP+0x10>
 800a158:	6801      	ldr	r1, [r0, #0]
 800a15a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a15e:	6001      	str	r1, [r0, #0]
 800a160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a162:	bf00      	nop
 800a164:	e000ed88 	.word	0xe000ed88

0800a168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a16e:	f3ef 8305 	mrs	r3, IPSR
 800a172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b0f      	cmp	r3, #15
 800a178:	d914      	bls.n	800a1a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a17a:	4a17      	ldr	r2, [pc, #92]	; (800a1d8 <vPortValidateInterruptPriority+0x70>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a184:	4b15      	ldr	r3, [pc, #84]	; (800a1dc <vPortValidateInterruptPriority+0x74>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	7afa      	ldrb	r2, [r7, #11]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d20a      	bcs.n	800a1a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1a4:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <vPortValidateInterruptPriority+0x78>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <vPortValidateInterruptPriority+0x7c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d90a      	bls.n	800a1ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	603b      	str	r3, [r7, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <vPortValidateInterruptPriority+0x60>
	}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	e000e3f0 	.word	0xe000e3f0
 800a1dc:	20003ab8 	.word	0x20003ab8
 800a1e0:	e000ed0c 	.word	0xe000ed0c
 800a1e4:	20003abc 	.word	0x20003abc

0800a1e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1f4:	f7fe fbbc 	bl	8008970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1f8:	4b5b      	ldr	r3, [pc, #364]	; (800a368 <pvPortMalloc+0x180>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a200:	f000 f920 	bl	800a444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a204:	4b59      	ldr	r3, [pc, #356]	; (800a36c <pvPortMalloc+0x184>)
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4013      	ands	r3, r2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f040 8093 	bne.w	800a338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01d      	beq.n	800a254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a218:	2208      	movs	r2, #8
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	2b00      	cmp	r3, #0
 800a228:	d014      	beq.n	800a254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f023 0307 	bic.w	r3, r3, #7
 800a230:	3308      	adds	r3, #8
 800a232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <pvPortMalloc+0x6c>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	617b      	str	r3, [r7, #20]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d06e      	beq.n	800a338 <pvPortMalloc+0x150>
 800a25a:	4b45      	ldr	r3, [pc, #276]	; (800a370 <pvPortMalloc+0x188>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	429a      	cmp	r2, r3
 800a262:	d869      	bhi.n	800a338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a264:	4b43      	ldr	r3, [pc, #268]	; (800a374 <pvPortMalloc+0x18c>)
 800a266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a268:	4b42      	ldr	r3, [pc, #264]	; (800a374 <pvPortMalloc+0x18c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a26e:	e004      	b.n	800a27a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d903      	bls.n	800a28c <pvPortMalloc+0xa4>
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1f1      	bne.n	800a270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a28c:	4b36      	ldr	r3, [pc, #216]	; (800a368 <pvPortMalloc+0x180>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a292:	429a      	cmp	r2, r3
 800a294:	d050      	beq.n	800a338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2208      	movs	r2, #8
 800a29c:	4413      	add	r3, r2
 800a29e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d91f      	bls.n	800a2f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	613b      	str	r3, [r7, #16]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2f2:	69b8      	ldr	r0, [r7, #24]
 800a2f4:	f000 f908 	bl	800a508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2f8:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <pvPortMalloc+0x188>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	4a1b      	ldr	r2, [pc, #108]	; (800a370 <pvPortMalloc+0x188>)
 800a304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a306:	4b1a      	ldr	r3, [pc, #104]	; (800a370 <pvPortMalloc+0x188>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b1b      	ldr	r3, [pc, #108]	; (800a378 <pvPortMalloc+0x190>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d203      	bcs.n	800a31a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a312:	4b17      	ldr	r3, [pc, #92]	; (800a370 <pvPortMalloc+0x188>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a18      	ldr	r2, [pc, #96]	; (800a378 <pvPortMalloc+0x190>)
 800a318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <pvPortMalloc+0x184>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	431a      	orrs	r2, r3
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <pvPortMalloc+0x194>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	4a11      	ldr	r2, [pc, #68]	; (800a37c <pvPortMalloc+0x194>)
 800a336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a338:	f7fe fb28 	bl	800898c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <pvPortMalloc+0x174>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60fb      	str	r3, [r7, #12]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <pvPortMalloc+0x172>
	return pvReturn;
 800a35c:	69fb      	ldr	r3, [r7, #28]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3728      	adds	r7, #40	; 0x28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	2000aff8 	.word	0x2000aff8
 800a36c:	2000b00c 	.word	0x2000b00c
 800a370:	2000affc 	.word	0x2000affc
 800a374:	2000aff0 	.word	0x2000aff0
 800a378:	2000b000 	.word	0x2000b000
 800a37c:	2000b004 	.word	0x2000b004

0800a380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d04d      	beq.n	800a42e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a392:	2308      	movs	r3, #8
 800a394:	425b      	negs	r3, r3
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	4413      	add	r3, r2
 800a39a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	4b24      	ldr	r3, [pc, #144]	; (800a438 <vPortFree+0xb8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <vPortFree+0x44>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <vPortFree+0x62>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	60bb      	str	r3, [r7, #8]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <vPortFree+0xb8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01e      	beq.n	800a42e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d11a      	bne.n	800a42e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <vPortFree+0xb8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	43db      	mvns	r3, r3
 800a402:	401a      	ands	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a408:	f7fe fab2 	bl	8008970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <vPortFree+0xbc>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4413      	add	r3, r2
 800a416:	4a09      	ldr	r2, [pc, #36]	; (800a43c <vPortFree+0xbc>)
 800a418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f000 f874 	bl	800a508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a420:	4b07      	ldr	r3, [pc, #28]	; (800a440 <vPortFree+0xc0>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3301      	adds	r3, #1
 800a426:	4a06      	ldr	r2, [pc, #24]	; (800a440 <vPortFree+0xc0>)
 800a428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a42a:	f7fe faaf 	bl	800898c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a42e:	bf00      	nop
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	2000b00c 	.word	0x2000b00c
 800a43c:	2000affc 	.word	0x2000affc
 800a440:	2000b008 	.word	0x2000b008

0800a444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a44a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a44e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a450:	4b27      	ldr	r3, [pc, #156]	; (800a4f0 <prvHeapInit+0xac>)
 800a452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00c      	beq.n	800a478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3307      	adds	r3, #7
 800a462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f023 0307 	bic.w	r3, r3, #7
 800a46a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	4a1f      	ldr	r2, [pc, #124]	; (800a4f0 <prvHeapInit+0xac>)
 800a474:	4413      	add	r3, r2
 800a476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a47c:	4a1d      	ldr	r2, [pc, #116]	; (800a4f4 <prvHeapInit+0xb0>)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a482:	4b1c      	ldr	r3, [pc, #112]	; (800a4f4 <prvHeapInit+0xb0>)
 800a484:	2200      	movs	r2, #0
 800a486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4413      	add	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a490:	2208      	movs	r2, #8
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f023 0307 	bic.w	r3, r3, #7
 800a49e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4a15      	ldr	r2, [pc, #84]	; (800a4f8 <prvHeapInit+0xb4>)
 800a4a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4a6:	4b14      	ldr	r3, [pc, #80]	; (800a4f8 <prvHeapInit+0xb4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4ae:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <prvHeapInit+0xb4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <prvHeapInit+0xb4>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	4a0a      	ldr	r2, [pc, #40]	; (800a4fc <prvHeapInit+0xb8>)
 800a4d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	4a09      	ldr	r2, [pc, #36]	; (800a500 <prvHeapInit+0xbc>)
 800a4da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4dc:	4b09      	ldr	r3, [pc, #36]	; (800a504 <prvHeapInit+0xc0>)
 800a4de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4e2:	601a      	str	r2, [r3, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20003ac0 	.word	0x20003ac0
 800a4f4:	2000aff0 	.word	0x2000aff0
 800a4f8:	2000aff8 	.word	0x2000aff8
 800a4fc:	2000b000 	.word	0x2000b000
 800a500:	2000affc 	.word	0x2000affc
 800a504:	2000b00c 	.word	0x2000b00c

0800a508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a510:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <prvInsertBlockIntoFreeList+0xac>)
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e002      	b.n	800a51c <prvInsertBlockIntoFreeList+0x14>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d8f7      	bhi.n	800a516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	4413      	add	r3, r2
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	429a      	cmp	r2, r3
 800a536:	d108      	bne.n	800a54a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	441a      	add	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	441a      	add	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d118      	bne.n	800a590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b15      	ldr	r3, [pc, #84]	; (800a5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d00d      	beq.n	800a586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	441a      	add	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e008      	b.n	800a598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a586:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e003      	b.n	800a598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d002      	beq.n	800a5a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	2000aff0 	.word	0x2000aff0
 800a5b8:	2000aff8 	.word	0x2000aff8

0800a5bc <__errno>:
 800a5bc:	4b01      	ldr	r3, [pc, #4]	; (800a5c4 <__errno+0x8>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000014 	.word	0x20000014

0800a5c8 <__libc_init_array>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	4d0d      	ldr	r5, [pc, #52]	; (800a600 <__libc_init_array+0x38>)
 800a5cc:	4c0d      	ldr	r4, [pc, #52]	; (800a604 <__libc_init_array+0x3c>)
 800a5ce:	1b64      	subs	r4, r4, r5
 800a5d0:	10a4      	asrs	r4, r4, #2
 800a5d2:	2600      	movs	r6, #0
 800a5d4:	42a6      	cmp	r6, r4
 800a5d6:	d109      	bne.n	800a5ec <__libc_init_array+0x24>
 800a5d8:	4d0b      	ldr	r5, [pc, #44]	; (800a608 <__libc_init_array+0x40>)
 800a5da:	4c0c      	ldr	r4, [pc, #48]	; (800a60c <__libc_init_array+0x44>)
 800a5dc:	f000 fd12 	bl	800b004 <_init>
 800a5e0:	1b64      	subs	r4, r4, r5
 800a5e2:	10a4      	asrs	r4, r4, #2
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	42a6      	cmp	r6, r4
 800a5e8:	d105      	bne.n	800a5f6 <__libc_init_array+0x2e>
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}
 800a5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f0:	4798      	blx	r3
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	e7ee      	b.n	800a5d4 <__libc_init_array+0xc>
 800a5f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fa:	4798      	blx	r3
 800a5fc:	3601      	adds	r6, #1
 800a5fe:	e7f2      	b.n	800a5e6 <__libc_init_array+0x1e>
 800a600:	0800b1a8 	.word	0x0800b1a8
 800a604:	0800b1a8 	.word	0x0800b1a8
 800a608:	0800b1a8 	.word	0x0800b1a8
 800a60c:	0800b1ac 	.word	0x0800b1ac

0800a610 <__retarget_lock_acquire_recursive>:
 800a610:	4770      	bx	lr

0800a612 <__retarget_lock_release_recursive>:
 800a612:	4770      	bx	lr

0800a614 <memcpy>:
 800a614:	440a      	add	r2, r1
 800a616:	4291      	cmp	r1, r2
 800a618:	f100 33ff 	add.w	r3, r0, #4294967295
 800a61c:	d100      	bne.n	800a620 <memcpy+0xc>
 800a61e:	4770      	bx	lr
 800a620:	b510      	push	{r4, lr}
 800a622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a62a:	4291      	cmp	r1, r2
 800a62c:	d1f9      	bne.n	800a622 <memcpy+0xe>
 800a62e:	bd10      	pop	{r4, pc}

0800a630 <memset>:
 800a630:	4402      	add	r2, r0
 800a632:	4603      	mov	r3, r0
 800a634:	4293      	cmp	r3, r2
 800a636:	d100      	bne.n	800a63a <memset+0xa>
 800a638:	4770      	bx	lr
 800a63a:	f803 1b01 	strb.w	r1, [r3], #1
 800a63e:	e7f9      	b.n	800a634 <memset+0x4>

0800a640 <sbrk_aligned>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	4e0e      	ldr	r6, [pc, #56]	; (800a67c <sbrk_aligned+0x3c>)
 800a644:	460c      	mov	r4, r1
 800a646:	6831      	ldr	r1, [r6, #0]
 800a648:	4605      	mov	r5, r0
 800a64a:	b911      	cbnz	r1, 800a652 <sbrk_aligned+0x12>
 800a64c:	f000 f8f6 	bl	800a83c <_sbrk_r>
 800a650:	6030      	str	r0, [r6, #0]
 800a652:	4621      	mov	r1, r4
 800a654:	4628      	mov	r0, r5
 800a656:	f000 f8f1 	bl	800a83c <_sbrk_r>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	d00a      	beq.n	800a674 <sbrk_aligned+0x34>
 800a65e:	1cc4      	adds	r4, r0, #3
 800a660:	f024 0403 	bic.w	r4, r4, #3
 800a664:	42a0      	cmp	r0, r4
 800a666:	d007      	beq.n	800a678 <sbrk_aligned+0x38>
 800a668:	1a21      	subs	r1, r4, r0
 800a66a:	4628      	mov	r0, r5
 800a66c:	f000 f8e6 	bl	800a83c <_sbrk_r>
 800a670:	3001      	adds	r0, #1
 800a672:	d101      	bne.n	800a678 <sbrk_aligned+0x38>
 800a674:	f04f 34ff 	mov.w	r4, #4294967295
 800a678:	4620      	mov	r0, r4
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	2000b018 	.word	0x2000b018

0800a680 <_malloc_r>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	1ccd      	adds	r5, r1, #3
 800a686:	f025 0503 	bic.w	r5, r5, #3
 800a68a:	3508      	adds	r5, #8
 800a68c:	2d0c      	cmp	r5, #12
 800a68e:	bf38      	it	cc
 800a690:	250c      	movcc	r5, #12
 800a692:	2d00      	cmp	r5, #0
 800a694:	4607      	mov	r7, r0
 800a696:	db01      	blt.n	800a69c <_malloc_r+0x1c>
 800a698:	42a9      	cmp	r1, r5
 800a69a:	d905      	bls.n	800a6a8 <_malloc_r+0x28>
 800a69c:	230c      	movs	r3, #12
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	2600      	movs	r6, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	4e2e      	ldr	r6, [pc, #184]	; (800a764 <_malloc_r+0xe4>)
 800a6aa:	f000 f911 	bl	800a8d0 <__malloc_lock>
 800a6ae:	6833      	ldr	r3, [r6, #0]
 800a6b0:	461c      	mov	r4, r3
 800a6b2:	bb34      	cbnz	r4, 800a702 <_malloc_r+0x82>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7ff ffc2 	bl	800a640 <sbrk_aligned>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	4604      	mov	r4, r0
 800a6c0:	d14d      	bne.n	800a75e <_malloc_r+0xde>
 800a6c2:	6834      	ldr	r4, [r6, #0]
 800a6c4:	4626      	mov	r6, r4
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	d140      	bne.n	800a74c <_malloc_r+0xcc>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	eb04 0803 	add.w	r8, r4, r3
 800a6d4:	f000 f8b2 	bl	800a83c <_sbrk_r>
 800a6d8:	4580      	cmp	r8, r0
 800a6da:	d13a      	bne.n	800a752 <_malloc_r+0xd2>
 800a6dc:	6821      	ldr	r1, [r4, #0]
 800a6de:	3503      	adds	r5, #3
 800a6e0:	1a6d      	subs	r5, r5, r1
 800a6e2:	f025 0503 	bic.w	r5, r5, #3
 800a6e6:	3508      	adds	r5, #8
 800a6e8:	2d0c      	cmp	r5, #12
 800a6ea:	bf38      	it	cc
 800a6ec:	250c      	movcc	r5, #12
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff ffa5 	bl	800a640 <sbrk_aligned>
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d02b      	beq.n	800a752 <_malloc_r+0xd2>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	442b      	add	r3, r5
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	e00e      	b.n	800a720 <_malloc_r+0xa0>
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	1b52      	subs	r2, r2, r5
 800a706:	d41e      	bmi.n	800a746 <_malloc_r+0xc6>
 800a708:	2a0b      	cmp	r2, #11
 800a70a:	d916      	bls.n	800a73a <_malloc_r+0xba>
 800a70c:	1961      	adds	r1, r4, r5
 800a70e:	42a3      	cmp	r3, r4
 800a710:	6025      	str	r5, [r4, #0]
 800a712:	bf18      	it	ne
 800a714:	6059      	strne	r1, [r3, #4]
 800a716:	6863      	ldr	r3, [r4, #4]
 800a718:	bf08      	it	eq
 800a71a:	6031      	streq	r1, [r6, #0]
 800a71c:	5162      	str	r2, [r4, r5]
 800a71e:	604b      	str	r3, [r1, #4]
 800a720:	4638      	mov	r0, r7
 800a722:	f104 060b 	add.w	r6, r4, #11
 800a726:	f000 f8d9 	bl	800a8dc <__malloc_unlock>
 800a72a:	f026 0607 	bic.w	r6, r6, #7
 800a72e:	1d23      	adds	r3, r4, #4
 800a730:	1af2      	subs	r2, r6, r3
 800a732:	d0b6      	beq.n	800a6a2 <_malloc_r+0x22>
 800a734:	1b9b      	subs	r3, r3, r6
 800a736:	50a3      	str	r3, [r4, r2]
 800a738:	e7b3      	b.n	800a6a2 <_malloc_r+0x22>
 800a73a:	6862      	ldr	r2, [r4, #4]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	bf0c      	ite	eq
 800a740:	6032      	streq	r2, [r6, #0]
 800a742:	605a      	strne	r2, [r3, #4]
 800a744:	e7ec      	b.n	800a720 <_malloc_r+0xa0>
 800a746:	4623      	mov	r3, r4
 800a748:	6864      	ldr	r4, [r4, #4]
 800a74a:	e7b2      	b.n	800a6b2 <_malloc_r+0x32>
 800a74c:	4634      	mov	r4, r6
 800a74e:	6876      	ldr	r6, [r6, #4]
 800a750:	e7b9      	b.n	800a6c6 <_malloc_r+0x46>
 800a752:	230c      	movs	r3, #12
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4638      	mov	r0, r7
 800a758:	f000 f8c0 	bl	800a8dc <__malloc_unlock>
 800a75c:	e7a1      	b.n	800a6a2 <_malloc_r+0x22>
 800a75e:	6025      	str	r5, [r4, #0]
 800a760:	e7de      	b.n	800a720 <_malloc_r+0xa0>
 800a762:	bf00      	nop
 800a764:	2000b014 	.word	0x2000b014

0800a768 <cleanup_glue>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	460c      	mov	r4, r1
 800a76c:	6809      	ldr	r1, [r1, #0]
 800a76e:	4605      	mov	r5, r0
 800a770:	b109      	cbz	r1, 800a776 <cleanup_glue+0xe>
 800a772:	f7ff fff9 	bl	800a768 <cleanup_glue>
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a77e:	f000 b8b3 	b.w	800a8e8 <_free_r>
	...

0800a784 <_reclaim_reent>:
 800a784:	4b2c      	ldr	r3, [pc, #176]	; (800a838 <_reclaim_reent+0xb4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4283      	cmp	r3, r0
 800a78a:	b570      	push	{r4, r5, r6, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	d051      	beq.n	800a834 <_reclaim_reent+0xb0>
 800a790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a792:	b143      	cbz	r3, 800a7a6 <_reclaim_reent+0x22>
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d14a      	bne.n	800a830 <_reclaim_reent+0xac>
 800a79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a79c:	6819      	ldr	r1, [r3, #0]
 800a79e:	b111      	cbz	r1, 800a7a6 <_reclaim_reent+0x22>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 f8a1 	bl	800a8e8 <_free_r>
 800a7a6:	6961      	ldr	r1, [r4, #20]
 800a7a8:	b111      	cbz	r1, 800a7b0 <_reclaim_reent+0x2c>
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 f89c 	bl	800a8e8 <_free_r>
 800a7b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a7b2:	b111      	cbz	r1, 800a7ba <_reclaim_reent+0x36>
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f000 f897 	bl	800a8e8 <_free_r>
 800a7ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a7bc:	b111      	cbz	r1, 800a7c4 <_reclaim_reent+0x40>
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 f892 	bl	800a8e8 <_free_r>
 800a7c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a7c6:	b111      	cbz	r1, 800a7ce <_reclaim_reent+0x4a>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 f88d 	bl	800a8e8 <_free_r>
 800a7ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a7d0:	b111      	cbz	r1, 800a7d8 <_reclaim_reent+0x54>
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f888 	bl	800a8e8 <_free_r>
 800a7d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a7da:	b111      	cbz	r1, 800a7e2 <_reclaim_reent+0x5e>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 f883 	bl	800a8e8 <_free_r>
 800a7e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a7e4:	b111      	cbz	r1, 800a7ec <_reclaim_reent+0x68>
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 f87e 	bl	800a8e8 <_free_r>
 800a7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ee:	b111      	cbz	r1, 800a7f6 <_reclaim_reent+0x72>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 f879 	bl	800a8e8 <_free_r>
 800a7f6:	69a3      	ldr	r3, [r4, #24]
 800a7f8:	b1e3      	cbz	r3, 800a834 <_reclaim_reent+0xb0>
 800a7fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4798      	blx	r3
 800a800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a802:	b1b9      	cbz	r1, 800a834 <_reclaim_reent+0xb0>
 800a804:	4620      	mov	r0, r4
 800a806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a80a:	f7ff bfad 	b.w	800a768 <cleanup_glue>
 800a80e:	5949      	ldr	r1, [r1, r5]
 800a810:	b941      	cbnz	r1, 800a824 <_reclaim_reent+0xa0>
 800a812:	3504      	adds	r5, #4
 800a814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a816:	2d80      	cmp	r5, #128	; 0x80
 800a818:	68d9      	ldr	r1, [r3, #12]
 800a81a:	d1f8      	bne.n	800a80e <_reclaim_reent+0x8a>
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 f863 	bl	800a8e8 <_free_r>
 800a822:	e7ba      	b.n	800a79a <_reclaim_reent+0x16>
 800a824:	680e      	ldr	r6, [r1, #0]
 800a826:	4620      	mov	r0, r4
 800a828:	f000 f85e 	bl	800a8e8 <_free_r>
 800a82c:	4631      	mov	r1, r6
 800a82e:	e7ef      	b.n	800a810 <_reclaim_reent+0x8c>
 800a830:	2500      	movs	r5, #0
 800a832:	e7ef      	b.n	800a814 <_reclaim_reent+0x90>
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	bf00      	nop
 800a838:	20000014 	.word	0x20000014

0800a83c <_sbrk_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	; (800a858 <_sbrk_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f6 fcb2 	bl	80011b0 <_sbrk>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_sbrk_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_sbrk_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	2000b01c 	.word	0x2000b01c

0800a85c <_vsniprintf_r>:
 800a85c:	b530      	push	{r4, r5, lr}
 800a85e:	4614      	mov	r4, r2
 800a860:	2c00      	cmp	r4, #0
 800a862:	b09b      	sub	sp, #108	; 0x6c
 800a864:	4605      	mov	r5, r0
 800a866:	461a      	mov	r2, r3
 800a868:	da05      	bge.n	800a876 <_vsniprintf_r+0x1a>
 800a86a:	238b      	movs	r3, #139	; 0x8b
 800a86c:	6003      	str	r3, [r0, #0]
 800a86e:	f04f 30ff 	mov.w	r0, #4294967295
 800a872:	b01b      	add	sp, #108	; 0x6c
 800a874:	bd30      	pop	{r4, r5, pc}
 800a876:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a87a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a87e:	bf14      	ite	ne
 800a880:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a884:	4623      	moveq	r3, r4
 800a886:	9302      	str	r3, [sp, #8]
 800a888:	9305      	str	r3, [sp, #20]
 800a88a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a88e:	9100      	str	r1, [sp, #0]
 800a890:	9104      	str	r1, [sp, #16]
 800a892:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a896:	4669      	mov	r1, sp
 800a898:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a89a:	f000 f8cd 	bl	800aa38 <_svfiprintf_r>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	bfbc      	itt	lt
 800a8a2:	238b      	movlt	r3, #139	; 0x8b
 800a8a4:	602b      	strlt	r3, [r5, #0]
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	d0e3      	beq.n	800a872 <_vsniprintf_r+0x16>
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	e7df      	b.n	800a872 <_vsniprintf_r+0x16>
	...

0800a8b4 <vsniprintf>:
 800a8b4:	b507      	push	{r0, r1, r2, lr}
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	4601      	mov	r1, r0
 800a8be:	4803      	ldr	r0, [pc, #12]	; (800a8cc <vsniprintf+0x18>)
 800a8c0:	6800      	ldr	r0, [r0, #0]
 800a8c2:	f7ff ffcb 	bl	800a85c <_vsniprintf_r>
 800a8c6:	b003      	add	sp, #12
 800a8c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8cc:	20000014 	.word	0x20000014

0800a8d0 <__malloc_lock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__malloc_lock+0x8>)
 800a8d2:	f7ff be9d 	b.w	800a610 <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	2000b010 	.word	0x2000b010

0800a8dc <__malloc_unlock>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	; (800a8e4 <__malloc_unlock+0x8>)
 800a8de:	f7ff be98 	b.w	800a612 <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	2000b010 	.word	0x2000b010

0800a8e8 <_free_r>:
 800a8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ea:	2900      	cmp	r1, #0
 800a8ec:	d044      	beq.n	800a978 <_free_r+0x90>
 800a8ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f2:	9001      	str	r0, [sp, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8fa:	bfb8      	it	lt
 800a8fc:	18e4      	addlt	r4, r4, r3
 800a8fe:	f7ff ffe7 	bl	800a8d0 <__malloc_lock>
 800a902:	4a1e      	ldr	r2, [pc, #120]	; (800a97c <_free_r+0x94>)
 800a904:	9801      	ldr	r0, [sp, #4]
 800a906:	6813      	ldr	r3, [r2, #0]
 800a908:	b933      	cbnz	r3, 800a918 <_free_r+0x30>
 800a90a:	6063      	str	r3, [r4, #4]
 800a90c:	6014      	str	r4, [r2, #0]
 800a90e:	b003      	add	sp, #12
 800a910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a914:	f7ff bfe2 	b.w	800a8dc <__malloc_unlock>
 800a918:	42a3      	cmp	r3, r4
 800a91a:	d908      	bls.n	800a92e <_free_r+0x46>
 800a91c:	6825      	ldr	r5, [r4, #0]
 800a91e:	1961      	adds	r1, r4, r5
 800a920:	428b      	cmp	r3, r1
 800a922:	bf01      	itttt	eq
 800a924:	6819      	ldreq	r1, [r3, #0]
 800a926:	685b      	ldreq	r3, [r3, #4]
 800a928:	1949      	addeq	r1, r1, r5
 800a92a:	6021      	streq	r1, [r4, #0]
 800a92c:	e7ed      	b.n	800a90a <_free_r+0x22>
 800a92e:	461a      	mov	r2, r3
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	b10b      	cbz	r3, 800a938 <_free_r+0x50>
 800a934:	42a3      	cmp	r3, r4
 800a936:	d9fa      	bls.n	800a92e <_free_r+0x46>
 800a938:	6811      	ldr	r1, [r2, #0]
 800a93a:	1855      	adds	r5, r2, r1
 800a93c:	42a5      	cmp	r5, r4
 800a93e:	d10b      	bne.n	800a958 <_free_r+0x70>
 800a940:	6824      	ldr	r4, [r4, #0]
 800a942:	4421      	add	r1, r4
 800a944:	1854      	adds	r4, r2, r1
 800a946:	42a3      	cmp	r3, r4
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	d1e0      	bne.n	800a90e <_free_r+0x26>
 800a94c:	681c      	ldr	r4, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	6053      	str	r3, [r2, #4]
 800a952:	4421      	add	r1, r4
 800a954:	6011      	str	r1, [r2, #0]
 800a956:	e7da      	b.n	800a90e <_free_r+0x26>
 800a958:	d902      	bls.n	800a960 <_free_r+0x78>
 800a95a:	230c      	movs	r3, #12
 800a95c:	6003      	str	r3, [r0, #0]
 800a95e:	e7d6      	b.n	800a90e <_free_r+0x26>
 800a960:	6825      	ldr	r5, [r4, #0]
 800a962:	1961      	adds	r1, r4, r5
 800a964:	428b      	cmp	r3, r1
 800a966:	bf04      	itt	eq
 800a968:	6819      	ldreq	r1, [r3, #0]
 800a96a:	685b      	ldreq	r3, [r3, #4]
 800a96c:	6063      	str	r3, [r4, #4]
 800a96e:	bf04      	itt	eq
 800a970:	1949      	addeq	r1, r1, r5
 800a972:	6021      	streq	r1, [r4, #0]
 800a974:	6054      	str	r4, [r2, #4]
 800a976:	e7ca      	b.n	800a90e <_free_r+0x26>
 800a978:	b003      	add	sp, #12
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	2000b014 	.word	0x2000b014

0800a980 <__ssputs_r>:
 800a980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a984:	688e      	ldr	r6, [r1, #8]
 800a986:	429e      	cmp	r6, r3
 800a988:	4682      	mov	sl, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	4690      	mov	r8, r2
 800a98e:	461f      	mov	r7, r3
 800a990:	d838      	bhi.n	800aa04 <__ssputs_r+0x84>
 800a992:	898a      	ldrh	r2, [r1, #12]
 800a994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a998:	d032      	beq.n	800aa00 <__ssputs_r+0x80>
 800a99a:	6825      	ldr	r5, [r4, #0]
 800a99c:	6909      	ldr	r1, [r1, #16]
 800a99e:	eba5 0901 	sub.w	r9, r5, r1
 800a9a2:	6965      	ldr	r5, [r4, #20]
 800a9a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	444b      	add	r3, r9
 800a9b0:	106d      	asrs	r5, r5, #1
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	bf38      	it	cc
 800a9b6:	461d      	movcc	r5, r3
 800a9b8:	0553      	lsls	r3, r2, #21
 800a9ba:	d531      	bpl.n	800aa20 <__ssputs_r+0xa0>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	f7ff fe5f 	bl	800a680 <_malloc_r>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	b950      	cbnz	r0, 800a9dc <__ssputs_r+0x5c>
 800a9c6:	230c      	movs	r3, #12
 800a9c8:	f8ca 3000 	str.w	r3, [sl]
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d2:	81a3      	strh	r3, [r4, #12]
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9dc:	6921      	ldr	r1, [r4, #16]
 800a9de:	464a      	mov	r2, r9
 800a9e0:	f7ff fe18 	bl	800a614 <memcpy>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	6126      	str	r6, [r4, #16]
 800a9f2:	6165      	str	r5, [r4, #20]
 800a9f4:	444e      	add	r6, r9
 800a9f6:	eba5 0509 	sub.w	r5, r5, r9
 800a9fa:	6026      	str	r6, [r4, #0]
 800a9fc:	60a5      	str	r5, [r4, #8]
 800a9fe:	463e      	mov	r6, r7
 800aa00:	42be      	cmp	r6, r7
 800aa02:	d900      	bls.n	800aa06 <__ssputs_r+0x86>
 800aa04:	463e      	mov	r6, r7
 800aa06:	6820      	ldr	r0, [r4, #0]
 800aa08:	4632      	mov	r2, r6
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	f000 faa8 	bl	800af60 <memmove>
 800aa10:	68a3      	ldr	r3, [r4, #8]
 800aa12:	1b9b      	subs	r3, r3, r6
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	4433      	add	r3, r6
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7db      	b.n	800a9d8 <__ssputs_r+0x58>
 800aa20:	462a      	mov	r2, r5
 800aa22:	f000 fab7 	bl	800af94 <_realloc_r>
 800aa26:	4606      	mov	r6, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d1e1      	bne.n	800a9f0 <__ssputs_r+0x70>
 800aa2c:	6921      	ldr	r1, [r4, #16]
 800aa2e:	4650      	mov	r0, sl
 800aa30:	f7ff ff5a 	bl	800a8e8 <_free_r>
 800aa34:	e7c7      	b.n	800a9c6 <__ssputs_r+0x46>
	...

0800aa38 <_svfiprintf_r>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4698      	mov	r8, r3
 800aa3e:	898b      	ldrh	r3, [r1, #12]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	b09d      	sub	sp, #116	; 0x74
 800aa44:	4607      	mov	r7, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	4614      	mov	r4, r2
 800aa4a:	d50e      	bpl.n	800aa6a <_svfiprintf_r+0x32>
 800aa4c:	690b      	ldr	r3, [r1, #16]
 800aa4e:	b963      	cbnz	r3, 800aa6a <_svfiprintf_r+0x32>
 800aa50:	2140      	movs	r1, #64	; 0x40
 800aa52:	f7ff fe15 	bl	800a680 <_malloc_r>
 800aa56:	6028      	str	r0, [r5, #0]
 800aa58:	6128      	str	r0, [r5, #16]
 800aa5a:	b920      	cbnz	r0, 800aa66 <_svfiprintf_r+0x2e>
 800aa5c:	230c      	movs	r3, #12
 800aa5e:	603b      	str	r3, [r7, #0]
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	e0d1      	b.n	800ac0a <_svfiprintf_r+0x1d2>
 800aa66:	2340      	movs	r3, #64	; 0x40
 800aa68:	616b      	str	r3, [r5, #20]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6e:	2320      	movs	r3, #32
 800aa70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa74:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa78:	2330      	movs	r3, #48	; 0x30
 800aa7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac24 <_svfiprintf_r+0x1ec>
 800aa7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa82:	f04f 0901 	mov.w	r9, #1
 800aa86:	4623      	mov	r3, r4
 800aa88:	469a      	mov	sl, r3
 800aa8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8e:	b10a      	cbz	r2, 800aa94 <_svfiprintf_r+0x5c>
 800aa90:	2a25      	cmp	r2, #37	; 0x25
 800aa92:	d1f9      	bne.n	800aa88 <_svfiprintf_r+0x50>
 800aa94:	ebba 0b04 	subs.w	fp, sl, r4
 800aa98:	d00b      	beq.n	800aab2 <_svfiprintf_r+0x7a>
 800aa9a:	465b      	mov	r3, fp
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	f7ff ff6d 	bl	800a980 <__ssputs_r>
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f000 80aa 	beq.w	800ac00 <_svfiprintf_r+0x1c8>
 800aaac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaae:	445a      	add	r2, fp
 800aab0:	9209      	str	r2, [sp, #36]	; 0x24
 800aab2:	f89a 3000 	ldrb.w	r3, [sl]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 80a2 	beq.w	800ac00 <_svfiprintf_r+0x1c8>
 800aabc:	2300      	movs	r3, #0
 800aabe:	f04f 32ff 	mov.w	r2, #4294967295
 800aac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac6:	f10a 0a01 	add.w	sl, sl, #1
 800aaca:	9304      	str	r3, [sp, #16]
 800aacc:	9307      	str	r3, [sp, #28]
 800aace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aad2:	931a      	str	r3, [sp, #104]	; 0x68
 800aad4:	4654      	mov	r4, sl
 800aad6:	2205      	movs	r2, #5
 800aad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aadc:	4851      	ldr	r0, [pc, #324]	; (800ac24 <_svfiprintf_r+0x1ec>)
 800aade:	f7f5 fb9f 	bl	8000220 <memchr>
 800aae2:	9a04      	ldr	r2, [sp, #16]
 800aae4:	b9d8      	cbnz	r0, 800ab1e <_svfiprintf_r+0xe6>
 800aae6:	06d0      	lsls	r0, r2, #27
 800aae8:	bf44      	itt	mi
 800aaea:	2320      	movmi	r3, #32
 800aaec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf0:	0711      	lsls	r1, r2, #28
 800aaf2:	bf44      	itt	mi
 800aaf4:	232b      	movmi	r3, #43	; 0x2b
 800aaf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafa:	f89a 3000 	ldrb.w	r3, [sl]
 800aafe:	2b2a      	cmp	r3, #42	; 0x2a
 800ab00:	d015      	beq.n	800ab2e <_svfiprintf_r+0xf6>
 800ab02:	9a07      	ldr	r2, [sp, #28]
 800ab04:	4654      	mov	r4, sl
 800ab06:	2000      	movs	r0, #0
 800ab08:	f04f 0c0a 	mov.w	ip, #10
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab12:	3b30      	subs	r3, #48	; 0x30
 800ab14:	2b09      	cmp	r3, #9
 800ab16:	d94e      	bls.n	800abb6 <_svfiprintf_r+0x17e>
 800ab18:	b1b0      	cbz	r0, 800ab48 <_svfiprintf_r+0x110>
 800ab1a:	9207      	str	r2, [sp, #28]
 800ab1c:	e014      	b.n	800ab48 <_svfiprintf_r+0x110>
 800ab1e:	eba0 0308 	sub.w	r3, r0, r8
 800ab22:	fa09 f303 	lsl.w	r3, r9, r3
 800ab26:	4313      	orrs	r3, r2
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	46a2      	mov	sl, r4
 800ab2c:	e7d2      	b.n	800aad4 <_svfiprintf_r+0x9c>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	1d19      	adds	r1, r3, #4
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	9103      	str	r1, [sp, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfbb      	ittet	lt
 800ab3a:	425b      	neglt	r3, r3
 800ab3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab40:	9307      	strge	r3, [sp, #28]
 800ab42:	9307      	strlt	r3, [sp, #28]
 800ab44:	bfb8      	it	lt
 800ab46:	9204      	strlt	r2, [sp, #16]
 800ab48:	7823      	ldrb	r3, [r4, #0]
 800ab4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4c:	d10c      	bne.n	800ab68 <_svfiprintf_r+0x130>
 800ab4e:	7863      	ldrb	r3, [r4, #1]
 800ab50:	2b2a      	cmp	r3, #42	; 0x2a
 800ab52:	d135      	bne.n	800abc0 <_svfiprintf_r+0x188>
 800ab54:	9b03      	ldr	r3, [sp, #12]
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	9203      	str	r2, [sp, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bfb8      	it	lt
 800ab60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab64:	3402      	adds	r4, #2
 800ab66:	9305      	str	r3, [sp, #20]
 800ab68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac34 <_svfiprintf_r+0x1fc>
 800ab6c:	7821      	ldrb	r1, [r4, #0]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	4650      	mov	r0, sl
 800ab72:	f7f5 fb55 	bl	8000220 <memchr>
 800ab76:	b140      	cbz	r0, 800ab8a <_svfiprintf_r+0x152>
 800ab78:	2340      	movs	r3, #64	; 0x40
 800ab7a:	eba0 000a 	sub.w	r0, r0, sl
 800ab7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	4303      	orrs	r3, r0
 800ab86:	3401      	adds	r4, #1
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8e:	4826      	ldr	r0, [pc, #152]	; (800ac28 <_svfiprintf_r+0x1f0>)
 800ab90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab94:	2206      	movs	r2, #6
 800ab96:	f7f5 fb43 	bl	8000220 <memchr>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d038      	beq.n	800ac10 <_svfiprintf_r+0x1d8>
 800ab9e:	4b23      	ldr	r3, [pc, #140]	; (800ac2c <_svfiprintf_r+0x1f4>)
 800aba0:	bb1b      	cbnz	r3, 800abea <_svfiprintf_r+0x1b2>
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	3307      	adds	r3, #7
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	3308      	adds	r3, #8
 800abac:	9303      	str	r3, [sp, #12]
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	4433      	add	r3, r6
 800abb2:	9309      	str	r3, [sp, #36]	; 0x24
 800abb4:	e767      	b.n	800aa86 <_svfiprintf_r+0x4e>
 800abb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abba:	460c      	mov	r4, r1
 800abbc:	2001      	movs	r0, #1
 800abbe:	e7a5      	b.n	800ab0c <_svfiprintf_r+0xd4>
 800abc0:	2300      	movs	r3, #0
 800abc2:	3401      	adds	r4, #1
 800abc4:	9305      	str	r3, [sp, #20]
 800abc6:	4619      	mov	r1, r3
 800abc8:	f04f 0c0a 	mov.w	ip, #10
 800abcc:	4620      	mov	r0, r4
 800abce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd2:	3a30      	subs	r2, #48	; 0x30
 800abd4:	2a09      	cmp	r2, #9
 800abd6:	d903      	bls.n	800abe0 <_svfiprintf_r+0x1a8>
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0c5      	beq.n	800ab68 <_svfiprintf_r+0x130>
 800abdc:	9105      	str	r1, [sp, #20]
 800abde:	e7c3      	b.n	800ab68 <_svfiprintf_r+0x130>
 800abe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe4:	4604      	mov	r4, r0
 800abe6:	2301      	movs	r3, #1
 800abe8:	e7f0      	b.n	800abcc <_svfiprintf_r+0x194>
 800abea:	ab03      	add	r3, sp, #12
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	462a      	mov	r2, r5
 800abf0:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <_svfiprintf_r+0x1f8>)
 800abf2:	a904      	add	r1, sp, #16
 800abf4:	4638      	mov	r0, r7
 800abf6:	f3af 8000 	nop.w
 800abfa:	1c42      	adds	r2, r0, #1
 800abfc:	4606      	mov	r6, r0
 800abfe:	d1d6      	bne.n	800abae <_svfiprintf_r+0x176>
 800ac00:	89ab      	ldrh	r3, [r5, #12]
 800ac02:	065b      	lsls	r3, r3, #25
 800ac04:	f53f af2c 	bmi.w	800aa60 <_svfiprintf_r+0x28>
 800ac08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0a:	b01d      	add	sp, #116	; 0x74
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	ab03      	add	r3, sp, #12
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	462a      	mov	r2, r5
 800ac16:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <_svfiprintf_r+0x1f8>)
 800ac18:	a904      	add	r1, sp, #16
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f000 f87a 	bl	800ad14 <_printf_i>
 800ac20:	e7eb      	b.n	800abfa <_svfiprintf_r+0x1c2>
 800ac22:	bf00      	nop
 800ac24:	0800b16c 	.word	0x0800b16c
 800ac28:	0800b176 	.word	0x0800b176
 800ac2c:	00000000 	.word	0x00000000
 800ac30:	0800a981 	.word	0x0800a981
 800ac34:	0800b172 	.word	0x0800b172

0800ac38 <_printf_common>:
 800ac38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	4699      	mov	r9, r3
 800ac40:	688a      	ldr	r2, [r1, #8]
 800ac42:	690b      	ldr	r3, [r1, #16]
 800ac44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	bfb8      	it	lt
 800ac4c:	4613      	movlt	r3, r2
 800ac4e:	6033      	str	r3, [r6, #0]
 800ac50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac54:	4607      	mov	r7, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	b10a      	cbz	r2, 800ac5e <_printf_common+0x26>
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	6033      	str	r3, [r6, #0]
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	0699      	lsls	r1, r3, #26
 800ac62:	bf42      	ittt	mi
 800ac64:	6833      	ldrmi	r3, [r6, #0]
 800ac66:	3302      	addmi	r3, #2
 800ac68:	6033      	strmi	r3, [r6, #0]
 800ac6a:	6825      	ldr	r5, [r4, #0]
 800ac6c:	f015 0506 	ands.w	r5, r5, #6
 800ac70:	d106      	bne.n	800ac80 <_printf_common+0x48>
 800ac72:	f104 0a19 	add.w	sl, r4, #25
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	6832      	ldr	r2, [r6, #0]
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dc26      	bgt.n	800acce <_printf_common+0x96>
 800ac80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac84:	1e13      	subs	r3, r2, #0
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	bf18      	it	ne
 800ac8a:	2301      	movne	r3, #1
 800ac8c:	0692      	lsls	r2, r2, #26
 800ac8e:	d42b      	bmi.n	800ace8 <_printf_common+0xb0>
 800ac90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac94:	4649      	mov	r1, r9
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c0      	blx	r8
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d01e      	beq.n	800acdc <_printf_common+0xa4>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	68e5      	ldr	r5, [r4, #12]
 800aca2:	6832      	ldr	r2, [r6, #0]
 800aca4:	f003 0306 	and.w	r3, r3, #6
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	bf08      	it	eq
 800acac:	1aad      	subeq	r5, r5, r2
 800acae:	68a3      	ldr	r3, [r4, #8]
 800acb0:	6922      	ldr	r2, [r4, #16]
 800acb2:	bf0c      	ite	eq
 800acb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acb8:	2500      	movne	r5, #0
 800acba:	4293      	cmp	r3, r2
 800acbc:	bfc4      	itt	gt
 800acbe:	1a9b      	subgt	r3, r3, r2
 800acc0:	18ed      	addgt	r5, r5, r3
 800acc2:	2600      	movs	r6, #0
 800acc4:	341a      	adds	r4, #26
 800acc6:	42b5      	cmp	r5, r6
 800acc8:	d11a      	bne.n	800ad00 <_printf_common+0xc8>
 800acca:	2000      	movs	r0, #0
 800accc:	e008      	b.n	800ace0 <_printf_common+0xa8>
 800acce:	2301      	movs	r3, #1
 800acd0:	4652      	mov	r2, sl
 800acd2:	4649      	mov	r1, r9
 800acd4:	4638      	mov	r0, r7
 800acd6:	47c0      	blx	r8
 800acd8:	3001      	adds	r0, #1
 800acda:	d103      	bne.n	800ace4 <_printf_common+0xac>
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	3501      	adds	r5, #1
 800ace6:	e7c6      	b.n	800ac76 <_printf_common+0x3e>
 800ace8:	18e1      	adds	r1, r4, r3
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	2030      	movs	r0, #48	; 0x30
 800acee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acf2:	4422      	add	r2, r4
 800acf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acfc:	3302      	adds	r3, #2
 800acfe:	e7c7      	b.n	800ac90 <_printf_common+0x58>
 800ad00:	2301      	movs	r3, #1
 800ad02:	4622      	mov	r2, r4
 800ad04:	4649      	mov	r1, r9
 800ad06:	4638      	mov	r0, r7
 800ad08:	47c0      	blx	r8
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d0e6      	beq.n	800acdc <_printf_common+0xa4>
 800ad0e:	3601      	adds	r6, #1
 800ad10:	e7d9      	b.n	800acc6 <_printf_common+0x8e>
	...

0800ad14 <_printf_i>:
 800ad14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad18:	7e0f      	ldrb	r7, [r1, #24]
 800ad1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad1c:	2f78      	cmp	r7, #120	; 0x78
 800ad1e:	4691      	mov	r9, r2
 800ad20:	4680      	mov	r8, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	469a      	mov	sl, r3
 800ad26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad2a:	d807      	bhi.n	800ad3c <_printf_i+0x28>
 800ad2c:	2f62      	cmp	r7, #98	; 0x62
 800ad2e:	d80a      	bhi.n	800ad46 <_printf_i+0x32>
 800ad30:	2f00      	cmp	r7, #0
 800ad32:	f000 80d8 	beq.w	800aee6 <_printf_i+0x1d2>
 800ad36:	2f58      	cmp	r7, #88	; 0x58
 800ad38:	f000 80a3 	beq.w	800ae82 <_printf_i+0x16e>
 800ad3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad44:	e03a      	b.n	800adbc <_printf_i+0xa8>
 800ad46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad4a:	2b15      	cmp	r3, #21
 800ad4c:	d8f6      	bhi.n	800ad3c <_printf_i+0x28>
 800ad4e:	a101      	add	r1, pc, #4	; (adr r1, 800ad54 <_printf_i+0x40>)
 800ad50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad54:	0800adad 	.word	0x0800adad
 800ad58:	0800adc1 	.word	0x0800adc1
 800ad5c:	0800ad3d 	.word	0x0800ad3d
 800ad60:	0800ad3d 	.word	0x0800ad3d
 800ad64:	0800ad3d 	.word	0x0800ad3d
 800ad68:	0800ad3d 	.word	0x0800ad3d
 800ad6c:	0800adc1 	.word	0x0800adc1
 800ad70:	0800ad3d 	.word	0x0800ad3d
 800ad74:	0800ad3d 	.word	0x0800ad3d
 800ad78:	0800ad3d 	.word	0x0800ad3d
 800ad7c:	0800ad3d 	.word	0x0800ad3d
 800ad80:	0800aecd 	.word	0x0800aecd
 800ad84:	0800adf1 	.word	0x0800adf1
 800ad88:	0800aeaf 	.word	0x0800aeaf
 800ad8c:	0800ad3d 	.word	0x0800ad3d
 800ad90:	0800ad3d 	.word	0x0800ad3d
 800ad94:	0800aeef 	.word	0x0800aeef
 800ad98:	0800ad3d 	.word	0x0800ad3d
 800ad9c:	0800adf1 	.word	0x0800adf1
 800ada0:	0800ad3d 	.word	0x0800ad3d
 800ada4:	0800ad3d 	.word	0x0800ad3d
 800ada8:	0800aeb7 	.word	0x0800aeb7
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	1d1a      	adds	r2, r3, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	602a      	str	r2, [r5, #0]
 800adb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adbc:	2301      	movs	r3, #1
 800adbe:	e0a3      	b.n	800af08 <_printf_i+0x1f4>
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	6829      	ldr	r1, [r5, #0]
 800adc4:	0606      	lsls	r6, r0, #24
 800adc6:	f101 0304 	add.w	r3, r1, #4
 800adca:	d50a      	bpl.n	800ade2 <_printf_i+0xce>
 800adcc:	680e      	ldr	r6, [r1, #0]
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	2e00      	cmp	r6, #0
 800add2:	da03      	bge.n	800addc <_printf_i+0xc8>
 800add4:	232d      	movs	r3, #45	; 0x2d
 800add6:	4276      	negs	r6, r6
 800add8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800addc:	485e      	ldr	r0, [pc, #376]	; (800af58 <_printf_i+0x244>)
 800adde:	230a      	movs	r3, #10
 800ade0:	e019      	b.n	800ae16 <_printf_i+0x102>
 800ade2:	680e      	ldr	r6, [r1, #0]
 800ade4:	602b      	str	r3, [r5, #0]
 800ade6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adea:	bf18      	it	ne
 800adec:	b236      	sxthne	r6, r6
 800adee:	e7ef      	b.n	800add0 <_printf_i+0xbc>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	6820      	ldr	r0, [r4, #0]
 800adf4:	1d19      	adds	r1, r3, #4
 800adf6:	6029      	str	r1, [r5, #0]
 800adf8:	0601      	lsls	r1, r0, #24
 800adfa:	d501      	bpl.n	800ae00 <_printf_i+0xec>
 800adfc:	681e      	ldr	r6, [r3, #0]
 800adfe:	e002      	b.n	800ae06 <_printf_i+0xf2>
 800ae00:	0646      	lsls	r6, r0, #25
 800ae02:	d5fb      	bpl.n	800adfc <_printf_i+0xe8>
 800ae04:	881e      	ldrh	r6, [r3, #0]
 800ae06:	4854      	ldr	r0, [pc, #336]	; (800af58 <_printf_i+0x244>)
 800ae08:	2f6f      	cmp	r7, #111	; 0x6f
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2308      	moveq	r3, #8
 800ae0e:	230a      	movne	r3, #10
 800ae10:	2100      	movs	r1, #0
 800ae12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae16:	6865      	ldr	r5, [r4, #4]
 800ae18:	60a5      	str	r5, [r4, #8]
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	bfa2      	ittt	ge
 800ae1e:	6821      	ldrge	r1, [r4, #0]
 800ae20:	f021 0104 	bicge.w	r1, r1, #4
 800ae24:	6021      	strge	r1, [r4, #0]
 800ae26:	b90e      	cbnz	r6, 800ae2c <_printf_i+0x118>
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d04d      	beq.n	800aec8 <_printf_i+0x1b4>
 800ae2c:	4615      	mov	r5, r2
 800ae2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae32:	fb03 6711 	mls	r7, r3, r1, r6
 800ae36:	5dc7      	ldrb	r7, [r0, r7]
 800ae38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae3c:	4637      	mov	r7, r6
 800ae3e:	42bb      	cmp	r3, r7
 800ae40:	460e      	mov	r6, r1
 800ae42:	d9f4      	bls.n	800ae2e <_printf_i+0x11a>
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d10b      	bne.n	800ae60 <_printf_i+0x14c>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07de      	lsls	r6, r3, #31
 800ae4c:	d508      	bpl.n	800ae60 <_printf_i+0x14c>
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	6861      	ldr	r1, [r4, #4]
 800ae52:	4299      	cmp	r1, r3
 800ae54:	bfde      	ittt	le
 800ae56:	2330      	movle	r3, #48	; 0x30
 800ae58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae60:	1b52      	subs	r2, r2, r5
 800ae62:	6122      	str	r2, [r4, #16]
 800ae64:	f8cd a000 	str.w	sl, [sp]
 800ae68:	464b      	mov	r3, r9
 800ae6a:	aa03      	add	r2, sp, #12
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4640      	mov	r0, r8
 800ae70:	f7ff fee2 	bl	800ac38 <_printf_common>
 800ae74:	3001      	adds	r0, #1
 800ae76:	d14c      	bne.n	800af12 <_printf_i+0x1fe>
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	b004      	add	sp, #16
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	4835      	ldr	r0, [pc, #212]	; (800af58 <_printf_i+0x244>)
 800ae84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae88:	6829      	ldr	r1, [r5, #0]
 800ae8a:	6823      	ldr	r3, [r4, #0]
 800ae8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae90:	6029      	str	r1, [r5, #0]
 800ae92:	061d      	lsls	r5, r3, #24
 800ae94:	d514      	bpl.n	800aec0 <_printf_i+0x1ac>
 800ae96:	07df      	lsls	r7, r3, #31
 800ae98:	bf44      	itt	mi
 800ae9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae9e:	6023      	strmi	r3, [r4, #0]
 800aea0:	b91e      	cbnz	r6, 800aeaa <_printf_i+0x196>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	f023 0320 	bic.w	r3, r3, #32
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	2310      	movs	r3, #16
 800aeac:	e7b0      	b.n	800ae10 <_printf_i+0xfc>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	f043 0320 	orr.w	r3, r3, #32
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	2378      	movs	r3, #120	; 0x78
 800aeb8:	4828      	ldr	r0, [pc, #160]	; (800af5c <_printf_i+0x248>)
 800aeba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aebe:	e7e3      	b.n	800ae88 <_printf_i+0x174>
 800aec0:	0659      	lsls	r1, r3, #25
 800aec2:	bf48      	it	mi
 800aec4:	b2b6      	uxthmi	r6, r6
 800aec6:	e7e6      	b.n	800ae96 <_printf_i+0x182>
 800aec8:	4615      	mov	r5, r2
 800aeca:	e7bb      	b.n	800ae44 <_printf_i+0x130>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	6826      	ldr	r6, [r4, #0]
 800aed0:	6961      	ldr	r1, [r4, #20]
 800aed2:	1d18      	adds	r0, r3, #4
 800aed4:	6028      	str	r0, [r5, #0]
 800aed6:	0635      	lsls	r5, r6, #24
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	d501      	bpl.n	800aee0 <_printf_i+0x1cc>
 800aedc:	6019      	str	r1, [r3, #0]
 800aede:	e002      	b.n	800aee6 <_printf_i+0x1d2>
 800aee0:	0670      	lsls	r0, r6, #25
 800aee2:	d5fb      	bpl.n	800aedc <_printf_i+0x1c8>
 800aee4:	8019      	strh	r1, [r3, #0]
 800aee6:	2300      	movs	r3, #0
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	4615      	mov	r5, r2
 800aeec:	e7ba      	b.n	800ae64 <_printf_i+0x150>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	1d1a      	adds	r2, r3, #4
 800aef2:	602a      	str	r2, [r5, #0]
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	6862      	ldr	r2, [r4, #4]
 800aef8:	2100      	movs	r1, #0
 800aefa:	4628      	mov	r0, r5
 800aefc:	f7f5 f990 	bl	8000220 <memchr>
 800af00:	b108      	cbz	r0, 800af06 <_printf_i+0x1f2>
 800af02:	1b40      	subs	r0, r0, r5
 800af04:	6060      	str	r0, [r4, #4]
 800af06:	6863      	ldr	r3, [r4, #4]
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	2300      	movs	r3, #0
 800af0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af10:	e7a8      	b.n	800ae64 <_printf_i+0x150>
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	462a      	mov	r2, r5
 800af16:	4649      	mov	r1, r9
 800af18:	4640      	mov	r0, r8
 800af1a:	47d0      	blx	sl
 800af1c:	3001      	adds	r0, #1
 800af1e:	d0ab      	beq.n	800ae78 <_printf_i+0x164>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	079b      	lsls	r3, r3, #30
 800af24:	d413      	bmi.n	800af4e <_printf_i+0x23a>
 800af26:	68e0      	ldr	r0, [r4, #12]
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	4298      	cmp	r0, r3
 800af2c:	bfb8      	it	lt
 800af2e:	4618      	movlt	r0, r3
 800af30:	e7a4      	b.n	800ae7c <_printf_i+0x168>
 800af32:	2301      	movs	r3, #1
 800af34:	4632      	mov	r2, r6
 800af36:	4649      	mov	r1, r9
 800af38:	4640      	mov	r0, r8
 800af3a:	47d0      	blx	sl
 800af3c:	3001      	adds	r0, #1
 800af3e:	d09b      	beq.n	800ae78 <_printf_i+0x164>
 800af40:	3501      	adds	r5, #1
 800af42:	68e3      	ldr	r3, [r4, #12]
 800af44:	9903      	ldr	r1, [sp, #12]
 800af46:	1a5b      	subs	r3, r3, r1
 800af48:	42ab      	cmp	r3, r5
 800af4a:	dcf2      	bgt.n	800af32 <_printf_i+0x21e>
 800af4c:	e7eb      	b.n	800af26 <_printf_i+0x212>
 800af4e:	2500      	movs	r5, #0
 800af50:	f104 0619 	add.w	r6, r4, #25
 800af54:	e7f5      	b.n	800af42 <_printf_i+0x22e>
 800af56:	bf00      	nop
 800af58:	0800b17d 	.word	0x0800b17d
 800af5c:	0800b18e 	.word	0x0800b18e

0800af60 <memmove>:
 800af60:	4288      	cmp	r0, r1
 800af62:	b510      	push	{r4, lr}
 800af64:	eb01 0402 	add.w	r4, r1, r2
 800af68:	d902      	bls.n	800af70 <memmove+0x10>
 800af6a:	4284      	cmp	r4, r0
 800af6c:	4623      	mov	r3, r4
 800af6e:	d807      	bhi.n	800af80 <memmove+0x20>
 800af70:	1e43      	subs	r3, r0, #1
 800af72:	42a1      	cmp	r1, r4
 800af74:	d008      	beq.n	800af88 <memmove+0x28>
 800af76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af7e:	e7f8      	b.n	800af72 <memmove+0x12>
 800af80:	4402      	add	r2, r0
 800af82:	4601      	mov	r1, r0
 800af84:	428a      	cmp	r2, r1
 800af86:	d100      	bne.n	800af8a <memmove+0x2a>
 800af88:	bd10      	pop	{r4, pc}
 800af8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af92:	e7f7      	b.n	800af84 <memmove+0x24>

0800af94 <_realloc_r>:
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	4680      	mov	r8, r0
 800af9a:	4614      	mov	r4, r2
 800af9c:	460e      	mov	r6, r1
 800af9e:	b921      	cbnz	r1, 800afaa <_realloc_r+0x16>
 800afa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa4:	4611      	mov	r1, r2
 800afa6:	f7ff bb6b 	b.w	800a680 <_malloc_r>
 800afaa:	b92a      	cbnz	r2, 800afb8 <_realloc_r+0x24>
 800afac:	f7ff fc9c 	bl	800a8e8 <_free_r>
 800afb0:	4625      	mov	r5, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	f000 f81b 	bl	800aff2 <_malloc_usable_size_r>
 800afbc:	4284      	cmp	r4, r0
 800afbe:	4607      	mov	r7, r0
 800afc0:	d802      	bhi.n	800afc8 <_realloc_r+0x34>
 800afc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afc6:	d812      	bhi.n	800afee <_realloc_r+0x5a>
 800afc8:	4621      	mov	r1, r4
 800afca:	4640      	mov	r0, r8
 800afcc:	f7ff fb58 	bl	800a680 <_malloc_r>
 800afd0:	4605      	mov	r5, r0
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0ed      	beq.n	800afb2 <_realloc_r+0x1e>
 800afd6:	42bc      	cmp	r4, r7
 800afd8:	4622      	mov	r2, r4
 800afda:	4631      	mov	r1, r6
 800afdc:	bf28      	it	cs
 800afde:	463a      	movcs	r2, r7
 800afe0:	f7ff fb18 	bl	800a614 <memcpy>
 800afe4:	4631      	mov	r1, r6
 800afe6:	4640      	mov	r0, r8
 800afe8:	f7ff fc7e 	bl	800a8e8 <_free_r>
 800afec:	e7e1      	b.n	800afb2 <_realloc_r+0x1e>
 800afee:	4635      	mov	r5, r6
 800aff0:	e7df      	b.n	800afb2 <_realloc_r+0x1e>

0800aff2 <_malloc_usable_size_r>:
 800aff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff6:	1f18      	subs	r0, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bfbc      	itt	lt
 800affc:	580b      	ldrlt	r3, [r1, r0]
 800affe:	18c0      	addlt	r0, r0, r3
 800b000:	4770      	bx	lr
	...

0800b004 <_init>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	bf00      	nop
 800b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00a:	bc08      	pop	{r3}
 800b00c:	469e      	mov	lr, r3
 800b00e:	4770      	bx	lr

0800b010 <_fini>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	bf00      	nop
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr
